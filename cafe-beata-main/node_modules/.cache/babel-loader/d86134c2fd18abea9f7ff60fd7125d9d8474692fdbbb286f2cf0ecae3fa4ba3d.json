{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { eventBus } from \"@/utils/eventBus\"; // Correct the path if needed\n\nexport default {\n  data() {\n    return {\n      notifications: [],\n      ws: null,\n      wsConnected: false,\n      wsReconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n      reconnectInterval: 3000,\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\",\n      showMarkReadConfirmation: false,\n      isPanelOpen: false,\n      unreadCount: 0,\n      showLoadingMessage: false,\n      loadingMessage: '',\n      showSuccessMessage: false,\n      successMessage: ''\n    };\n  },\n  computed: {\n    filteredNotifications() {\n      // Only show notifications from Café Beata, not from other sources like \"Lors\"\n      return this.notifications.map(notif => {\n        // Always set the customerName to Café Beata regardless of original source\n        return {\n          ...notif,\n          customerName: 'Café Beata'\n        };\n      });\n    }\n  },\n  methods: {\n    toggleNotificationPanel() {\n      this.isPanelOpen = !this.isPanelOpen;\n      if (this.isPanelOpen) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = '';\n      }\n    },\n    closePanel() {\n      this.isPanelOpen = false;\n      document.body.style.overflow = '';\n    },\n    getAvatarImage() {\n      // Always use Café Beata for the avatar\n      return `https://ui-avatars.com/api/?name=Café+Beata&background=E54F70&color=fff&size=40`;\n    },\n    // Format notification message to be more user-friendly\n    formatNotificationMessage(message) {\n      // Check if this is an order adjustment message\n      if (message.includes(\"adjust your order\") || message.includes(\"review the adjusted order\")) {\n        // For adjustments, extract and format the specific adjustment reasons\n        if (message.includes(\"The following adjustments were made:\")) {\n          const beforeAdjustmentDetails = message.split(\"The following adjustments were made:\")[0].trim();\n          const adjustmentDetails = message.split(\"The following adjustments were made:\")[1].split(\"Please review\")[0].trim();\n\n          // Return a nicely formatted message\n          return `\n            <strong>${beforeAdjustmentDetails}</strong>\n            <div class=\"adjustment-details\">\n              ${adjustmentDetails}\n            </div>\n          `;\n        } else {\n          // If no specific adjustments are listed, just show the main message\n          return message.split(\"Please review the adjusted order:\")[0].trim();\n        }\n      }\n\n      // Normal message formatting\n      return message.replace(/(Order details:.*?Total: ₱\\d+(\\.\\d{2})?)/, '').replace(/Your order/, 'Your order').replace(/\\s{2,}/g, ' ') // Remove extra spaces\n      .trim();\n    },\n    // Extract just the order details to display in a separate element\n    extractOrderDetails(message) {\n      const orderDetailsMatch = message.match(/(Order details:(.*?)Total: ₱\\d+(\\.\\d{2})?)/);\n      return orderDetailsMatch ? orderDetailsMatch[0] : '';\n    },\n    formatTimeAgo(timestamp) {\n      const now = new Date();\n      const diff = now - new Date(timestamp);\n      const minutes = Math.floor(diff / 1000 / 60);\n      const hours = Math.floor(diff / 1000 / 60 / 60);\n      const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n      if (days > 0) return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n      if (hours > 0) return `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`;\n      if (minutes > 0) return `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`;\n      return \"Just now\";\n    },\n    fetchNotifications() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let storedNotifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n\n        // Remove duplicate notifications (same order ID and same message)\n        const uniqueNotifications = [];\n        const seen = new Set();\n        storedNotifications.forEach(notification => {\n          // Create a unique key using orderId and message\n          const uniqueKey = `${notification.orderId}-${notification.message}`;\n          if (!seen.has(uniqueKey)) {\n            seen.add(uniqueKey);\n            // Ensure read property is defined\n            if (notification.read === undefined) {\n              notification.read = false;\n            }\n            uniqueNotifications.push(notification);\n          }\n        });\n\n        // Sort notifications by timestamp (newest first)\n        uniqueNotifications.sort((a, b) => {\n          const dateA = new Date(a.timestamp);\n          const dateB = new Date(b.timestamp);\n          return dateB - dateA;\n        });\n\n        // Save the deduplicated notifications back to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(uniqueNotifications));\n\n        // Update the notifications array with the deduplicated list\n        this.notifications = uniqueNotifications;\n\n        // Force update the unread count and update DOM\n        const unreadCount = this.notifications.filter(notification => !notification.read).length;\n        this.unreadCount = unreadCount;\n        eventBus.notificationsCount = unreadCount;\n        localStorage.setItem(\"unread_notifications\", unreadCount);\n\n        // Log for debugging\n        console.log(`Fetched ${this.notifications.length} notifications, ${unreadCount} unread`);\n\n        // If there are unread notifications and we just connected, show alert\n        if (this.wsConnected && unreadCount > 0) {\n          console.log(`Found ${unreadCount} unread notifications on connection`);\n        }\n\n        // Explicitly dispatch notification update event\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        return this.notifications;\n      } else {\n        this.notifications = [];\n        // Reset notification count\n        this.unreadCount = 0;\n        eventBus.notificationsCount = 0;\n        localStorage.setItem(\"unread_notifications\", 0);\n        return [];\n      }\n    },\n    addNewNotification(notification) {\n      const userName = localStorage.getItem(\"userName\");\n      if (!userName) return false;\n      const userNotificationsKey = `user_notifications_${userName}`;\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n\n      // Always ensure the notification has the current timestamp if not provided\n      if (!notification.timestamp) {\n        notification.timestamp = new Date().toISOString();\n      }\n\n      // Check if a notification with the same order ID and message already exists\n      const existingIndex = notifications.findIndex(n => n.orderId === notification.orderId && n.message === notification.message);\n\n      // Only add the notification if it doesn't already exist\n      if (existingIndex === -1) {\n        // Make sure read status is explicitly set to false for new notifications\n        notification.read = false;\n\n        // Add notification at the beginning of the array (newest first)\n        notifications.unshift(notification);\n\n        // Sort notifications by timestamp (newest first)\n        notifications.sort((a, b) => {\n          const dateA = new Date(a.timestamp);\n          const dateB = new Date(b.timestamp);\n          return dateB - dateA;\n        });\n\n        // Save the updated notifications to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Update the notifications in the component\n        this.notifications = notifications;\n\n        // Directly update the component state for immediate UI update\n        this.unreadCount = this.notifications.filter(n => !n.read).length;\n\n        // Update eventBus for other components\n        eventBus.notificationsCount = this.unreadCount;\n\n        // Update localStorage for persistence\n        localStorage.setItem(\"unread_notifications\", this.unreadCount);\n\n        // Show notification alert\n        this.showNewNotificationAlert();\n\n        // Log for debugging\n        console.log(`New notification added for ${userName}, badge count: ${this.unreadCount}`);\n\n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        return true; // Notification was added\n      }\n      return false; // Notification already exists\n    },\n    // Calculate estimated preparation time based on order items\n    calculateEstimatedTime(items) {\n      // Check if the order contains only drinks, only food, or both\n      const hasDrinks = items.some(item => item.category && (item.category.toLowerCase().includes('drink') || item.category === 'Juice Drinks' || item.category === 'Chocolate Drinks' || item.category === 'Coffee'));\n      const hasFood = items.some(item => item.category && !item.category.toLowerCase().includes('drink') && item.category !== 'Juice Drinks' && item.category !== 'Chocolate Drinks' && item.category !== 'Coffee');\n\n      // Return the appropriate estimated time\n      if (hasDrinks && !hasFood) {\n        return \"10-12 minutes\";\n      } else if (hasFood || hasDrinks && hasFood) {\n        return \"12-15 minutes\";\n      } else {\n        // Default case if categories cannot be determined\n        return \"10-15 minutes\";\n      }\n    },\n    clearNotifications() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        localStorage.removeItem(userNotificationsKey);\n        this.notifications = [];\n\n        // Reset unread count\n        this.unreadCount = 0;\n        eventBus.notificationsCount = 0;\n        localStorage.setItem(\"unread_notifications\", 0);\n\n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        console.log(\"All notifications cleared\");\n      }\n    },\n    initWebSocket() {\n      // Use the same host as the API\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n\n      // Only create a new connection if we don't have one already or if it's closed\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        console.log('Initializing WebSocket connection in UserNotifications...');\n        this.ws = new WebSocket(wsUrl);\n        this.ws.onopen = () => {\n          console.log('WebSocket connected in UserNotifications');\n          this.wsConnected = true;\n          this.wsReconnectAttempts = 0; // Reset reconnect attempts on successful connection\n        };\n        this.ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('WebSocket message received in UserNotifications:', data);\n            const userName = localStorage.getItem(\"userName\");\n            let notificationAdded = false;\n            let isForCurrentUser = false;\n\n            // Pre-update badge to ensure UI is responsive\n            if (data.target_user === userName) {\n              isForCurrentUser = true;\n              this.unreadCount += 1;\n              eventBus.notificationsCount = this.unreadCount;\n              localStorage.setItem(\"unread_notifications\", this.unreadCount);\n            }\n\n            // Process different message types\n            if (data.type === 'new_order') {\n              // Handle new order notification\n              if (data.order.customer_name === userName) {\n                console.log('Processing new order notification');\n                notificationAdded = this.addNewNotification({\n                  orderId: data.order.id,\n                  message: `Your order has been received! and is now being prepared. We will notify you as soon as it is ready for pickup. Estimated time 8-12 minutes.  Order details: ${this.formatItems(data.order.items)}. Total: ₱${this.calculateTotal(data.order.items)}`,\n                  timestamp: data.order.created_at,\n                  read: false\n                });\n\n                // Show notification panel if it's not already open\n                if (!this.isPanelOpen && notificationAdded) {\n                  this.showNewNotificationAlert();\n                }\n              }\n            } else if (data.type === 'order_status_update') {\n              // Handle order status update notification\n              if (data.customer_name === userName) {\n                console.log('Processing order status update notification');\n                if (data.status === 'completed') {\n                  notificationAdded = this.addNewNotification({\n                    orderId: data.order_id,\n                    message: `Your order #${data.order_id} is now completed! Thank you for your order.`,\n                    timestamp: new Date().toISOString(),\n                    read: false\n                  });\n\n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                } else if (data.status === 'declined') {\n                  notificationAdded = this.addNewNotification({\n                    orderId: data.order_id,\n                    message: `Your order #${data.order_id} has been declined. ${data.message || 'We apologize for any inconvenience.'}`,\n                    timestamp: new Date().toISOString(),\n                    read: false\n                  });\n\n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'admin_notification') {\n              // Handle direct notifications from admin\n              const targetUser = data.target_user;\n\n              // Only process the notification if it's for the current user\n              if (targetUser === userName) {\n                console.log('Processing user notification from admin');\n\n                // Special handling for order adjustments (send for approval)\n                if (data.action === 'order_adjustment') {\n                  console.log('Processing order adjustment notification');\n\n                  // Make sure the adjustment notification has the requiresApproval flag\n                  const adjustmentNotification = {\n                    ...data.notification,\n                    requiresApproval: true,\n                    // Explicitly set to true to show approve/decline buttons\n                    read: false\n                  };\n                  notificationAdded = this.addNewNotification(adjustmentNotification);\n\n                  // Open notification panel automatically to show the approval request\n                  if (notificationAdded) {\n                    this.showNewNotificationAlert();\n                    this.isPanelOpen = true; // Auto-open the panel for important approvals\n                  }\n                } else {\n                  // Process regular notification\n                  const notification = {\n                    ...data.notification,\n                    read: false // Mark as unread by default\n                  };\n                  notificationAdded = this.addNewNotification(notification);\n\n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'user_notification') {\n              // Handle direct notifications to the user\n              const targetUser = data.target_user;\n\n              // Only process if it's for the current user\n              if (targetUser === userName) {\n                console.log('Processing user_notification:', data);\n\n                // Handle different action types\n                if (data.action === 'order_declined') {\n                  console.log('Processing order_declined notification from user_notification type');\n\n                  // Extract notification data\n                  const declinedNotification = {\n                    ...data.notification,\n                    read: false\n                  };\n\n                  // Add the notification\n                  notificationAdded = this.addNewNotification(declinedNotification);\n\n                  // Show visual feedback and open panel\n                  if (notificationAdded) {\n                    this.showSuccessMessage = true;\n                    this.successMessage = `Order #${declinedNotification.orderId} was declined by the admin`;\n\n                    // Auto-remove the message after 3 seconds\n                    setTimeout(() => {\n                      this.showSuccessMessage = false;\n                    }, 3000);\n\n                    // Open notification panel automatically\n                    this.isPanelOpen = true;\n\n                    // Show notification alert\n                    this.showNewNotificationAlert();\n\n                    // Force refresh the notifications to ensure UI is updated\n                    this.fetchNotifications();\n\n                    // Force update UI\n                    this.$forceUpdate();\n                  }\n                } else if (data.action === 'order_adjustment') {\n                  // Already handled above, but kept for completeness\n                  console.log('Processing order_adjustment from user_notification type');\n                  const adjustmentNotification = {\n                    ...data.notification,\n                    requiresApproval: true,\n                    read: false\n                  };\n                  notificationAdded = this.addNewNotification(adjustmentNotification);\n                  if (notificationAdded) {\n                    this.showNewNotificationAlert();\n                    this.isPanelOpen = true;\n                  }\n                } else {\n                  // Handle other types of user notifications\n                  const notification = {\n                    ...data.notification,\n                    read: false\n                  };\n                  notificationAdded = this.addNewNotification(notification);\n                  if (notificationAdded && !this.isPanelOpen) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'order_declined') {\n              // Special handling for direct declined orders in real-time\n              if (data.customer_name === userName) {\n                console.log('Processing order declined notification in real-time:', data);\n\n                // Create a clear notification for the user\n                const declinedNotification = {\n                  orderId: data.order_id,\n                  message: `Your order #${data.order_id} has been declined by the admin. ${data.reason || 'We apologize for any inconvenience.'}`,\n                  timestamp: new Date().toISOString(),\n                  read: false\n                };\n\n                // Force add this notification\n                notificationAdded = this.addNewNotification(declinedNotification);\n                console.log('Decline notification added:', notificationAdded);\n\n                // Show visual feedback\n                this.showSuccessMessage = true;\n                this.successMessage = `Order #${data.order_id} was declined by the admin`;\n\n                // Auto-remove the message after 3 seconds\n                setTimeout(() => {\n                  this.showSuccessMessage = false;\n                }, 3000);\n\n                // Open the notification panel automatically\n                this.isPanelOpen = true;\n\n                // Show notification alert with sound\n                this.showNewNotificationAlert();\n\n                // Force refresh the notifications from localStorage to ensure they appear\n                this.fetchNotifications();\n\n                // Force update the UI\n                this.$forceUpdate();\n              }\n            }\n\n            // If we pre-updated the badge but didn't actually add a notification,\n            // rollback the count\n            if (isForCurrentUser && !notificationAdded) {\n              console.log('Notification not added, rolling back badge count');\n              this.fetchAndRefreshBadge();\n            }\n          } catch (error) {\n            console.error('Error processing WebSocket message in UserNotifications:', error);\n          }\n        };\n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected in UserNotifications');\n          this.wsConnected = false;\n\n          // Implement fixed reconnection attempt with a 5 second delay\n          // This matches the approach in NotificationsPage.vue\n          setTimeout(() => {\n            if (!this.wsConnected) {\n              console.log('Attempting to reconnect WebSocket in UserNotifications...');\n              this.initWebSocket();\n            }\n          }, 5000);\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket error in UserNotifications:', error);\n          this.wsConnected = false;\n\n          // Try to reconnect after error with the same approach as NotificationsPage\n          setTimeout(() => {\n            if (!this.wsConnected) {\n              console.log('Attempting to reconnect WebSocket after error in UserNotifications...');\n              this.initWebSocket();\n            }\n          }, 5000);\n        };\n      }\n    },\n    formatItems(items) {\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\n    },\n    calculateTotal(items) {\n      return items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n    markAllAsRead() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n\n        // Get existing notifications\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n\n        // Mark all notifications as read\n        notifications = notifications.map(notification => ({\n          ...notification,\n          read: true\n        }));\n\n        // Save back to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Update the notifications in the component\n        this.notifications = notifications;\n\n        // Immediately reset unread count to 0\n        this.unreadCount = 0;\n\n        // Update eventBus to notify other components\n        eventBus.notificationsCount = 0;\n\n        // Update localStorage for persistence\n        localStorage.setItem(\"unread_notifications\", 0);\n\n        // Close the confirmation popup\n        this.showMarkReadConfirmation = false;\n\n        // Force UI to update\n        this.$forceUpdate();\n\n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        console.log('All notifications marked as read');\n      }\n    },\n    // Add new method to show notification alert\n    showNewNotificationAlert() {\n      // Play notification sound immediately\n      try {\n        const audio = new Audio('/notification-sound.mp3');\n        audio.play().catch(e => console.log('Error playing notification sound:', e));\n      } catch (e) {\n        console.log('Error playing notification sound:', e);\n      }\n\n      // Immediately apply animations\n      this.$nextTick(() => {\n        // Add animation class to notification badge\n        const badge = document.querySelector('.floating-notification-badge');\n        if (badge) {\n          // Remove existing animation if present\n          badge.classList.remove('notification-pulse');\n\n          // Force reflow to restart animation\n          void badge.offsetWidth;\n\n          // Add animation class\n          badge.classList.add('notification-pulse');\n\n          // Remove animation class after it completes\n          setTimeout(() => {\n            badge.classList.remove('notification-pulse');\n          }, 2000);\n        }\n\n        // Flash the notification button to make it more noticeable\n        const notificationButton = document.querySelector('.floating-notification');\n        if (notificationButton) {\n          notificationButton.classList.add('notification-button-highlight');\n          setTimeout(() => {\n            notificationButton.classList.remove('notification-button-highlight');\n          }, 2000);\n        }\n        console.log('Notification alert displayed immediately');\n      });\n    },\n    // New method to force refresh the badge when needed\n    fetchAndRefreshBadge() {\n      this.fetchNotifications();\n\n      // Force DOM update of badge after fetching notifications\n      this.$nextTick(() => {\n        const unreadCount = this.notifications.filter(notification => !notification.read).length;\n        this.unreadCount = unreadCount;\n        eventBus.notificationsCount = unreadCount;\n        localStorage.setItem(\"unread_notifications\", unreadCount);\n        console.log(\"Badge refreshed with count:\", unreadCount);\n      });\n    },\n    // Approve order adjustment\n    approveAdjustment(notification, index) {\n      if (!notification.orderId) return;\n\n      // Mark notification as read and show immediate UI feedback\n      notification.read = true;\n      notification.requiresApproval = false;\n      notification.message = notification.message + \" [Approved]\";\n\n      // Show pending indicator\n      this.showLoadingMessage = true;\n      this.loadingMessage = 'Sending approval...';\n\n      // Update the order in the database to remove the pending approval flag\n      fetch(`http://127.0.0.1:8000/orders/${notification.orderId}/update-items`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          items: notification.items,\n          // Keep the adjusted items\n          status: \"pending\",\n          // Keep as pending\n          isPendingApproval: false // Remove the pending approval flag\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(() => {\n        console.log(\"Order approved successfully in database\");\n\n        // Send approval response notification back to admin\n        this.sendAdminNotification(notification.orderId, `The customer has APPROVED the order adjustments. Order ID: ${notification.orderId}`, notification.items);\n\n        // Send an additional direct notification with customer_approval type for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'customer_approval',\n            orderId: notification.orderId,\n            items: notification.items,\n            approved: true,\n            timestamp: new Date().toISOString()\n          }));\n        }\n\n        // Update the user notifications in localStorage\n        const userName = localStorage.getItem(\"userName\");\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n\n        // Update the notification to show it's been approved\n        notifications[index] = {\n          ...notification,\n          requiresApproval: false,\n          message: notification.message\n        };\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        this.notifications = notifications;\n\n        // Update the unread count\n        this.updateUnreadCount();\n\n        // Remove loading message\n        this.showLoadingMessage = false;\n\n        // Show success feedback\n        this.showSuccessMessage = true;\n        this.successMessage = 'Order adjustments approved!';\n\n        // Auto-remove the success message after 3 seconds\n        setTimeout(() => {\n          this.showSuccessMessage = false;\n        }, 3000);\n      }).catch(error => {\n        console.error(\"Error approving order adjustment:\", error);\n\n        // Remove loading message\n        this.showLoadingMessage = false;\n\n        // Show error message\n        alert(\"Error approving order adjustment. Please try again.\");\n\n        // Revert UI changes on error\n        notification.requiresApproval = true;\n        notification.message = notification.message.replace(\" [Approved]\", \"\");\n        this.$forceUpdate(); // Force UI update\n      });\n    },\n    // Decline order adjustment\n    declineAdjustment(notification, index) {\n      if (!notification.orderId) return;\n\n      // Mark notification as being processed\n      notification.isProcessing = true;\n      this.$forceUpdate(); // Force UI update\n\n      // Show pending indicator\n      this.showLoadingMessage = true;\n      this.loadingMessage = 'Declining order...';\n\n      // Option 1: Decline the entire order\n      fetch(`http://127.0.0.1:8000/orders/${notification.orderId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          status: \"declined\",\n          items: notification.originalItems || notification.items\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(() => {\n        console.log(\"Order declined successfully in database\");\n\n        // Send decline response notification back to admin\n        this.sendAdminNotification(notification.orderId, `The customer has DECLINED the order adjustments. Order ID: ${notification.orderId}`, notification.originalItems || notification.items);\n\n        // Send an additional direct notification with customer_approval type for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'customer_approval',\n            orderId: notification.orderId,\n            approved: false,\n            timestamp: new Date().toISOString()\n          }));\n        }\n\n        // Remove the notification from the user's list\n        const userName = localStorage.getItem(\"userName\");\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n\n        // Remove this notification\n        notifications.splice(index, 1);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        this.notifications = notifications;\n\n        // Update the unread count\n        this.updateUnreadCount();\n\n        // Hide loading message\n        this.showLoadingMessage = false;\n\n        // Show success feedback\n        this.showSuccessMessage = true;\n        this.successMessage = 'Order adjustments declined successfully';\n\n        // Auto-remove the success message after 3 seconds\n        setTimeout(() => {\n          this.showSuccessMessage = false;\n        }, 3000);\n      }).catch(error => {\n        console.error(\"Error declining order adjustment:\", error);\n\n        // Hide loading message\n        this.showLoadingMessage = false;\n\n        // Clear processing state\n        notification.isProcessing = false;\n        this.$forceUpdate();\n\n        // Show error message\n        alert(\"Error declining order adjustment. Please try again.\");\n      });\n    },\n    // Helper to send notifications to admin\n    sendAdminNotification(orderId, message, items) {\n      // Create a notification for admin\n      const adminNotification = {\n        orderId,\n        customerName: \"Admin\",\n        // Direct to admin\n        message,\n        timestamp: new Date().toISOString(),\n        items,\n        isAdminNotification: true\n      };\n\n      // Save to admin notifications\n      const adminNotificationsKey = \"user_notifications_Admin\";\n      let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n      adminNotifications.push(adminNotification);\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n\n      // Send WebSocket notification if connected\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'admin_notification',\n          action: 'adjustment_response',\n          notification: adminNotification\n        }));\n      }\n    },\n    // Helper to update unread count\n    updateUnreadCount() {\n      const unreadCount = this.notifications.filter(n => !n.read).length;\n      this.unreadCount = unreadCount;\n      eventBus.notificationsCount = unreadCount;\n      localStorage.setItem(\"unread_notifications\", unreadCount);\n    }\n  },\n  created() {\n    // Initialize notifications and badge\n    this.fetchAndRefreshBadge();\n\n    // Initialize WebSocket connection\n    this.initWebSocket();\n\n    // Set up event listeners\n    window.addEventListener(\"notificationUpdated\", this.fetchAndRefreshBadge);\n  },\n  mounted() {\n    // Force badge refresh after component is mounted\n    this.$nextTick(() => {\n      this.fetchAndRefreshBadge();\n    });\n\n    // Check WebSocket connection periodically and reconnect if needed\n    this.wsCheckInterval = setInterval(() => {\n      if (!this.wsConnected || !this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        console.log('WebSocket not connected in UserNotifications. Attempting to reconnect...');\n        this.initWebSocket();\n      } else {\n        // Periodically refresh badge\n        this.fetchAndRefreshBadge();\n      }\n    }, 30000); // Check every 30 seconds\n  },\n  beforeUnmount() {\n    // Clean up event listeners and intervals\n    window.removeEventListener(\"notificationUpdated\", this.fetchAndRefreshBadge);\n    clearInterval(this.wsCheckInterval);\n\n    // Close WebSocket connection\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n};","map":{"version":3,"names":["eventBus","data","notifications","ws","wsConnected","wsReconnectAttempts","maxReconnectAttempts","reconnectInterval","isDarkMode","localStorage","getItem","showMarkReadConfirmation","isPanelOpen","unreadCount","showLoadingMessage","loadingMessage","showSuccessMessage","successMessage","computed","filteredNotifications","map","notif","customerName","methods","toggleNotificationPanel","document","body","style","overflow","closePanel","getAvatarImage","formatNotificationMessage","message","includes","beforeAdjustmentDetails","split","trim","adjustmentDetails","replace","extractOrderDetails","orderDetailsMatch","match","formatTimeAgo","timestamp","now","Date","diff","minutes","Math","floor","hours","days","fetchNotifications","userName","userNotificationsKey","storedNotifications","JSON","parse","uniqueNotifications","seen","Set","forEach","notification","uniqueKey","orderId","has","add","read","undefined","push","sort","a","b","dateA","dateB","setItem","stringify","filter","length","notificationsCount","console","log","window","dispatchEvent","CustomEvent","addNewNotification","toISOString","existingIndex","findIndex","n","unshift","showNewNotificationAlert","calculateEstimatedTime","items","hasDrinks","some","item","category","toLowerCase","hasFood","clearNotifications","removeItem","initWebSocket","wsUrl","location","hostname","readyState","WebSocket","CLOSED","onopen","onmessage","event","notificationAdded","isForCurrentUser","target_user","type","order","customer_name","id","formatItems","calculateTotal","created_at","status","order_id","targetUser","action","adjustmentNotification","requiresApproval","declinedNotification","setTimeout","$forceUpdate","reason","fetchAndRefreshBadge","error","onclose","onerror","name","quantity","join","reduce","sum","price","toFixed","markAllAsRead","audio","Audio","play","catch","e","$nextTick","badge","querySelector","classList","remove","offsetWidth","notificationButton","approveAdjustment","index","fetch","method","headers","isPendingApproval","then","response","ok","Error","json","sendAdminNotification","OPEN","send","approved","updateUnreadCount","alert","declineAdjustment","isProcessing","originalItems","splice","adminNotification","isAdminNotification","adminNotificationsKey","adminNotifications","created","addEventListener","mounted","wsCheckInterval","setInterval","beforeUnmount","removeEventListener","clearInterval","close"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\UserNotifications.vue"],"sourcesContent":["<template>\n  <div :class=\"['notifications-container', { 'dark-mode': isDarkMode }]\">\n    <!-- Floating Notification Button -->\n    <div class=\"floating-notification\" @click=\"toggleNotificationPanel\">\n      <i class=\"fas fa-bell\"></i>\n      <span v-if=\"unreadCount > 0\" class=\"floating-notification-badge\">{{ unreadCount }}</span>\n    </div>\n\n    <!-- Notification Panel (Modal) -->\n    <div v-if=\"isPanelOpen\" class=\"notification-panel-overlay\" @click=\"closePanel\">\n      <div class=\"notifications-card\" @click.stop>\n        <div class=\"notifications-header\">\n          <h2>Notifications</h2>\n          <div class=\"notification-controls\">\n            <button class=\"close-panel\" @click=\"closePanel\">✕</button>\n          </div>\n        </div>\n\n        <!-- Notifications List -->\n        <div class=\"notifications-list\">\n          <!-- Check if there are no notifications -->\n          <p v-if=\"filteredNotifications.length === 0\" class=\"no-notifications\">\n            No notifications at the moment.\n          </p>\n\n          <!-- Render notifications if there are any -->\n          <div v-for=\"(notification, index) in filteredNotifications\" :key=\"index\" class=\"notification-item\">\n            <div class=\"notification-avatar\">\n              <img :src=\"getAvatarImage()\" alt=\"Café Beata avatar\">\n            </div>\n            <div class=\"notification-content\">\n              <div class=\"notification-header\">\n                <span class=\"notification-name\">Café Beata</span>\n                <span class=\"notification-time\">{{ formatTimeAgo(notification.timestamp) }}</span>\n              </div>\n              <p class=\"notification-message\" v-html=\"formatNotificationMessage(notification.message)\"></p>\n              <p class=\"order-details\" v-if=\"extractOrderDetails(notification.message)\">\n                {{ extractOrderDetails(notification.message) }}\n              </p>\n              \n              <!-- Approval Buttons for notifications that require approval -->\n              <div v-if=\"notification.requiresApproval\" class=\"approval-actions\">\n                <button @click=\"approveAdjustment(notification, index)\" class=\"approve-btn\">\n                  Approve\n                </button>\n                <button @click=\"declineAdjustment(notification, index)\" class=\"decline-btn\">\n                  Decline\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"notifications-footer\">\n          <div class=\"action-buttons\">\n            <button class=\"mark-read-btn\" @click=\"showMarkReadConfirmation = true\">Mark All as Read</button>\n            <button class=\"clear-btn\" @click=\"clearNotifications\">Clear Notifications</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Mark As Read Confirmation Popup -->\n    <div v-if=\"showMarkReadConfirmation\" class=\"confirmation-popup\">\n      <div class=\"confirmation-content\">\n        <h3>Confirm Action</h3>\n        <p>Are you sure you want to mark all notifications as read?</p>\n        <div class=\"confirmation-buttons\">\n          <button @click=\"markAllAsRead\" class=\"confirm-yes-btn\">Yes</button>\n          <button @click=\"showMarkReadConfirmation = false\" class=\"confirm-no-btn\">No</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- New styles for loading and success messages -->\n    <div v-if=\"showLoadingMessage\" class=\"loading-message\">\n      {{ loadingMessage }}\n    </div>\n\n    <div v-if=\"showSuccessMessage\" class=\"success-message-floating\">\n      {{ successMessage }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { eventBus } from \"@/utils/eventBus\"; // Correct the path if needed\n\nexport default {\n  data() {\n    return {\n      notifications: [],\n      ws: null,\n      wsConnected: false,\n      wsReconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n      reconnectInterval: 3000,\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\",\n      showMarkReadConfirmation: false,\n      isPanelOpen: false,\n      unreadCount: 0,\n      showLoadingMessage: false,\n      loadingMessage: '',\n      showSuccessMessage: false,\n      successMessage: ''\n    };\n  },\n  computed: {\n    filteredNotifications() {\n      // Only show notifications from Café Beata, not from other sources like \"Lors\"\n      return this.notifications.map(notif => {\n        // Always set the customerName to Café Beata regardless of original source\n        return {\n          ...notif,\n          customerName: 'Café Beata'\n        };\n      });\n    }\n  },\n  methods: {\n    toggleNotificationPanel() {\n      this.isPanelOpen = !this.isPanelOpen;\n      if (this.isPanelOpen) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = '';\n      }\n    },\n    \n    closePanel() {\n      this.isPanelOpen = false;\n      document.body.style.overflow = '';\n    },\n    \n    getAvatarImage() {\n      // Always use Café Beata for the avatar\n      return `https://ui-avatars.com/api/?name=Café+Beata&background=E54F70&color=fff&size=40`;\n    },\n    \n    // Format notification message to be more user-friendly\n    formatNotificationMessage(message) {\n      // Check if this is an order adjustment message\n      if (message.includes(\"adjust your order\") || message.includes(\"review the adjusted order\")) {\n        // For adjustments, extract and format the specific adjustment reasons\n        if (message.includes(\"The following adjustments were made:\")) {\n          const beforeAdjustmentDetails = message.split(\"The following adjustments were made:\")[0].trim();\n          const adjustmentDetails = message.split(\"The following adjustments were made:\")[1].split(\"Please review\")[0].trim();\n          \n          // Return a nicely formatted message\n          return `\n            <strong>${beforeAdjustmentDetails}</strong>\n            <div class=\"adjustment-details\">\n              ${adjustmentDetails}\n            </div>\n          `;\n        } else {\n          // If no specific adjustments are listed, just show the main message\n          return message.split(\"Please review the adjusted order:\")[0].trim();\n        }\n      }\n      \n      // Normal message formatting\n      return message.replace(/(Order details:.*?Total: ₱\\d+(\\.\\d{2})?)/, '')\n                    .replace(/Your order/, 'Your order')\n                    .replace(/\\s{2,}/g, ' ') // Remove extra spaces\n                    .trim();\n    },\n    \n    // Extract just the order details to display in a separate element\n    extractOrderDetails(message) {\n      const orderDetailsMatch = message.match(/(Order details:(.*?)Total: ₱\\d+(\\.\\d{2})?)/);\n      return orderDetailsMatch ? orderDetailsMatch[0] : '';\n    },\n    \n    formatTimeAgo(timestamp) {\n      const now = new Date();\n      const diff = now - new Date(timestamp);\n      const minutes = Math.floor(diff / 1000 / 60);\n      const hours = Math.floor(diff / 1000 / 60 / 60);\n      const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n\n      if (days > 0) return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n      if (hours > 0) return `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`;\n      if (minutes > 0) return `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`;\n      return \"Just now\";\n    },\n\n    fetchNotifications() {\n      const userName = localStorage.getItem(\"userName\"); \n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let storedNotifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Remove duplicate notifications (same order ID and same message)\n        const uniqueNotifications = [];\n        const seen = new Set();\n        \n        storedNotifications.forEach(notification => {\n          // Create a unique key using orderId and message\n          const uniqueKey = `${notification.orderId}-${notification.message}`;\n          \n          if (!seen.has(uniqueKey)) {\n            seen.add(uniqueKey);\n            // Ensure read property is defined\n            if (notification.read === undefined) {\n              notification.read = false;\n            }\n            uniqueNotifications.push(notification);\n          }\n        });\n        \n        // Sort notifications by timestamp (newest first)\n        uniqueNotifications.sort((a, b) => {\n          const dateA = new Date(a.timestamp);\n          const dateB = new Date(b.timestamp);\n          return dateB - dateA;\n        });\n        \n        // Save the deduplicated notifications back to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(uniqueNotifications));\n        \n        // Update the notifications array with the deduplicated list\n        this.notifications = uniqueNotifications;\n        \n        // Force update the unread count and update DOM\n        const unreadCount = this.notifications.filter(notification => !notification.read).length;\n        this.unreadCount = unreadCount;\n        eventBus.notificationsCount = unreadCount;\n        localStorage.setItem(\"unread_notifications\", unreadCount);\n        \n        // Log for debugging\n        console.log(`Fetched ${this.notifications.length} notifications, ${unreadCount} unread`);\n        \n        // If there are unread notifications and we just connected, show alert\n        if (this.wsConnected && unreadCount > 0) {\n          console.log(`Found ${unreadCount} unread notifications on connection`);\n        }\n        \n        // Explicitly dispatch notification update event\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        return this.notifications;\n      } else {\n        this.notifications = [];\n        // Reset notification count\n        this.unreadCount = 0;\n        eventBus.notificationsCount = 0;\n        localStorage.setItem(\"unread_notifications\", 0);\n        return [];\n      }\n    },\n\n    addNewNotification(notification) {\n      const userName = localStorage.getItem(\"userName\");\n      if (!userName) return false;\n      \n      const userNotificationsKey = `user_notifications_${userName}`;\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n      \n      // Always ensure the notification has the current timestamp if not provided\n      if (!notification.timestamp) {\n        notification.timestamp = new Date().toISOString();\n      }\n      \n      // Check if a notification with the same order ID and message already exists\n      const existingIndex = notifications.findIndex(n => \n        n.orderId === notification.orderId && n.message === notification.message\n      );\n      \n      // Only add the notification if it doesn't already exist\n      if (existingIndex === -1) {\n        // Make sure read status is explicitly set to false for new notifications\n        notification.read = false;\n        \n        // Add notification at the beginning of the array (newest first)\n        notifications.unshift(notification);\n        \n        // Sort notifications by timestamp (newest first)\n        notifications.sort((a, b) => {\n          const dateA = new Date(a.timestamp);\n          const dateB = new Date(b.timestamp);\n          return dateB - dateA;\n        });\n        \n        // Save the updated notifications to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Update the notifications in the component\n        this.notifications = notifications;\n        \n        // Directly update the component state for immediate UI update\n        this.unreadCount = this.notifications.filter(n => !n.read).length;\n        \n        // Update eventBus for other components\n        eventBus.notificationsCount = this.unreadCount;\n        \n        // Update localStorage for persistence\n        localStorage.setItem(\"unread_notifications\", this.unreadCount);\n        \n        // Show notification alert\n        this.showNewNotificationAlert();\n        \n        // Log for debugging\n        console.log(`New notification added for ${userName}, badge count: ${this.unreadCount}`);\n        \n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        return true; // Notification was added\n      }\n      \n      return false; // Notification already exists\n    },\n\n    // Calculate estimated preparation time based on order items\n    calculateEstimatedTime(items) {\n      // Check if the order contains only drinks, only food, or both\n      const hasDrinks = items.some(item => \n        item.category && \n        (item.category.toLowerCase().includes('drink') || \n         item.category === 'Juice Drinks' || \n         item.category === 'Chocolate Drinks' ||\n         item.category === 'Coffee')\n      );\n      \n      const hasFood = items.some(item => \n        item.category && \n        !item.category.toLowerCase().includes('drink') && \n        item.category !== 'Juice Drinks' && \n        item.category !== 'Chocolate Drinks' &&\n        item.category !== 'Coffee'\n      );\n      \n      // Return the appropriate estimated time\n      if (hasDrinks && !hasFood) {\n        return \"10-12 minutes\";\n      } else if (hasFood || (hasDrinks && hasFood)) {\n        return \"12-15 minutes\";\n      } else {\n        // Default case if categories cannot be determined\n        return \"10-15 minutes\";\n      }\n    },\n\n    clearNotifications() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        localStorage.removeItem(userNotificationsKey);\n        this.notifications = [];\n        \n        // Reset unread count\n        this.unreadCount = 0;\n        eventBus.notificationsCount = 0;\n        localStorage.setItem(\"unread_notifications\", 0);\n        \n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        console.log(\"All notifications cleared\");\n      }\n    },\n\n    initWebSocket() {\n      // Use the same host as the API\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n      \n      // Only create a new connection if we don't have one already or if it's closed\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        console.log('Initializing WebSocket connection in UserNotifications...');\n        this.ws = new WebSocket(wsUrl);\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket connected in UserNotifications');\n          this.wsConnected = true;\n          this.wsReconnectAttempts = 0; // Reset reconnect attempts on successful connection\n        };\n        \n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('WebSocket message received in UserNotifications:', data);\n            \n            const userName = localStorage.getItem(\"userName\");\n            let notificationAdded = false;\n            let isForCurrentUser = false;\n            \n            // Pre-update badge to ensure UI is responsive\n            if (data.target_user === userName) {\n              isForCurrentUser = true;\n              this.unreadCount += 1;\n              eventBus.notificationsCount = this.unreadCount;\n              localStorage.setItem(\"unread_notifications\", this.unreadCount);\n            }\n\n            // Process different message types\n            if (data.type === 'new_order') {\n              // Handle new order notification\n              if (data.order.customer_name === userName) {\n                console.log('Processing new order notification');\n                notificationAdded = this.addNewNotification({\n                  orderId: data.order.id,\n                  message: `Your order has been received! and is now being prepared. We will notify you as soon as it is ready for pickup. Estimated time 8-12 minutes.  Order details: ${this.formatItems(data.order.items)}. Total: ₱${this.calculateTotal(data.order.items)}`,\n                  timestamp: data.order.created_at,\n                  read: false\n                });\n                \n                // Show notification panel if it's not already open\n                if (!this.isPanelOpen && notificationAdded) {\n                  this.showNewNotificationAlert();\n                }\n              }\n            } else if (data.type === 'order_status_update') {\n              // Handle order status update notification\n              if (data.customer_name === userName) {\n                console.log('Processing order status update notification');\n                if (data.status === 'completed') {\n                  notificationAdded = this.addNewNotification({\n                    orderId: data.order_id,\n                    message: `Your order #${data.order_id} is now completed! Thank you for your order.`,\n                    timestamp: new Date().toISOString(),\n                    read: false\n                  });\n                  \n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                } else if (data.status === 'declined') {\n                  notificationAdded = this.addNewNotification({\n                    orderId: data.order_id,\n                    message: `Your order #${data.order_id} has been declined. ${data.message || 'We apologize for any inconvenience.'}`,\n                    timestamp: new Date().toISOString(),\n                    read: false\n                  });\n                  \n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'admin_notification') {\n              // Handle direct notifications from admin\n              const targetUser = data.target_user;\n              \n              // Only process the notification if it's for the current user\n              if (targetUser === userName) {\n                console.log('Processing user notification from admin');\n                \n                // Special handling for order adjustments (send for approval)\n                if (data.action === 'order_adjustment') {\n                  console.log('Processing order adjustment notification');\n                  \n                  // Make sure the adjustment notification has the requiresApproval flag\n                  const adjustmentNotification = {\n                    ...data.notification,\n                    requiresApproval: true,  // Explicitly set to true to show approve/decline buttons\n                    read: false\n                  };\n                  \n                  notificationAdded = this.addNewNotification(adjustmentNotification);\n                  \n                  // Open notification panel automatically to show the approval request\n                  if (notificationAdded) {\n                    this.showNewNotificationAlert();\n                    this.isPanelOpen = true;  // Auto-open the panel for important approvals\n                  }\n                } else {\n                  // Process regular notification\n                  const notification = {\n                    ...data.notification,\n                    read: false // Mark as unread by default\n                  };\n                  \n                  notificationAdded = this.addNewNotification(notification);\n                  \n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'user_notification') {\n              // Handle direct notifications to the user\n              const targetUser = data.target_user;\n              \n              // Only process if it's for the current user\n              if (targetUser === userName) {\n                console.log('Processing user_notification:', data);\n                \n                // Handle different action types\n                if (data.action === 'order_declined') {\n                  console.log('Processing order_declined notification from user_notification type');\n                  \n                  // Extract notification data\n                  const declinedNotification = {\n                    ...data.notification,\n                    read: false\n                  };\n                  \n                  // Add the notification\n                  notificationAdded = this.addNewNotification(declinedNotification);\n                  \n                  // Show visual feedback and open panel\n                  if (notificationAdded) {\n                    this.showSuccessMessage = true;\n                    this.successMessage = `Order #${declinedNotification.orderId} was declined by the admin`;\n                    \n                    // Auto-remove the message after 3 seconds\n                    setTimeout(() => {\n                      this.showSuccessMessage = false;\n                    }, 3000);\n                    \n                    // Open notification panel automatically\n                    this.isPanelOpen = true;\n                    \n                    // Show notification alert\n                    this.showNewNotificationAlert();\n                    \n                    // Force refresh the notifications to ensure UI is updated\n                    this.fetchNotifications();\n                    \n                    // Force update UI\n                    this.$forceUpdate();\n                  }\n                } else if (data.action === 'order_adjustment') {\n                  // Already handled above, but kept for completeness\n                  console.log('Processing order_adjustment from user_notification type');\n                  \n                  const adjustmentNotification = {\n                    ...data.notification,\n                    requiresApproval: true,\n                    read: false\n                  };\n                  \n                  notificationAdded = this.addNewNotification(adjustmentNotification);\n                  \n                  if (notificationAdded) {\n                    this.showNewNotificationAlert();\n                    this.isPanelOpen = true;\n                  }\n                } else {\n                  // Handle other types of user notifications\n                  const notification = {\n                    ...data.notification,\n                    read: false\n                  };\n                  \n                  notificationAdded = this.addNewNotification(notification);\n                  \n                  if (notificationAdded && !this.isPanelOpen) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'order_declined') {\n              // Special handling for direct declined orders in real-time\n              if (data.customer_name === userName) {\n                console.log('Processing order declined notification in real-time:', data);\n                \n                // Create a clear notification for the user\n                const declinedNotification = {\n                  orderId: data.order_id,\n                  message: `Your order #${data.order_id} has been declined by the admin. ${data.reason || 'We apologize for any inconvenience.'}`,\n                  timestamp: new Date().toISOString(),\n                  read: false\n                };\n                \n                // Force add this notification\n                notificationAdded = this.addNewNotification(declinedNotification);\n                console.log('Decline notification added:', notificationAdded);\n                \n                // Show visual feedback\n                this.showSuccessMessage = true;\n                this.successMessage = `Order #${data.order_id} was declined by the admin`;\n                \n                // Auto-remove the message after 3 seconds\n                setTimeout(() => {\n                  this.showSuccessMessage = false;\n                }, 3000);\n                \n                // Open the notification panel automatically\n                this.isPanelOpen = true;\n                \n                // Show notification alert with sound\n                this.showNewNotificationAlert();\n                \n                // Force refresh the notifications from localStorage to ensure they appear\n                this.fetchNotifications();\n                \n                // Force update the UI\n                this.$forceUpdate();\n              }\n            }\n            \n            // If we pre-updated the badge but didn't actually add a notification,\n            // rollback the count\n            if (isForCurrentUser && !notificationAdded) {\n              console.log('Notification not added, rolling back badge count');\n              this.fetchAndRefreshBadge();\n            }\n          } catch (error) {\n            console.error('Error processing WebSocket message in UserNotifications:', error);\n          }\n        };\n        \n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected in UserNotifications');\n          this.wsConnected = false;\n          \n          // Implement fixed reconnection attempt with a 5 second delay\n          // This matches the approach in NotificationsPage.vue\n          setTimeout(() => {\n            if (!this.wsConnected) {\n              console.log('Attempting to reconnect WebSocket in UserNotifications...');\n              this.initWebSocket();\n            }\n          }, 5000);\n        };\n        \n        this.ws.onerror = (error) => {\n          console.error('WebSocket error in UserNotifications:', error);\n          this.wsConnected = false;\n          \n          // Try to reconnect after error with the same approach as NotificationsPage\n          setTimeout(() => {\n            if (!this.wsConnected) {\n              console.log('Attempting to reconnect WebSocket after error in UserNotifications...');\n              this.initWebSocket();\n            }\n          }, 5000);\n        };\n      }\n    },\n\n    formatItems(items) {\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\n    },\n\n    calculateTotal(items) {\n      return items.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);\n    },\n\n    markAllAsRead() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        \n        // Get existing notifications\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Mark all notifications as read\n        notifications = notifications.map(notification => ({\n          ...notification,\n          read: true\n        }));\n        \n        // Save back to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        \n        // Update the notifications in the component\n        this.notifications = notifications;\n        \n        // Immediately reset unread count to 0\n        this.unreadCount = 0;\n        \n        // Update eventBus to notify other components\n        eventBus.notificationsCount = 0;\n        \n        // Update localStorage for persistence\n        localStorage.setItem(\"unread_notifications\", 0);\n        \n        // Close the confirmation popup\n        this.showMarkReadConfirmation = false;\n        \n        // Force UI to update\n        this.$forceUpdate();\n        \n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        console.log('All notifications marked as read');\n      }\n    },\n\n    // Add new method to show notification alert\n    showNewNotificationAlert() {\n      // Play notification sound immediately\n      try {\n        const audio = new Audio('/notification-sound.mp3');\n        audio.play().catch(e => console.log('Error playing notification sound:', e));\n      } catch(e) {\n        console.log('Error playing notification sound:', e);\n      }\n      \n      // Immediately apply animations\n      this.$nextTick(() => {\n        // Add animation class to notification badge\n        const badge = document.querySelector('.floating-notification-badge');\n        if (badge) {\n          // Remove existing animation if present\n          badge.classList.remove('notification-pulse');\n          \n          // Force reflow to restart animation\n          void badge.offsetWidth;\n          \n          // Add animation class\n          badge.classList.add('notification-pulse');\n          \n          // Remove animation class after it completes\n          setTimeout(() => {\n            badge.classList.remove('notification-pulse');\n          }, 2000);\n        }\n        \n        // Flash the notification button to make it more noticeable\n        const notificationButton = document.querySelector('.floating-notification');\n        if (notificationButton) {\n          notificationButton.classList.add('notification-button-highlight');\n          setTimeout(() => {\n            notificationButton.classList.remove('notification-button-highlight');\n          }, 2000);\n        }\n        \n        console.log('Notification alert displayed immediately');\n      });\n    },\n\n    // New method to force refresh the badge when needed\n    fetchAndRefreshBadge() {\n      this.fetchNotifications();\n      \n      // Force DOM update of badge after fetching notifications\n      this.$nextTick(() => {\n        const unreadCount = this.notifications.filter(notification => !notification.read).length;\n        this.unreadCount = unreadCount;\n        eventBus.notificationsCount = unreadCount;\n        localStorage.setItem(\"unread_notifications\", unreadCount);\n        console.log(\"Badge refreshed with count:\", unreadCount);\n      });\n    },\n\n    // Approve order adjustment\n    approveAdjustment(notification, index) {\n      if (!notification.orderId) return;\n      \n      // Mark notification as read and show immediate UI feedback\n      notification.read = true;\n      notification.requiresApproval = false;\n      notification.message = notification.message + \" [Approved]\";\n      \n      // Show pending indicator\n      this.showLoadingMessage = true;\n      this.loadingMessage = 'Sending approval...';\n      \n      // Update the order in the database to remove the pending approval flag\n      fetch(`http://127.0.0.1:8000/orders/${notification.orderId}/update-items`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          items: notification.items, // Keep the adjusted items\n          status: \"pending\", // Keep as pending\n          isPendingApproval: false // Remove the pending approval flag\n        })\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(() => {\n        console.log(\"Order approved successfully in database\");\n        \n        // Send approval response notification back to admin\n        this.sendAdminNotification(\n          notification.orderId,\n          `The customer has APPROVED the order adjustments. Order ID: ${notification.orderId}`,\n          notification.items\n        );\n        \n        // Send an additional direct notification with customer_approval type for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'customer_approval',\n            orderId: notification.orderId,\n            items: notification.items,\n            approved: true,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        // Update the user notifications in localStorage\n        const userName = localStorage.getItem(\"userName\");\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Update the notification to show it's been approved\n        notifications[index] = {\n          ...notification,\n          requiresApproval: false,\n          message: notification.message\n        };\n        \n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        this.notifications = notifications;\n        \n        // Update the unread count\n        this.updateUnreadCount();\n        \n        // Remove loading message\n        this.showLoadingMessage = false;\n        \n        // Show success feedback\n        this.showSuccessMessage = true;\n        this.successMessage = 'Order adjustments approved!';\n        \n        // Auto-remove the success message after 3 seconds\n        setTimeout(() => {\n          this.showSuccessMessage = false;\n        }, 3000);\n      })\n      .catch(error => {\n        console.error(\"Error approving order adjustment:\", error);\n        \n        // Remove loading message\n        this.showLoadingMessage = false;\n        \n        // Show error message\n        alert(\"Error approving order adjustment. Please try again.\");\n        \n        // Revert UI changes on error\n        notification.requiresApproval = true;\n        notification.message = notification.message.replace(\" [Approved]\", \"\");\n        this.$forceUpdate(); // Force UI update\n      });\n    },\n    \n    // Decline order adjustment\n    declineAdjustment(notification, index) {\n      if (!notification.orderId) return;\n      \n      // Mark notification as being processed\n      notification.isProcessing = true;\n      this.$forceUpdate(); // Force UI update\n      \n      // Show pending indicator\n      this.showLoadingMessage = true;\n      this.loadingMessage = 'Declining order...';\n      \n      // Option 1: Decline the entire order\n      fetch(`http://127.0.0.1:8000/orders/${notification.orderId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          status: \"declined\",\n          items: notification.originalItems || notification.items\n        })\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(() => {\n        console.log(\"Order declined successfully in database\");\n        \n        // Send decline response notification back to admin\n        this.sendAdminNotification(\n          notification.orderId,\n          `The customer has DECLINED the order adjustments. Order ID: ${notification.orderId}`,\n          notification.originalItems || notification.items\n        );\n        \n        // Send an additional direct notification with customer_approval type for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'customer_approval',\n            orderId: notification.orderId,\n            approved: false,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        // Remove the notification from the user's list\n        const userName = localStorage.getItem(\"userName\");\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Remove this notification\n        notifications.splice(index, 1);\n        \n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        this.notifications = notifications;\n        \n        // Update the unread count\n        this.updateUnreadCount();\n        \n        // Hide loading message\n        this.showLoadingMessage = false;\n        \n        // Show success feedback\n        this.showSuccessMessage = true;\n        this.successMessage = 'Order adjustments declined successfully';\n        \n        // Auto-remove the success message after 3 seconds\n        setTimeout(() => {\n          this.showSuccessMessage = false;\n        }, 3000);\n      })\n      .catch(error => {\n        console.error(\"Error declining order adjustment:\", error);\n        \n        // Hide loading message\n        this.showLoadingMessage = false;\n        \n        // Clear processing state\n        notification.isProcessing = false;\n        this.$forceUpdate();\n        \n        // Show error message\n        alert(\"Error declining order adjustment. Please try again.\");\n      });\n    },\n    \n    // Helper to send notifications to admin\n    sendAdminNotification(orderId, message, items) {\n      // Create a notification for admin\n      const adminNotification = {\n        orderId,\n        customerName: \"Admin\", // Direct to admin\n        message,\n        timestamp: new Date().toISOString(),\n        items,\n        isAdminNotification: true\n      };\n      \n      // Save to admin notifications\n      const adminNotificationsKey = \"user_notifications_Admin\";\n      let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n      adminNotifications.push(adminNotification);\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n      \n      // Send WebSocket notification if connected\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'admin_notification',\n          action: 'adjustment_response',\n          notification: adminNotification\n        }));\n      }\n    },\n    \n    // Helper to update unread count\n    updateUnreadCount() {\n      const unreadCount = this.notifications.filter(n => !n.read).length;\n      this.unreadCount = unreadCount;\n      eventBus.notificationsCount = unreadCount;\n      localStorage.setItem(\"unread_notifications\", unreadCount);\n    },\n  },\n  created() {\n    // Initialize notifications and badge\n    this.fetchAndRefreshBadge();\n    \n    // Initialize WebSocket connection\n    this.initWebSocket();\n    \n    // Set up event listeners\n    window.addEventListener(\"notificationUpdated\", this.fetchAndRefreshBadge);\n  },\n  mounted() {\n    // Force badge refresh after component is mounted\n    this.$nextTick(() => {\n      this.fetchAndRefreshBadge();\n    });\n    \n    // Check WebSocket connection periodically and reconnect if needed\n    this.wsCheckInterval = setInterval(() => {\n      if (!this.wsConnected || !this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        console.log('WebSocket not connected in UserNotifications. Attempting to reconnect...');\n        this.initWebSocket();\n      } else {\n        // Periodically refresh badge\n        this.fetchAndRefreshBadge();\n      }\n    }, 30000); // Check every 30 seconds\n  },\n  beforeUnmount() {\n    // Clean up event listeners and intervals\n    window.removeEventListener(\"notificationUpdated\", this.fetchAndRefreshBadge);\n    clearInterval(this.wsCheckInterval);\n    \n    // Close WebSocket connection\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Global Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n/* Notification Badge Animation */\n@keyframes notification-pulse {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0.7);\n  }\n  \n  70% {\n    transform: scale(1.2);\n    box-shadow: 0 0 0 10px rgba(229, 79, 112, 0);\n  }\n  \n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0);\n  }\n}\n\n/* Notification Button Highlight Animation */\n@keyframes notification-button-highlight {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0.7);\n    background-color: #E54F70;\n  }\n  \n  50% {\n    transform: scale(1.15);\n    box-shadow: 0 0 20px 5px rgba(229, 79, 112, 0.7);\n    background-color: #ff7b96;\n  }\n  \n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0.7);\n    background-color: #E54F70;\n  }\n}\n\n.notification-pulse {\n  animation: notification-pulse 0.8s cubic-bezier(0.66, 0, 0, 1) 2;\n}\n\n.notification-button-highlight {\n  animation: notification-button-highlight 0.8s cubic-bezier(0.66, 0, 0, 1) 2;\n}\n\n.notifications-container {\n  /* Empty container for the floating button */\n}\n\n/* Floating Notification Button */\n.floating-notification {\n  position: relative; /* Changed from fixed to relative for header positioning */\n  top: auto;\n  right: auto;\n  width: 40px;\n  height: 40px;\n  background-color: #E54F70;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  z-index: 500;\n  transition: all 0.3s ease;\n}\n\n.floating-notification:hover {\n  transform: scale(1.1);\n  background-color: #d33d5e;\n}\n\n.floating-notification-badge {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  font-size: 14px;\n  min-width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n/* Notification Panel Overlay */\n.notification-panel-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2000;\n}\n\n.notifications-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 450px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  max-height: 85vh;\n  animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(50px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.close-panel {\n  background: none;\n  border: none;\n  color: #666;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0;\n  margin-left: 10px;\n}\n\n.close-panel:hover {\n  color: #333;\n}\n\n.notifications-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #eee;\n}\n\n.notifications-header h2 {\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n}\n\n.notification-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.toggle-button {\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n.notifications-list {\n  overflow-y: auto;\n  flex-grow: 1;\n  padding: 10px 0;\n  max-height: 60vh;\n}\n\n.notification-item {\n  display: flex;\n  padding: 15px 20px;\n  border-bottom: 1px solid #f1f1f1;\n}\n\n.notification-item:hover {\n  background-color: #f9f9f9;\n}\n\n.notification-avatar {\n  margin-right: 15px;\n}\n\n.notification-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.notification-content {\n  flex: 1;\n}\n\n.notification-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n}\n\n.notification-name {\n  font-weight: 600;\n  color: #333;\n}\n\n.notification-time {\n  color: #888;\n  font-size: 12px;\n}\n\n.notification-message {\n  color: #555;\n  font-size: 14px;\n  line-height: 1.4;\n}\n\n.order-details {\n  display: block;\n  background-color: rgba(229, 79, 112, 0.05);\n  padding: 10px;\n  border-radius: 6px;\n  margin-top: 10px;\n  border-left: 3px solid #E54F70;\n  color: #555;\n  font-size: 13px;\n}\n\n.notifications-footer {\n  border-top: 1px solid #eee;\n  padding: 15px 20px;\n}\n\n.view-all-button {\n  width: 100%;\n  padding: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 6px;\n  color: #E54F70;\n  cursor: pointer;\n  font-size: 14px;\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.view-all-button:hover {\n  background-color: rgba(229, 79, 112, 0.05);\n}\n\n.action-buttons {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n.mark-read-btn, .clear-btn {\n  flex: 1;\n  padding: 8px 0;\n  border-radius: 6px;\n  font-size: 14px;\n  cursor: pointer;\n  border: none;\n  transition: background-color 0.2s;\n}\n\n.mark-read-btn {\n  background-color: #E54F70;\n  color: white;\n}\n\n.mark-read-btn:hover {\n  background-color: #d33d5e;\n}\n\n.clear-btn {\n  background-color: #f1f1f1;\n  color: #333;\n}\n\n.clear-btn:hover {\n  background-color: #e1e1e1;\n}\n\n.no-notifications {\n  text-align: center;\n  padding: 30px 20px;\n  color: #888;\n  font-size: 15px;\n}\n\n.confirmation-popup {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2100;\n}\n\n.confirmation-content {\n  background-color: white;\n  padding: 25px;\n  border-radius: 12px;\n  width: 300px;\n  text-align: center;\n}\n\n.confirmation-content h3 {\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.confirmation-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.confirm-yes-btn, .confirm-no-btn {\n  padding: 8px 20px;\n  border-radius: 6px;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.confirm-yes-btn {\n  background-color: #E54F70;\n  color: white;\n}\n\n.confirm-yes-btn:hover {\n  background-color: #d33d5e;\n}\n\n.confirm-no-btn {\n  background-color: #f1f1f1;\n  color: #333;\n}\n\n.confirm-no-btn:hover {\n  background-color: #e1e1e1;\n}\n\n/* Dark Mode Styles */\n.dark-mode .floating-notification {\n  background-color: #444;\n}\n\n.dark-mode .floating-notification:hover {\n  background-color: #333;\n}\n\n.dark-mode .notifications-card {\n  background-color: #333;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .notifications-header {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .notifications-header h2 {\n  color: #fff;\n}\n\n.dark-mode .close-panel {\n  color: #aaa;\n}\n\n.dark-mode .close-panel:hover {\n  color: #fff;\n}\n\n.dark-mode .notification-item {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .notification-item:hover {\n  background-color: #3a3a3a;\n}\n\n.dark-mode .notification-name {\n  color: #fff;\n}\n\n.dark-mode .notification-message {\n  color: #ddd;\n}\n\n.dark-mode .order-details {\n  background-color: rgba(229, 79, 112, 0.1);\n  color: #ddd;\n}\n\n.dark-mode .notifications-footer {\n  border-top: 1px solid #444;\n}\n\n.dark-mode .view-all-button {\n  color: #E54F70;\n}\n\n.dark-mode .view-all-button:hover {\n  background-color: rgba(229, 79, 112, 0.1);\n}\n\n.dark-mode .clear-btn {\n  background-color: #444;\n  color: #ddd;\n}\n\n.dark-mode .clear-btn:hover {\n  background-color: #555;\n}\n\n.dark-mode .confirmation-content {\n  background-color: #333;\n}\n\n.dark-mode .confirmation-content h3,\n.dark-mode .confirmation-content p {\n  color: #fff;\n}\n\n.dark-mode .confirm-no-btn {\n  background-color: #444;\n  color: #ddd;\n}\n\n.dark-mode .confirm-no-btn:hover {\n  background-color: #555;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .floating-notification {\n    width: 35px;\n    height: 35px;\n    font-size: 16px;\n  }\n  \n  .floating-notification-badge {\n    min-width: 18px;\n    height: 18px;\n    font-size: 10px;\n  }\n  \n  .notifications-card {\n    max-width: 90%;\n  }\n}\n\n@media (max-width: 480px) {\n  .floating-notification {\n    width: 30px;\n    height: 30px;\n    font-size: 14px;\n  }\n  \n  .floating-notification-badge {\n    min-width: 16px;\n    height: 16px;\n    font-size: 9px;\n    top: -5px;\n    right: -5px;\n  }\n  \n  .notifications-card {\n    max-width: 95%;\n    height: 80vh;\n  }\n  \n  .notification-item {\n    padding: 12px 15px;\n  }\n  \n  .notification-avatar img {\n    width: 35px;\n    height: 35px;\n  }\n}\n\n/* New styles for adjustment details */\n.adjustment-details {\n  background-color: #fff3f3;\n  border-left: 3px solid #ff6b6b;\n  padding: 8px 12px;\n  margin: 8px 0;\n  font-size: 13px;\n  border-radius: 4px;\n  color: #545454;\n  line-height: 1.4;\n}\n\n.dark-mode .adjustment-details {\n  background-color: #3d2828;\n  border-left: 3px solid #ff6b6b;\n  color: #e0e0e0;\n}\n\n/* Approval buttons styling */\n.approval-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 12px;\n}\n\n.approve-btn, .decline-btn {\n  padding: 8px 16px;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 14px;\n  transition: background-color 0.2s;\n}\n\n.approve-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.approve-btn:hover {\n  background-color: #3e8e41;\n}\n\n.decline-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.decline-btn:hover {\n  background-color: #d32f2f;\n}\n\n/* New styles for loading and success messages */\n.loading-message {\n  position: fixed;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #4a4a4a;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  z-index: 3000;\n  animation: fadeIn 0.3s ease;\n}\n\n.success-message-floating {\n  position: fixed;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  z-index: 3000;\n  animation: fadeInOut 3s ease;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translate(-50%, -20px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50%, 0);\n  }\n}\n\n@keyframes fadeInOut {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, -20px);\n  }\n  10% {\n    opacity: 1;\n    transform: translate(-50%, 0);\n  }\n  80% {\n    opacity: 1;\n    transform: translate(-50%, 0);\n  }\n  100% {\n    opacity: 0;\n    transform: translate(-50%, -20px);\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}