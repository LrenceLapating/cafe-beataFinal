{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, withModifiers as _withModifiers, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"floating-notification-badge\"\n};\nconst _hoisted_2 = {\n  class: \"notifications-header\"\n};\nconst _hoisted_3 = {\n  class: \"notification-controls\"\n};\nconst _hoisted_4 = {\n  class: \"notifications-list\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"no-notifications\"\n};\nconst _hoisted_6 = {\n  class: \"notification-avatar\"\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = {\n  class: \"notification-content\"\n};\nconst _hoisted_9 = {\n  class: \"notification-header\"\n};\nconst _hoisted_10 = {\n  class: \"notification-time\"\n};\nconst _hoisted_11 = [\"innerHTML\"];\nconst _hoisted_12 = {\n  key: 0,\n  class: \"order-details\"\n};\nconst _hoisted_13 = {\n  key: 1,\n  class: \"approval-actions\"\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = [\"onClick\"];\nconst _hoisted_16 = {\n  class: \"notifications-footer\"\n};\nconst _hoisted_17 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_18 = {\n  key: 1,\n  class: \"confirmation-popup\"\n};\nconst _hoisted_19 = {\n  class: \"confirmation-content\"\n};\nconst _hoisted_20 = {\n  class: \"confirmation-buttons\"\n};\nconst _hoisted_21 = {\n  key: 2,\n  class: \"loading-message\"\n};\nconst _hoisted_22 = {\n  key: 3,\n  class: \"success-message-floating\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['notifications-container', {\n      'dark-mode': $data.isDarkMode\n    }])\n  }, [_createCommentVNode(\" Floating Notification Button \"), _createElementVNode(\"div\", {\n    class: \"floating-notification\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleNotificationPanel && $options.toggleNotificationPanel(...args))\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"i\", {\n    class: \"fas fa-bell\"\n  }, null, -1 /* HOISTED */)), $data.unreadCount > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString($data.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Notification Panel (Modal) \"), $data.isPanelOpen ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"notification-panel-overlay\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.closePanel && $options.closePanel(...args))\n  }, [_createElementVNode(\"div\", {\n    class: \"notifications-card\",\n    onClick: _cache[4] || (_cache[4] = _withModifiers(() => {}, [\"stop\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"Notifications\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    class: \"close-panel\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.closePanel && $options.closePanel(...args))\n  }, \"✕\")])]), _createCommentVNode(\" Notifications List \"), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" Check if there are no notifications \"), $options.filteredNotifications.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \" No notifications at the moment. \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Render notifications if there are any \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredNotifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"notification-item\"\n    }, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n      src: $options.getAvatarImage(),\n      alt: \"Café Beata avatar\"\n    }, null, 8 /* PROPS */, _hoisted_7)]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_cache[10] || (_cache[10] = _createElementVNode(\"span\", {\n      class: \"notification-name\"\n    }, \"Café Beata\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_10, _toDisplayString($options.formatTimeAgo(notification.timestamp)), 1 /* TEXT */)]), _createElementVNode(\"p\", {\n      class: \"notification-message\",\n      innerHTML: $options.formatNotificationMessage(notification.message)\n    }, null, 8 /* PROPS */, _hoisted_11), $options.extractOrderDetails(notification.message) ? (_openBlock(), _createElementBlock(\"p\", _hoisted_12, _toDisplayString($options.extractOrderDetails(notification.message)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Approval Buttons for notifications that require approval \"), notification.requiresApproval ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n      onClick: $event => $options.approveAdjustment(notification, index),\n      class: \"approve-btn\"\n    }, \" Approve \", 8 /* PROPS */, _hoisted_14), _createElementVNode(\"button\", {\n      onClick: $event => $options.declineAdjustment(notification, index),\n      class: \"decline-btn\"\n    }, \" Decline \", 8 /* PROPS */, _hoisted_15)])) : _createCommentVNode(\"v-if\", true)])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"button\", {\n    class: \"mark-read-btn\",\n    onClick: _cache[2] || (_cache[2] = $event => $data.showMarkReadConfirmation = true)\n  }, \"Mark All as Read\"), _createElementVNode(\"button\", {\n    class: \"clear-btn\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.clearNotifications && $options.clearNotifications(...args))\n  }, \"Clear Notifications\")])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Mark As Read Confirmation Popup \"), $data.showMarkReadConfirmation ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[11] || (_cache[11] = _createElementVNode(\"h3\", null, \"Confirm Action\", -1 /* HOISTED */)), _cache[12] || (_cache[12] = _createElementVNode(\"p\", null, \"Are you sure you want to mark all notifications as read?\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.markAllAsRead && $options.markAllAsRead(...args)),\n    class: \"confirm-yes-btn\"\n  }, \"Yes\"), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $data.showMarkReadConfirmation = false),\n    class: \"confirm-no-btn\"\n  }, \"No\")])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" New styles for loading and success messages \"), $data.showLoadingMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, _toDisplayString($data.loadingMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.showSuccessMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString($data.successMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_normalizeClass","$data","isDarkMode","_createCommentVNode","_createElementVNode","onClick","_cache","args","$options","toggleNotificationPanel","unreadCount","_hoisted_1","_toDisplayString","isPanelOpen","closePanel","_withModifiers","_hoisted_2","_hoisted_3","_hoisted_4","filteredNotifications","length","_hoisted_5","_Fragment","_renderList","notification","index","_hoisted_6","src","getAvatarImage","alt","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","formatTimeAgo","timestamp","innerHTML","formatNotificationMessage","message","_hoisted_11","extractOrderDetails","_hoisted_12","requiresApproval","_hoisted_13","$event","approveAdjustment","_hoisted_14","declineAdjustment","_hoisted_15","_hoisted_16","_hoisted_17","showMarkReadConfirmation","clearNotifications","_hoisted_18","_hoisted_19","_hoisted_20","markAllAsRead","showLoadingMessage","_hoisted_21","loadingMessage","showSuccessMessage","_hoisted_22","successMessage"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\UserNotifications.vue"],"sourcesContent":["<template>\n  <div :class=\"['notifications-container', { 'dark-mode': isDarkMode }]\">\n    <!-- Floating Notification Button -->\n    <div class=\"floating-notification\" @click=\"toggleNotificationPanel\">\n      <i class=\"fas fa-bell\"></i>\n      <span v-if=\"unreadCount > 0\" class=\"floating-notification-badge\">{{ unreadCount }}</span>\n    </div>\n\n    <!-- Notification Panel (Modal) -->\n    <div v-if=\"isPanelOpen\" class=\"notification-panel-overlay\" @click=\"closePanel\">\n      <div class=\"notifications-card\" @click.stop>\n        <div class=\"notifications-header\">\n          <h2>Notifications</h2>\n          <div class=\"notification-controls\">\n            <button class=\"close-panel\" @click=\"closePanel\">✕</button>\n          </div>\n        </div>\n\n        <!-- Notifications List -->\n        <div class=\"notifications-list\">\n          <!-- Check if there are no notifications -->\n          <p v-if=\"filteredNotifications.length === 0\" class=\"no-notifications\">\n            No notifications at the moment.\n          </p>\n\n          <!-- Render notifications if there are any -->\n          <div v-for=\"(notification, index) in filteredNotifications\" :key=\"index\" class=\"notification-item\">\n            <div class=\"notification-avatar\">\n              <img :src=\"getAvatarImage()\" alt=\"Café Beata avatar\">\n            </div>\n            <div class=\"notification-content\">\n              <div class=\"notification-header\">\n                <span class=\"notification-name\">Café Beata</span>\n                <span class=\"notification-time\">{{ formatTimeAgo(notification.timestamp) }}</span>\n              </div>\n              <p class=\"notification-message\" v-html=\"formatNotificationMessage(notification.message)\"></p>\n              <p class=\"order-details\" v-if=\"extractOrderDetails(notification.message)\">\n                {{ extractOrderDetails(notification.message) }}\n              </p>\n              \n              <!-- Approval Buttons for notifications that require approval -->\n              <div v-if=\"notification.requiresApproval\" class=\"approval-actions\">\n                <button @click=\"approveAdjustment(notification, index)\" class=\"approve-btn\">\n                  Approve\n                </button>\n                <button @click=\"declineAdjustment(notification, index)\" class=\"decline-btn\">\n                  Decline\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"notifications-footer\">\n          <div class=\"action-buttons\">\n            <button class=\"mark-read-btn\" @click=\"showMarkReadConfirmation = true\">Mark All as Read</button>\n            <button class=\"clear-btn\" @click=\"clearNotifications\">Clear Notifications</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Mark As Read Confirmation Popup -->\n    <div v-if=\"showMarkReadConfirmation\" class=\"confirmation-popup\">\n      <div class=\"confirmation-content\">\n        <h3>Confirm Action</h3>\n        <p>Are you sure you want to mark all notifications as read?</p>\n        <div class=\"confirmation-buttons\">\n          <button @click=\"markAllAsRead\" class=\"confirm-yes-btn\">Yes</button>\n          <button @click=\"showMarkReadConfirmation = false\" class=\"confirm-no-btn\">No</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- New styles for loading and success messages -->\n    <div v-if=\"showLoadingMessage\" class=\"loading-message\">\n      {{ loadingMessage }}\n    </div>\n\n    <div v-if=\"showSuccessMessage\" class=\"success-message-floating\">\n      {{ successMessage }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { eventBus } from \"@/utils/eventBus\"; // Correct the path if needed\n\nexport default {\n  data() {\n    return {\n      notifications: [],\n      ws: null,\n      wsConnected: false,\n      wsReconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n      reconnectInterval: 3000,\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\",\n      showMarkReadConfirmation: false,\n      isPanelOpen: false,\n      unreadCount: 0,\n      showLoadingMessage: false,\n      loadingMessage: '',\n      showSuccessMessage: false,\n      successMessage: ''\n    };\n  },\n  computed: {\n    filteredNotifications() {\n      // Only show notifications from Café Beata, not from other sources like \"Lors\"\n      return this.notifications.map(notif => {\n        // Always set the customerName to Café Beata regardless of original source\n        return {\n          ...notif,\n          customerName: 'Café Beata'\n        };\n      });\n    }\n  },\n  methods: {\n    toggleNotificationPanel() {\n      this.isPanelOpen = !this.isPanelOpen;\n      if (this.isPanelOpen) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = '';\n      }\n    },\n    \n    closePanel() {\n      this.isPanelOpen = false;\n      document.body.style.overflow = '';\n    },\n    \n    getAvatarImage() {\n      // Always use Café Beata for the avatar\n      return `https://ui-avatars.com/api/?name=Café+Beata&background=E54F70&color=fff&size=40`;\n    },\n    \n    // Format notification message to be more user-friendly\n    formatNotificationMessage(message) {\n      // Check if this is an order adjustment message\n      if (message.includes(\"adjust your order\") || message.includes(\"review the adjusted order\")) {\n        // For adjustments, extract and format the specific adjustment reasons\n        if (message.includes(\"The following adjustments were made:\")) {\n          const beforeAdjustmentDetails = message.split(\"The following adjustments were made:\")[0].trim();\n          const adjustmentDetails = message.split(\"The following adjustments were made:\")[1].split(\"Please review\")[0].trim();\n          \n          // Return a nicely formatted message\n          return `\n            <strong>${beforeAdjustmentDetails}</strong>\n            <div class=\"adjustment-details\">\n              ${adjustmentDetails}\n            </div>\n          `;\n        } else {\n          // If no specific adjustments are listed, just show the main message\n          return message.split(\"Please review the adjusted order:\")[0].trim();\n        }\n      }\n      \n      // Normal message formatting\n      return message.replace(/(Order details:.*?Total: ₱\\d+(\\.\\d{2})?)/, '')\n                    .replace(/Your order/, 'Your order')\n                    .replace(/\\s{2,}/g, ' ') // Remove extra spaces\n                    .trim();\n    },\n    \n    // Extract just the order details to display in a separate element\n    extractOrderDetails(message) {\n      const orderDetailsMatch = message.match(/(Order details:(.*?)Total: ₱\\d+(\\.\\d{2})?)/);\n      return orderDetailsMatch ? orderDetailsMatch[0] : '';\n    },\n    \n    formatTimeAgo(timestamp) {\n      const now = new Date();\n      const diff = now - new Date(timestamp);\n      const minutes = Math.floor(diff / 1000 / 60);\n      const hours = Math.floor(diff / 1000 / 60 / 60);\n      const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n\n      if (days > 0) return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n      if (hours > 0) return `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`;\n      if (minutes > 0) return `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`;\n      return \"Just now\";\n    },\n\n    fetchNotifications() {\n      const userName = localStorage.getItem(\"userName\"); \n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let storedNotifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Remove duplicate notifications (same order ID and same message)\n        const uniqueNotifications = [];\n        const seen = new Set();\n        \n        storedNotifications.forEach(notification => {\n          // Create a unique key using orderId and message\n          const uniqueKey = `${notification.orderId}-${notification.message}`;\n          \n          if (!seen.has(uniqueKey)) {\n            seen.add(uniqueKey);\n            // Ensure read property is defined\n            if (notification.read === undefined) {\n              notification.read = false;\n            }\n            uniqueNotifications.push(notification);\n          }\n        });\n        \n        // Sort notifications by timestamp (newest first)\n        uniqueNotifications.sort((a, b) => {\n          const dateA = new Date(a.timestamp);\n          const dateB = new Date(b.timestamp);\n          return dateB - dateA;\n        });\n        \n        // Save the deduplicated notifications back to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(uniqueNotifications));\n        \n        // Update the notifications array with the deduplicated list\n        this.notifications = uniqueNotifications;\n        \n        // Force update the unread count and update DOM\n        const unreadCount = this.notifications.filter(notification => !notification.read).length;\n        this.unreadCount = unreadCount;\n        eventBus.notificationsCount = unreadCount;\n        localStorage.setItem(\"unread_notifications\", unreadCount);\n        \n        // Log for debugging\n        console.log(`Fetched ${this.notifications.length} notifications, ${unreadCount} unread`);\n        \n        // If there are unread notifications and we just connected, show alert\n        if (this.wsConnected && unreadCount > 0) {\n          console.log(`Found ${unreadCount} unread notifications on connection`);\n        }\n        \n        // Explicitly dispatch notification update event\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        return this.notifications;\n      } else {\n        this.notifications = [];\n        // Reset notification count\n        this.unreadCount = 0;\n        eventBus.notificationsCount = 0;\n        localStorage.setItem(\"unread_notifications\", 0);\n        return [];\n      }\n    },\n\n    addNewNotification(notification) {\n      const userName = localStorage.getItem(\"userName\");\n      if (!userName) return false;\n      \n      const userNotificationsKey = `user_notifications_${userName}`;\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n      \n      // Always ensure the notification has the current timestamp if not provided\n      if (!notification.timestamp) {\n        notification.timestamp = new Date().toISOString();\n      }\n      \n      // Check if a notification with the same order ID and message already exists\n      const existingIndex = notifications.findIndex(n => \n        n.orderId === notification.orderId && n.message === notification.message\n      );\n      \n      // Only add the notification if it doesn't already exist\n      if (existingIndex === -1) {\n        // Make sure read status is explicitly set to false for new notifications\n        notification.read = false;\n        \n        // Add notification at the beginning of the array (newest first)\n        notifications.unshift(notification);\n        \n        // Sort notifications by timestamp (newest first)\n        notifications.sort((a, b) => {\n          const dateA = new Date(a.timestamp);\n          const dateB = new Date(b.timestamp);\n          return dateB - dateA;\n        });\n        \n        // Save the updated notifications to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Update the notifications in the component\n        this.notifications = notifications;\n        \n        // Directly update the component state for immediate UI update\n        this.unreadCount = this.notifications.filter(n => !n.read).length;\n        \n        // Update eventBus for other components\n        eventBus.notificationsCount = this.unreadCount;\n        \n        // Update localStorage for persistence\n        localStorage.setItem(\"unread_notifications\", this.unreadCount);\n        \n        // Show notification alert\n        this.showNewNotificationAlert();\n        \n        // Log for debugging\n        console.log(`New notification added for ${userName}, badge count: ${this.unreadCount}`);\n        \n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        return true; // Notification was added\n      }\n      \n      return false; // Notification already exists\n    },\n\n    // Calculate estimated preparation time based on order items\n    calculateEstimatedTime(items) {\n      // Check if the order contains only drinks, only food, or both\n      const hasDrinks = items.some(item => \n        item.category && \n        (item.category.toLowerCase().includes('drink') || \n         item.category === 'Juice Drinks' || \n         item.category === 'Chocolate Drinks' ||\n         item.category === 'Coffee')\n      );\n      \n      const hasFood = items.some(item => \n        item.category && \n        !item.category.toLowerCase().includes('drink') && \n        item.category !== 'Juice Drinks' && \n        item.category !== 'Chocolate Drinks' &&\n        item.category !== 'Coffee'\n      );\n      \n      // Return the appropriate estimated time\n      if (hasDrinks && !hasFood) {\n        return \"10-12 minutes\";\n      } else if (hasFood || (hasDrinks && hasFood)) {\n        return \"12-15 minutes\";\n      } else {\n        // Default case if categories cannot be determined\n        return \"10-15 minutes\";\n      }\n    },\n\n    clearNotifications() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        localStorage.removeItem(userNotificationsKey);\n        this.notifications = [];\n        \n        // Reset unread count\n        this.unreadCount = 0;\n        eventBus.notificationsCount = 0;\n        localStorage.setItem(\"unread_notifications\", 0);\n        \n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        console.log(\"All notifications cleared\");\n      }\n    },\n\n    initWebSocket() {\n      // Use the same host as the API\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n      \n      // Only create a new connection if we don't have one already or if it's closed\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        console.log('Initializing WebSocket connection in UserNotifications...');\n        this.ws = new WebSocket(wsUrl);\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket connected in UserNotifications');\n          this.wsConnected = true;\n          this.wsReconnectAttempts = 0; // Reset reconnect attempts on successful connection\n        };\n        \n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('WebSocket message received in UserNotifications:', data);\n            \n            const userName = localStorage.getItem(\"userName\");\n            let notificationAdded = false;\n            let isForCurrentUser = false;\n            \n            // Pre-update badge to ensure UI is responsive\n            if (data.target_user === userName) {\n              isForCurrentUser = true;\n              this.unreadCount += 1;\n              eventBus.notificationsCount = this.unreadCount;\n              localStorage.setItem(\"unread_notifications\", this.unreadCount);\n            }\n\n            // Process different message types\n            if (data.type === 'new_order') {\n              // Handle new order notification\n              if (data.order.customer_name === userName) {\n                console.log('Processing new order notification');\n                notificationAdded = this.addNewNotification({\n                  orderId: data.order.id,\n                  message: `Your order has been received! and is now being prepared. We will notify you as soon as it is ready for pickup. Estimated time 8-12 minutes.  Order details: ${this.formatItems(data.order.items)}. Total: ₱${this.calculateTotal(data.order.items)}`,\n                  timestamp: data.order.created_at,\n                  read: false\n                });\n                \n                // Show notification panel if it's not already open\n                if (!this.isPanelOpen && notificationAdded) {\n                  this.showNewNotificationAlert();\n                }\n              }\n            } else if (data.type === 'order_status_update') {\n              // Handle order status update notification\n              if (data.customer_name === userName) {\n                console.log('Processing order status update notification');\n                if (data.status === 'completed') {\n                  notificationAdded = this.addNewNotification({\n                    orderId: data.order_id,\n                    message: `Your order #${data.order_id} is now completed! Thank you for your order.`,\n                    timestamp: new Date().toISOString(),\n                    read: false\n                  });\n                  \n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                } else if (data.status === 'declined') {\n                  notificationAdded = this.addNewNotification({\n                    orderId: data.order_id,\n                    message: `Your order #${data.order_id} has been declined. ${data.message || 'We apologize for any inconvenience.'}`,\n                    timestamp: new Date().toISOString(),\n                    read: false\n                  });\n                  \n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'admin_notification') {\n              // Handle direct notifications from admin\n              const targetUser = data.target_user;\n              \n              // Only process the notification if it's for the current user\n              if (targetUser === userName) {\n                console.log('Processing user notification from admin');\n                \n                // Special handling for order adjustments (send for approval)\n                if (data.action === 'order_adjustment') {\n                  console.log('Processing order adjustment notification');\n                  \n                  // Make sure the adjustment notification has the requiresApproval flag\n                  const adjustmentNotification = {\n                    ...data.notification,\n                    requiresApproval: true,  // Explicitly set to true to show approve/decline buttons\n                    read: false\n                  };\n                  \n                  notificationAdded = this.addNewNotification(adjustmentNotification);\n                  \n                  // Open notification panel automatically to show the approval request\n                  if (notificationAdded) {\n                    this.showNewNotificationAlert();\n                    this.isPanelOpen = true;  // Auto-open the panel for important approvals\n                  }\n                } else {\n                  // Process regular notification\n                  const notification = {\n                    ...data.notification,\n                    read: false // Mark as unread by default\n                  };\n                  \n                  notificationAdded = this.addNewNotification(notification);\n                  \n                  // Show notification panel if it's not already open\n                  if (!this.isPanelOpen && notificationAdded) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'user_notification') {\n              // Handle direct notifications to the user\n              const targetUser = data.target_user;\n              \n              // Only process if it's for the current user\n              if (targetUser === userName) {\n                console.log('Processing user_notification:', data);\n                \n                // Handle different action types\n                if (data.action === 'order_declined') {\n                  console.log('Processing order_declined notification from user_notification type');\n                  \n                  // Extract notification data\n                  const declinedNotification = {\n                    ...data.notification,\n                    read: false\n                  };\n                  \n                  // Add the notification\n                  notificationAdded = this.addNewNotification(declinedNotification);\n                  \n                  // Show visual feedback and open panel\n                  if (notificationAdded) {\n                    this.showSuccessMessage = true;\n                    this.successMessage = `Order #${declinedNotification.orderId} was declined by the admin`;\n                    \n                    // Auto-remove the message after 3 seconds\n                    setTimeout(() => {\n                      this.showSuccessMessage = false;\n                    }, 3000);\n                    \n                    // Open notification panel automatically\n                    this.isPanelOpen = true;\n                    \n                    // Show notification alert\n                    this.showNewNotificationAlert();\n                    \n                    // Force refresh the notifications to ensure UI is updated\n                    this.fetchNotifications();\n                    \n                    // Force update UI\n                    this.$forceUpdate();\n                  }\n                } else if (data.action === 'order_adjustment') {\n                  // Already handled above, but kept for completeness\n                  console.log('Processing order_adjustment from user_notification type');\n                  \n                  const adjustmentNotification = {\n                    ...data.notification,\n                    requiresApproval: true,\n                    read: false\n                  };\n                  \n                  notificationAdded = this.addNewNotification(adjustmentNotification);\n                  \n                  if (notificationAdded) {\n                    this.showNewNotificationAlert();\n                    this.isPanelOpen = true;\n                  }\n                } else {\n                  // Handle other types of user notifications\n                  const notification = {\n                    ...data.notification,\n                    read: false\n                  };\n                  \n                  notificationAdded = this.addNewNotification(notification);\n                  \n                  if (notificationAdded && !this.isPanelOpen) {\n                    this.showNewNotificationAlert();\n                  }\n                }\n              }\n            } else if (data.type === 'order_declined') {\n              // Special handling for direct declined orders in real-time\n              if (data.customer_name === userName) {\n                console.log('Processing order declined notification in real-time:', data);\n                \n                // Create a clear notification for the user\n                const declinedNotification = {\n                  orderId: data.order_id,\n                  message: `Your order #${data.order_id} has been declined by the admin. ${data.reason || 'We apologize for any inconvenience.'}`,\n                  timestamp: new Date().toISOString(),\n                  read: false\n                };\n                \n                // Force add this notification\n                notificationAdded = this.addNewNotification(declinedNotification);\n                console.log('Decline notification added:', notificationAdded);\n                \n                // Show visual feedback\n                this.showSuccessMessage = true;\n                this.successMessage = `Order #${data.order_id} was declined by the admin`;\n                \n                // Auto-remove the message after 3 seconds\n                setTimeout(() => {\n                  this.showSuccessMessage = false;\n                }, 3000);\n                \n                // Open the notification panel automatically\n                this.isPanelOpen = true;\n                \n                // Show notification alert with sound\n                this.showNewNotificationAlert();\n                \n                // Force refresh the notifications from localStorage to ensure they appear\n                this.fetchNotifications();\n                \n                // Force update the UI\n                this.$forceUpdate();\n              }\n            }\n            \n            // If we pre-updated the badge but didn't actually add a notification,\n            // rollback the count\n            if (isForCurrentUser && !notificationAdded) {\n              console.log('Notification not added, rolling back badge count');\n              this.fetchAndRefreshBadge();\n            }\n          } catch (error) {\n            console.error('Error processing WebSocket message in UserNotifications:', error);\n          }\n        };\n        \n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected in UserNotifications');\n          this.wsConnected = false;\n          \n          // Implement fixed reconnection attempt with a 5 second delay\n          // This matches the approach in NotificationsPage.vue\n          setTimeout(() => {\n            if (!this.wsConnected) {\n              console.log('Attempting to reconnect WebSocket in UserNotifications...');\n              this.initWebSocket();\n            }\n          }, 5000);\n        };\n        \n        this.ws.onerror = (error) => {\n          console.error('WebSocket error in UserNotifications:', error);\n          this.wsConnected = false;\n          \n          // Try to reconnect after error with the same approach as NotificationsPage\n          setTimeout(() => {\n            if (!this.wsConnected) {\n              console.log('Attempting to reconnect WebSocket after error in UserNotifications...');\n              this.initWebSocket();\n            }\n          }, 5000);\n        };\n      }\n    },\n\n    formatItems(items) {\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\n    },\n\n    calculateTotal(items) {\n      return items.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);\n    },\n\n    markAllAsRead() {\n      const userName = localStorage.getItem(\"userName\");\n      if (userName) {\n        const userNotificationsKey = `user_notifications_${userName}`;\n        \n        // Get existing notifications\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Mark all notifications as read\n        notifications = notifications.map(notification => ({\n          ...notification,\n          read: true\n        }));\n        \n        // Save back to localStorage\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        \n        // Update the notifications in the component\n        this.notifications = notifications;\n        \n        // Immediately reset unread count to 0\n        this.unreadCount = 0;\n        \n        // Update eventBus to notify other components\n        eventBus.notificationsCount = 0;\n        \n        // Update localStorage for persistence\n        localStorage.setItem(\"unread_notifications\", 0);\n        \n        // Close the confirmation popup\n        this.showMarkReadConfirmation = false;\n        \n        // Force UI to update\n        this.$forceUpdate();\n        \n        // Dispatch event to notify other components\n        window.dispatchEvent(new CustomEvent(\"notificationUpdated\"));\n        \n        console.log('All notifications marked as read');\n      }\n    },\n\n    // Add new method to show notification alert\n    showNewNotificationAlert() {\n      // Play notification sound immediately\n      try {\n        const audio = new Audio('/notification-sound.mp3');\n        audio.play().catch(e => console.log('Error playing notification sound:', e));\n      } catch(e) {\n        console.log('Error playing notification sound:', e);\n      }\n      \n      // Immediately apply animations\n      this.$nextTick(() => {\n        // Add animation class to notification badge\n        const badge = document.querySelector('.floating-notification-badge');\n        if (badge) {\n          // Remove existing animation if present\n          badge.classList.remove('notification-pulse');\n          \n          // Force reflow to restart animation\n          void badge.offsetWidth;\n          \n          // Add animation class\n          badge.classList.add('notification-pulse');\n          \n          // Remove animation class after it completes\n          setTimeout(() => {\n            badge.classList.remove('notification-pulse');\n          }, 2000);\n        }\n        \n        // Flash the notification button to make it more noticeable\n        const notificationButton = document.querySelector('.floating-notification');\n        if (notificationButton) {\n          notificationButton.classList.add('notification-button-highlight');\n          setTimeout(() => {\n            notificationButton.classList.remove('notification-button-highlight');\n          }, 2000);\n        }\n        \n        console.log('Notification alert displayed immediately');\n      });\n    },\n\n    // New method to force refresh the badge when needed\n    fetchAndRefreshBadge() {\n      this.fetchNotifications();\n      \n      // Force DOM update of badge after fetching notifications\n      this.$nextTick(() => {\n        const unreadCount = this.notifications.filter(notification => !notification.read).length;\n        this.unreadCount = unreadCount;\n        eventBus.notificationsCount = unreadCount;\n        localStorage.setItem(\"unread_notifications\", unreadCount);\n        console.log(\"Badge refreshed with count:\", unreadCount);\n      });\n    },\n\n    // Approve order adjustment\n    approveAdjustment(notification, index) {\n      if (!notification.orderId) return;\n      \n      // Mark notification as read and show immediate UI feedback\n      notification.read = true;\n      notification.requiresApproval = false;\n      notification.message = notification.message + \" [Approved]\";\n      \n      // Show pending indicator\n      this.showLoadingMessage = true;\n      this.loadingMessage = 'Sending approval...';\n      \n      // Update the order in the database to remove the pending approval flag\n      fetch(`http://127.0.0.1:8000/orders/${notification.orderId}/update-items`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          items: notification.items, // Keep the adjusted items\n          status: \"pending\", // Keep as pending\n          isPendingApproval: false // Remove the pending approval flag\n        })\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(() => {\n        console.log(\"Order approved successfully in database\");\n        \n        // Send approval response notification back to admin\n        this.sendAdminNotification(\n          notification.orderId,\n          `The customer has APPROVED the order adjustments. Order ID: ${notification.orderId}`,\n          notification.items\n        );\n        \n        // Send an additional direct notification with customer_approval type for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'customer_approval',\n            orderId: notification.orderId,\n            items: notification.items,\n            approved: true,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        // Update the user notifications in localStorage\n        const userName = localStorage.getItem(\"userName\");\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Update the notification to show it's been approved\n        notifications[index] = {\n          ...notification,\n          requiresApproval: false,\n          message: notification.message\n        };\n        \n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        this.notifications = notifications;\n        \n        // Update the unread count\n        this.updateUnreadCount();\n        \n        // Remove loading message\n        this.showLoadingMessage = false;\n        \n        // Show success feedback\n        this.showSuccessMessage = true;\n        this.successMessage = 'Order adjustments approved!';\n        \n        // Auto-remove the success message after 3 seconds\n        setTimeout(() => {\n          this.showSuccessMessage = false;\n        }, 3000);\n      })\n      .catch(error => {\n        console.error(\"Error approving order adjustment:\", error);\n        \n        // Remove loading message\n        this.showLoadingMessage = false;\n        \n        // Show error message\n        alert(\"Error approving order adjustment. Please try again.\");\n        \n        // Revert UI changes on error\n        notification.requiresApproval = true;\n        notification.message = notification.message.replace(\" [Approved]\", \"\");\n        this.$forceUpdate(); // Force UI update\n      });\n    },\n    \n    // Decline order adjustment\n    declineAdjustment(notification, index) {\n      if (!notification.orderId) return;\n      \n      // Mark notification as being processed\n      notification.isProcessing = true;\n      this.$forceUpdate(); // Force UI update\n      \n      // Show pending indicator\n      this.showLoadingMessage = true;\n      this.loadingMessage = 'Declining order...';\n      \n      // Option 1: Decline the entire order\n      fetch(`http://127.0.0.1:8000/orders/${notification.orderId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          status: \"declined\",\n          items: notification.originalItems || notification.items\n        })\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(() => {\n        console.log(\"Order declined successfully in database\");\n        \n        // Send decline response notification back to admin\n        this.sendAdminNotification(\n          notification.orderId,\n          `The customer has DECLINED the order adjustments. Order ID: ${notification.orderId}`,\n          notification.originalItems || notification.items\n        );\n        \n        // Send an additional direct notification with customer_approval type for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'customer_approval',\n            orderId: notification.orderId,\n            approved: false,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        // Remove the notification from the user's list\n        const userName = localStorage.getItem(\"userName\");\n        const userNotificationsKey = `user_notifications_${userName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        \n        // Remove this notification\n        notifications.splice(index, 1);\n        \n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        this.notifications = notifications;\n        \n        // Update the unread count\n        this.updateUnreadCount();\n        \n        // Hide loading message\n        this.showLoadingMessage = false;\n        \n        // Show success feedback\n        this.showSuccessMessage = true;\n        this.successMessage = 'Order adjustments declined successfully';\n        \n        // Auto-remove the success message after 3 seconds\n        setTimeout(() => {\n          this.showSuccessMessage = false;\n        }, 3000);\n      })\n      .catch(error => {\n        console.error(\"Error declining order adjustment:\", error);\n        \n        // Hide loading message\n        this.showLoadingMessage = false;\n        \n        // Clear processing state\n        notification.isProcessing = false;\n        this.$forceUpdate();\n        \n        // Show error message\n        alert(\"Error declining order adjustment. Please try again.\");\n      });\n    },\n    \n    // Helper to send notifications to admin\n    sendAdminNotification(orderId, message, items) {\n      // Create a notification for admin\n      const adminNotification = {\n        orderId,\n        customerName: \"Admin\", // Direct to admin\n        message,\n        timestamp: new Date().toISOString(),\n        items,\n        isAdminNotification: true\n      };\n      \n      // Save to admin notifications\n      const adminNotificationsKey = \"user_notifications_Admin\";\n      let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n      adminNotifications.push(adminNotification);\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n      \n      // Send WebSocket notification if connected\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'admin_notification',\n          action: 'adjustment_response',\n          notification: adminNotification\n        }));\n      }\n    },\n    \n    // Helper to update unread count\n    updateUnreadCount() {\n      const unreadCount = this.notifications.filter(n => !n.read).length;\n      this.unreadCount = unreadCount;\n      eventBus.notificationsCount = unreadCount;\n      localStorage.setItem(\"unread_notifications\", unreadCount);\n    },\n  },\n  created() {\n    // Initialize notifications and badge\n    this.fetchAndRefreshBadge();\n    \n    // Initialize WebSocket connection\n    this.initWebSocket();\n    \n    // Set up event listeners\n    window.addEventListener(\"notificationUpdated\", this.fetchAndRefreshBadge);\n  },\n  mounted() {\n    // Force badge refresh after component is mounted\n    this.$nextTick(() => {\n      this.fetchAndRefreshBadge();\n    });\n    \n    // Check WebSocket connection periodically and reconnect if needed\n    this.wsCheckInterval = setInterval(() => {\n      if (!this.wsConnected || !this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        console.log('WebSocket not connected in UserNotifications. Attempting to reconnect...');\n        this.initWebSocket();\n      } else {\n        // Periodically refresh badge\n        this.fetchAndRefreshBadge();\n      }\n    }, 30000); // Check every 30 seconds\n  },\n  beforeUnmount() {\n    // Clean up event listeners and intervals\n    window.removeEventListener(\"notificationUpdated\", this.fetchAndRefreshBadge);\n    clearInterval(this.wsCheckInterval);\n    \n    // Close WebSocket connection\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Global Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n/* Notification Badge Animation */\n@keyframes notification-pulse {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0.7);\n  }\n  \n  70% {\n    transform: scale(1.2);\n    box-shadow: 0 0 0 10px rgba(229, 79, 112, 0);\n  }\n  \n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0);\n  }\n}\n\n/* Notification Button Highlight Animation */\n@keyframes notification-button-highlight {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0.7);\n    background-color: #E54F70;\n  }\n  \n  50% {\n    transform: scale(1.15);\n    box-shadow: 0 0 20px 5px rgba(229, 79, 112, 0.7);\n    background-color: #ff7b96;\n  }\n  \n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(229, 79, 112, 0.7);\n    background-color: #E54F70;\n  }\n}\n\n.notification-pulse {\n  animation: notification-pulse 0.8s cubic-bezier(0.66, 0, 0, 1) 2;\n}\n\n.notification-button-highlight {\n  animation: notification-button-highlight 0.8s cubic-bezier(0.66, 0, 0, 1) 2;\n}\n\n.notifications-container {\n  /* Empty container for the floating button */\n}\n\n/* Floating Notification Button */\n.floating-notification {\n  position: relative; /* Changed from fixed to relative for header positioning */\n  top: auto;\n  right: auto;\n  width: 40px;\n  height: 40px;\n  background-color: #E54F70;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  z-index: 500;\n  transition: all 0.3s ease;\n}\n\n.floating-notification:hover {\n  transform: scale(1.1);\n  background-color: #d33d5e;\n}\n\n.floating-notification-badge {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  font-size: 14px;\n  min-width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n/* Notification Panel Overlay */\n.notification-panel-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2000;\n}\n\n.notifications-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 450px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  max-height: 85vh;\n  animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(50px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.close-panel {\n  background: none;\n  border: none;\n  color: #666;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0;\n  margin-left: 10px;\n}\n\n.close-panel:hover {\n  color: #333;\n}\n\n.notifications-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #eee;\n}\n\n.notifications-header h2 {\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n}\n\n.notification-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.toggle-button {\n  background: none;\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n.notifications-list {\n  overflow-y: auto;\n  flex-grow: 1;\n  padding: 10px 0;\n  max-height: 60vh;\n}\n\n.notification-item {\n  display: flex;\n  padding: 15px 20px;\n  border-bottom: 1px solid #f1f1f1;\n}\n\n.notification-item:hover {\n  background-color: #f9f9f9;\n}\n\n.notification-avatar {\n  margin-right: 15px;\n}\n\n.notification-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.notification-content {\n  flex: 1;\n}\n\n.notification-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n}\n\n.notification-name {\n  font-weight: 600;\n  color: #333;\n}\n\n.notification-time {\n  color: #888;\n  font-size: 12px;\n}\n\n.notification-message {\n  color: #555;\n  font-size: 14px;\n  line-height: 1.4;\n}\n\n.order-details {\n  display: block;\n  background-color: rgba(229, 79, 112, 0.05);\n  padding: 10px;\n  border-radius: 6px;\n  margin-top: 10px;\n  border-left: 3px solid #E54F70;\n  color: #555;\n  font-size: 13px;\n}\n\n.notifications-footer {\n  border-top: 1px solid #eee;\n  padding: 15px 20px;\n}\n\n.view-all-button {\n  width: 100%;\n  padding: 10px;\n  background-color: transparent;\n  border: none;\n  border-radius: 6px;\n  color: #E54F70;\n  cursor: pointer;\n  font-size: 14px;\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.view-all-button:hover {\n  background-color: rgba(229, 79, 112, 0.05);\n}\n\n.action-buttons {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n.mark-read-btn, .clear-btn {\n  flex: 1;\n  padding: 8px 0;\n  border-radius: 6px;\n  font-size: 14px;\n  cursor: pointer;\n  border: none;\n  transition: background-color 0.2s;\n}\n\n.mark-read-btn {\n  background-color: #E54F70;\n  color: white;\n}\n\n.mark-read-btn:hover {\n  background-color: #d33d5e;\n}\n\n.clear-btn {\n  background-color: #f1f1f1;\n  color: #333;\n}\n\n.clear-btn:hover {\n  background-color: #e1e1e1;\n}\n\n.no-notifications {\n  text-align: center;\n  padding: 30px 20px;\n  color: #888;\n  font-size: 15px;\n}\n\n.confirmation-popup {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2100;\n}\n\n.confirmation-content {\n  background-color: white;\n  padding: 25px;\n  border-radius: 12px;\n  width: 300px;\n  text-align: center;\n}\n\n.confirmation-content h3 {\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.confirmation-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.confirm-yes-btn, .confirm-no-btn {\n  padding: 8px 20px;\n  border-radius: 6px;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.confirm-yes-btn {\n  background-color: #E54F70;\n  color: white;\n}\n\n.confirm-yes-btn:hover {\n  background-color: #d33d5e;\n}\n\n.confirm-no-btn {\n  background-color: #f1f1f1;\n  color: #333;\n}\n\n.confirm-no-btn:hover {\n  background-color: #e1e1e1;\n}\n\n/* Dark Mode Styles */\n.dark-mode .floating-notification {\n  background-color: #444;\n}\n\n.dark-mode .floating-notification:hover {\n  background-color: #333;\n}\n\n.dark-mode .notifications-card {\n  background-color: #333;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .notifications-header {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .notifications-header h2 {\n  color: #fff;\n}\n\n.dark-mode .close-panel {\n  color: #aaa;\n}\n\n.dark-mode .close-panel:hover {\n  color: #fff;\n}\n\n.dark-mode .notification-item {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .notification-item:hover {\n  background-color: #3a3a3a;\n}\n\n.dark-mode .notification-name {\n  color: #fff;\n}\n\n.dark-mode .notification-message {\n  color: #ddd;\n}\n\n.dark-mode .order-details {\n  background-color: rgba(229, 79, 112, 0.1);\n  color: #ddd;\n}\n\n.dark-mode .notifications-footer {\n  border-top: 1px solid #444;\n}\n\n.dark-mode .view-all-button {\n  color: #E54F70;\n}\n\n.dark-mode .view-all-button:hover {\n  background-color: rgba(229, 79, 112, 0.1);\n}\n\n.dark-mode .clear-btn {\n  background-color: #444;\n  color: #ddd;\n}\n\n.dark-mode .clear-btn:hover {\n  background-color: #555;\n}\n\n.dark-mode .confirmation-content {\n  background-color: #333;\n}\n\n.dark-mode .confirmation-content h3,\n.dark-mode .confirmation-content p {\n  color: #fff;\n}\n\n.dark-mode .confirm-no-btn {\n  background-color: #444;\n  color: #ddd;\n}\n\n.dark-mode .confirm-no-btn:hover {\n  background-color: #555;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .floating-notification {\n    width: 35px;\n    height: 35px;\n    font-size: 16px;\n  }\n  \n  .floating-notification-badge {\n    min-width: 18px;\n    height: 18px;\n    font-size: 10px;\n  }\n  \n  .notifications-card {\n    max-width: 90%;\n  }\n}\n\n@media (max-width: 480px) {\n  .floating-notification {\n    width: 30px;\n    height: 30px;\n    font-size: 14px;\n  }\n  \n  .floating-notification-badge {\n    min-width: 16px;\n    height: 16px;\n    font-size: 9px;\n    top: -5px;\n    right: -5px;\n  }\n  \n  .notifications-card {\n    max-width: 95%;\n    height: 80vh;\n  }\n  \n  .notification-item {\n    padding: 12px 15px;\n  }\n  \n  .notification-avatar img {\n    width: 35px;\n    height: 35px;\n  }\n}\n\n/* New styles for adjustment details */\n.adjustment-details {\n  background-color: #fff3f3;\n  border-left: 3px solid #ff6b6b;\n  padding: 8px 12px;\n  margin: 8px 0;\n  font-size: 13px;\n  border-radius: 4px;\n  color: #545454;\n  line-height: 1.4;\n}\n\n.dark-mode .adjustment-details {\n  background-color: #3d2828;\n  border-left: 3px solid #ff6b6b;\n  color: #e0e0e0;\n}\n\n/* Approval buttons styling */\n.approval-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 12px;\n}\n\n.approve-btn, .decline-btn {\n  padding: 8px 16px;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 14px;\n  transition: background-color 0.2s;\n}\n\n.approve-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.approve-btn:hover {\n  background-color: #3e8e41;\n}\n\n.decline-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.decline-btn:hover {\n  background-color: #d32f2f;\n}\n\n/* New styles for loading and success messages */\n.loading-message {\n  position: fixed;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #4a4a4a;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  z-index: 3000;\n  animation: fadeIn 0.3s ease;\n}\n\n.success-message-floating {\n  position: fixed;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  z-index: 3000;\n  animation: fadeInOut 3s ease;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translate(-50%, -20px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50%, 0);\n  }\n}\n\n@keyframes fadeInOut {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, -20px);\n  }\n  10% {\n    opacity: 1;\n    transform: translate(-50%, 0);\n  }\n  80% {\n    opacity: 1;\n    transform: translate(-50%, 0);\n  }\n  100% {\n    opacity: 0;\n    transform: translate(-50%, -20px);\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}