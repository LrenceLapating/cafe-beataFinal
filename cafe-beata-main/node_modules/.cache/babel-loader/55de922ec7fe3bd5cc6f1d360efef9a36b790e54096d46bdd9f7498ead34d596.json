{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      cart: [],\n      // Store multiple selected items\n      userName: localStorage.getItem('userName') || \"Guest\",\n      // Fetch the logged-in user's name\n      isProcessingOrder: false,\n      // Track the order processing state\n      showModal: false,\n      // Track the modal visibility\n      countdown: 3,\n      // Countdown timer for the processing\n      progressBarWidth: 0,\n      // Progress bar width\n      showOrderClosedMessage: false,\n      progressInterval: null,\n      // Store the interval reference\n      isItemAdded: false,\n      // New flag to track if item has been added\n      isCafeOpen: true,\n      // Add this line to define isCafeOpen\n      // Map of product names to their image paths\n      productImages: {\n        // Ice Coffees\n        'Ice Peppermint Latte': 'peppermint-latte.png',\n        'Ice Matcha Cafe Latte': 'matcha-cafe-latte.png',\n        'Ice Cafe Latte': 'ice-cafe-latte.png',\n        'Ice Caramel Macchiato': 'caramel-macchiato.png',\n        'Ice Angel Affogato': 'angel-affogato.png',\n        'Ice Spanish Latte': 'spanish-latte.png',\n        'Ice Cappuccino': 'ice-cappuccino.png',\n        'Ice Cafe Mocha': 'cafe-mocha.png',\n        'Ice Salted Caramel Macchiato': 'salted-caramel-macchiato.png',\n        'Ice White Choco Mocha': 'white-choco-mocha.png',\n        'Ice Vanilla Latte': 'vanilla-latte.png',\n        'Ice Hazelnut Latte': 'hazelnut-latte.png',\n        'Ice Cafe Frizzy': 'cafe-frizzy.png',\n        'Ice Americano Lemon': 'americano-lemon.png',\n        'Ice Cafe Americano': 'ice-cafe-americano.png',\n        // Hot Coffees\n        'Hot Cafe Americano': 'cafe-americano.png',\n        'Hot Peppermint Latte': 'hot-peppermint-latte.png',\n        'Hot Matcha Cafe Latte': 'hot-matcha-cafe-latte.png',\n        'Hot Cafe Latte': 'cafe-latte.png',\n        'Hot Cafe Latte Macchiato': 'hot-cafelattemacc.png',\n        'Hot Caramel Macchiato': 'hot-caramel-macchiato.png',\n        'Hot Spanish Latte': 'hot-spanish-latte.png',\n        'Hot Cappuccino': 'hot-cappuccino.png',\n        'Hot Cafe Mocha': 'hot-cafe-mocha.png',\n        'Hot Salted Caramel Macchiato': 'hot-salted-caramel-macchiato.png',\n        'Hot Vanilla Latte': 'hot-vanilla-latte.png',\n        'Hot Hazelnut Latte': 'hot-hazelnut-latte.png',\n        'Hot Tea Pot': 'hotea-pot.png',\n        // Juice Drinks\n        'Apple Juice': 'apple.png',\n        'Carrot Juice': 'carrot.png',\n        'Mango Juice': 'mango.png',\n        'Orange Juice': 'orange.png',\n        'Fresh Lemon Juice': 'fresh-lemon.png',\n        'Strawberry Lemonade': 'strawberry-lemonade.png',\n        'Yakult Lemonade': 'yakult-lemonade.png',\n        'Yakult Honey Lemonade': 'yakult-honey-lemonade.png',\n        'Yakult Apple Lemonade': 'yakult-apple-lemonade.png',\n        'Yakult Orange Lemonade': 'yakult-orange-lemonade.png',\n        'Yakult Sprite Lemonade': 'yakult-sprite-lemonade.png',\n        'Yakult Mango Lemonade': 'yakult-mango-lemonade.png',\n        'Yakult Caramel Lemonade': 'yakult-caramel-lemonade.png',\n        'Yakult Strawberry Lemonade': 'yakult-strawberry-lemonade.png',\n        'Strawberry Mango Blue Lemonade': 'strawberry-mango-blue-lemonade.png',\n        'Strawberry Orange Blue Lemonade': 'strawberry-orange-blue-lemonade.png',\n        'Strawberry Apple Lemonade': 'strawberry-apple-lemonade.png',\n        'Apple Carrot Juice': 'apple-carrot.png',\n        'Mogu-Mogu Yakult': 'mogu-mogu-yakult.png',\n        'Mogu-Mogu Yakult w/ Lemon': 'mogu-mogu-yakult-with-lemon.png',\n        'Mogu-Mogu Yakult with Honey': 'mogu-mogu-yakult-with-honey.png',\n        'Mango Matcha Latte': 'mango-matcha-latte.png',\n        'Mango Strawberry Latte': 'mango-strawberry-latte.png',\n        // Milkteas\n        'Avocado Milktea': 'avocado-milktea.png',\n        'Wintermelon Milktea': 'wintermelon-milktea.png',\n        'Okinawa Milktea': 'okinawa-milktea.png',\n        'Mango Milktea': 'mango-milktea.png',\n        'Oreo Milktea': 'oreo-milktea.png',\n        'Caramel Milktea': 'caramel-milktea.png',\n        'Chocolate Milktea': 'chocolate-milktea.png',\n        'Mocha Milktea': 'mocha-milktea.png',\n        'Matcha Milktea': 'matcha-milktea.png',\n        'Taro Milktea': 'taro-milktea.png',\n        'Red Velvet Milktea': 'red-velvet-milktea.png',\n        'Ube Milktea': 'ube-milktea.png',\n        'Pandan Milktea': 'pandan-milktea.png',\n        'Strawberry Milktea': 'strawberry-milktea.png',\n        'Melon Milktea': 'melon-milktea.png',\n        'Ube Taro Milktea': 'ube-taro-milktea.png',\n        // Chocolate Drinks\n        'Hot Chocolate': 'hot-chocolate.png',\n        'Cold Chocolate': 'cold-chocolate.png',\n        // Blended Frappes\n        'Cookies & Cream Frappe': 'cookies-and-cream.png',\n        'Ube Frappe': 'ube.png',\n        'Mocha Frappe': 'mocha.png',\n        'Matcha Frappe': 'matcha.png',\n        'Mango Frappe': 'mango-frappe.png',\n        'Chocolate Frappe': 'chocolate.png',\n        'Strawberry Frappe': 'strawberry.png',\n        'Pandan Frappe': 'pandan.png',\n        'Avocado Frappe': 'avocado.png',\n        'Melon Frappe': 'melon.png',\n        'Cookies & Coffee Frappe': 'cookies-and-coffee.png',\n        // Pasta and Dishes\n        'Carbonara': 'carbonara.png',\n        'Baked Mac': 'bakemac.png',\n        'Tuna Pasta': 'tunapasta.png'\n      }\n    };\n  },\n  computed: {\n    totalPrice() {\n      return this.cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n  },\n  mounted() {\n    // Initialize isCafeOpen from localStorage\n    const savedCafeStatus = localStorage.getItem('isCafeOpen');\n    if (savedCafeStatus !== null) {\n      this.isCafeOpen = JSON.parse(savedCafeStatus);\n    }\n\n    // Load existing cart first\n    this.loadCart();\n\n    // Check URL parameters and add item only if not already done\n    const itemFromUrl = this.$route.query.name && this.$route.query.price;\n    if (itemFromUrl && !this.isItemAdded) {\n      this.handleNewItem();\n    }\n    console.log('Customer Name:', this.userName);\n\n    // Dynamically adjust the background color and height of the confirm order container\n    this.adjustContainerHeight();\n\n    // Check if the cafe is open, if not show the closed message\n    if (!this.isCafeOpen) {\n      this.openOrderClosedMessage();\n    }\n  },\n  methods: {\n    isCafeOpenMethod() {\n      const now = new Date();\n      const dayOfWeek = now.getDay(); // 0 is Sunday, 1 is Monday, ..., 6 is Saturday\n      const hour = now.getHours();\n      const minute = now.getMinutes();\n\n      // The cafe is open Monday to Saturday, from 6:00 AM to 9:30 PM\n      if (dayOfWeek === 0 ||\n      // Closed on Sunday\n      hour < 6 ||\n      // Before 6 AM\n      hour === 9 && minute > 30 ||\n      // After 9:30 PM\n      hour > 21) {\n        // After 9 PM\n        return false; // Cafe is closed\n      }\n      return true; // Cafe is open\n    },\n    openOrderClosedMessage() {\n      this.showOrderClosedMessage = true;\n      this.showModal = false; // Close the modal if it's open\n    },\n    closeOrderClosedMessage() {\n      this.showOrderClosedMessage = false;\n    },\n    loadCart() {\n      const userCartKey = `cart_${this.userName}`; // Create user-specific cart key\n      const storedCart = localStorage.getItem(userCartKey);\n      if (storedCart) {\n        this.cart = JSON.parse(storedCart);\n        // Check if we have items from URL in the cart\n        if (this.$route.query.name) {\n          const urlItemExists = this.cart.some(item => item.name === this.$route.query.name);\n          this.isItemAdded = urlItemExists;\n        }\n      }\n    },\n    handleNewItem() {\n      const itemName = this.$route.query.name;\n      const newItem = {\n        name: itemName,\n        price: Number(this.$route.query.price) || 0,\n        quantity: 1\n      };\n\n      // Set image path - use provided image from URL parameters\n      if (this.$route.query.image) {\n        newItem.image = this.$route.query.image;\n\n        // If the image is a backend path without the full URL, ensure it's properly formatted\n        if (newItem.image.startsWith('/uploads')) {\n          // The image path is already in the correct format for getImagePath to handle\n          console.log('Using backend image path:', newItem.image);\n        }\n      } else if (this.productImages[itemName]) {\n        // Fallback to the product mapping for predefined items\n        newItem.image = this.productImages[itemName];\n      } else {\n        // If no image is provided and no mapping exists, set a flag to use default image\n        console.log('No image found for item:', itemName);\n        newItem.image = 'default.png';\n      }\n\n      // Check if item exists in cart\n      const existingItemIndex = this.cart.findIndex(item => item.name === newItem.name);\n      if (existingItemIndex === -1) {\n        // Item doesn't exist, add it\n        this.cart.push(newItem);\n        this.isItemAdded = true;\n        this.saveCart();\n      }\n    },\n    saveCart() {\n      const userCartKey = `cart_${this.userName}`; // Use the same user-specific cart key\n      localStorage.setItem(userCartKey, JSON.stringify(this.cart));\n    },\n    startProcessingOrder() {\n      this.isProcessingOrder = true; // This will display the loading section\n      this.progressBarWidth = 0; // Reset the progress bar to 0%\n      this.updateProgressBar(); // Example method to update progress\n    },\n    updateProgressBar() {\n      let width = 0;\n      const interval = setInterval(() => {\n        if (width < 100) {\n          width += 10;\n          this.progressBarWidth = width;\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000); // Update every second\n    },\n    stopProcessingOrder() {\n      this.isProcessingOrder = false; // Stop the loading process\n    },\n    increaseQuantity(index) {\n      this.cart[index].quantity += 1;\n      this.saveCart();\n    },\n    decreaseQuantity(index) {\n      if (this.cart[index].quantity > 1) {\n        this.cart[index].quantity -= 1;\n        this.saveCart();\n      }\n    },\n    removeFromCart(index) {\n      this.cart.splice(index, 1);\n      this.saveCart();\n    },\n    addMoreOrder() {\n      // Get the last category from localStorage\n      const lastCategory = localStorage.getItem('lastCategory');\n\n      // Navigate back to Dashboard with the category as a query parameter if available\n      if (lastCategory) {\n        this.$router.push({\n          name: 'Dashboard',\n          query: {\n            category: lastCategory\n          }\n        });\n      } else {\n        this.$router.push({\n          name: 'Dashboard'\n        });\n      }\n    },\n    openModal() {\n      this.showModal = true;\n    },\n    closeModal() {\n      this.showModal = false;\n    },\n    confirmOrder() {\n      this.showModal = false; // Close the modal\n\n      // Show loading spinner and start countdown\n      this.isProcessingOrder = true;\n      this.progressBarWidth = 0;\n      this.countdown = 2;\n\n      // Store the interval reference so we can clear it when canceling\n      this.progressInterval = setInterval(() => {\n        if (this.countdown > 0 && this.isProcessingOrder) {\n          // Check if still processing\n          this.countdown--;\n          this.progressBarWidth += 33.33; // Update the progress bar width\n        } else if (this.isProcessingOrder) {\n          // Only process if not cancelled\n          clearInterval(this.progressInterval);\n          this.processOrder(); // Call the function to send the order\n        } else {\n          clearInterval(this.progressInterval);\n        }\n      }, 1000); // Update every second\n    },\n    processOrder() {\n      const customerName = localStorage.getItem('userName') || \"Unknown\"; // Fetch the correct username\n      console.log('Customer Name:', customerName); // Debugging\n\n      const orderData = {\n        customer_name: customerName,\n        // Use username here\n        items: this.cart.map(item => ({\n          name: item.name,\n          quantity: item.quantity,\n          price: item.price,\n          image: item.image // Include the image path\n        })),\n        status: 'pending'\n      };\n\n      // Proceed to send the order data to the backend\n      fetch('http://127.0.0.1:8000/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(orderData)\n      }).then(response => response.json()).then(data => {\n        this.isProcessingOrder = false; // Hide the loading spinner\n        const orderID = data.order_id; // Use the specific order ID returned from the server\n\n        // Navigate to the Order ID page after the delay\n        this.$router.push({\n          name: 'OrderIDPage',\n          query: {\n            orderID: orderID,\n            customerName: customerName,\n            items: JSON.stringify(this.cart),\n            totalPrice: this.totalPrice\n          }\n        });\n\n        // Clear cart data after the order is placed - use user-specific key\n        const userCartKey = `cart_${this.userName}`;\n        localStorage.removeItem(userCartKey);\n        this.cart = [];\n      }).catch(error => {\n        this.isProcessingOrder = false; // Hide the loading spinner\n        console.error(\"Error creating order:\", error);\n      });\n    },\n    stayOnPage() {\n      this.showModal = false; // Close the modal and stay on the page\n    },\n    adjustContainerHeight() {\n      const orderItems = document.querySelectorAll('.order-details li'); // Get all items in the order list\n      const confirmOrderContainer = document.querySelector('.confirm-order'); // Get the confirm-order container\n\n      const totalItems = orderItems.length; // Calculate the number of items\n\n      // Dynamically adjust padding based on the number of items\n      if (totalItems <= 3) {\n        confirmOrderContainer.style.padding = '20px'; // For fewer items, keep normal padding\n      } else if (totalItems <= 6) {\n        confirmOrderContainer.style.padding = '25px'; // For moderate items, add more padding\n      } else {\n        confirmOrderContainer.style.padding = '30px'; // For many items, add more padding\n      }\n    },\n    getImagePath(item) {\n      // If the item has a URL path already, use it directly\n      if (item.image && (item.image.startsWith('http://') || item.image.startsWith('https://'))) {\n        return item.image;\n      }\n\n      // Handle inventory system images (these would be full URLs from the inventory system)\n      if (item.image && item.image.includes('localhost:8001')) {\n        // Check if the path needs to be fixed - it should point to /uploads/products/\n        if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n          // Extract the filename\n          const parts = item.image.split('/');\n          const filename = parts[parts.length - 1];\n          const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n          console.log('Fixed inventory image path:', fixedPath);\n          return fixedPath;\n        }\n        return item.image;\n      }\n\n      // Handle local paths starting with /uploads/\n      if (item.image && item.image.startsWith('/uploads/')) {\n        return `http://localhost:8000${item.image}`;\n      }\n\n      // For items loaded from localStorage that have just the filename\n      if (item.image && !item.image.includes('/')) {\n        return `http://localhost:8000/uploads/avatars/${item.image}`;\n      }\n\n      // Fallback to default image\n      return require('@/assets/default.png');\n    },\n    cancelProcessing() {\n      this.isProcessingOrder = false;\n      this.progressBarWidth = 0;\n      this.showModal = false;\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","cart","userName","localStorage","getItem","isProcessingOrder","showModal","countdown","progressBarWidth","showOrderClosedMessage","progressInterval","isItemAdded","isCafeOpen","productImages","computed","totalPrice","reduce","total","item","price","quantity","mounted","savedCafeStatus","JSON","parse","loadCart","itemFromUrl","$route","query","name","handleNewItem","console","log","adjustContainerHeight","openOrderClosedMessage","methods","isCafeOpenMethod","now","Date","dayOfWeek","getDay","hour","getHours","minute","getMinutes","closeOrderClosedMessage","userCartKey","storedCart","urlItemExists","some","itemName","newItem","Number","image","startsWith","existingItemIndex","findIndex","push","saveCart","setItem","stringify","startProcessingOrder","updateProgressBar","width","interval","setInterval","clearInterval","stopProcessingOrder","increaseQuantity","index","decreaseQuantity","removeFromCart","splice","addMoreOrder","lastCategory","$router","category","openModal","closeModal","confirmOrder","processOrder","customerName","orderData","customer_name","items","map","status","fetch","method","headers","body","then","response","json","orderID","order_id","removeItem","catch","error","stayOnPage","orderItems","document","querySelectorAll","confirmOrderContainer","querySelector","totalItems","length","style","padding","getImagePath","includes","parts","split","filename","fixedPath","require","cancelProcessing"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\ConfirmOrder.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Confirm Modal -->\n    <div v-if=\"showModal\" class=\"custom-modal\">\n      <div class=\"modal-content\">\n        <span class=\"close\" @click=\"closeModal\">&times;</span>\n        <h2>📢 Hey, Wait!!</h2>\n        <p>Are you sure, that this is all you want to order?</p>\n        <div class=\"modal-buttons\">\n          <button @click=\"confirmOrder\" class=\"yes-btn\">Yes, I'm sure</button>\n          <button @click=\"stayOnPage\" class=\"no-btn\">No, I want to order more</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main content -->\n    <div class=\"confirm-order\">\n      <!-- Processing Order Section (centered) -->\n      <div v-show=\"isProcessingOrder\" class=\"loading-spinner-container\">\n        <button class=\"close-processing\" @click=\"cancelProcessing\">&times;</button>\n        <h1 class=\"wedding-text\">Café Beàta</h1>\n        <h1 class=\"loading-text\">Processing your order...</h1>\n        <div class=\"progress-bar-container\">\n          <div class=\"progress-bar\" :style=\"{ width: progressBarWidth + '%' }\"></div>\n        </div>\n      </div>\n\n      <!-- Order Closed Message -->\n      <div v-if=\"!isCafeOpen\" class=\"closed-message\">\n        <p>We apologize for the inconvenience. Café Beàta is currently closed. Our operating hours are Monday to Saturday, from 6:00 AM to 9:30 PM. </p>\n      </div>\n\n      <!-- Confirm Order Content -->\n      <h1 class=\"cart-title\">Your Cart ({{ cart.length }} items)</h1>\n\n      <div class=\"cart-container\" v-if=\"cart.length\">\n        <div class=\"cart-header\">\n          <div class=\"header-item\">Item</div>\n          <div class=\"header-price\">Price</div>\n          <div class=\"header-quantity\">Quantity</div>\n          <div class=\"header-total\">Total</div>\n          <div class=\"header-actions\"></div>\n        </div>\n        \n        <div class=\"cart-items\">\n          <div v-for=\"(order, index) in cart\" :key=\"index\" class=\"cart-item\">\n            <div class=\"item-details\">\n              <img :src=\"getImagePath(order)\" :alt=\"order.name\" class=\"item-image\"/>\n              <div class=\"item-info\">\n                <h3 class=\"item-name\">{{ order.name }}</h3>\n                <p v-if=\"order.name === 'Pi Pizza Oven'\" class=\"estimated-ship\">\n                  (Estimated Ship Date: June 6th)\n                </p>\n                <p v-if=\"order.name === 'Pi Pizza Oven'\" class=\"item-source\">\n                  Final Source: Wood Only\n                </p>\n                <p v-if=\"order.name === 'Grill Ultimate Bundle'\" class=\"item-promotion\">\n                  Add-in special promotion for $49.99\n                </p>\n                <a v-if=\"order.name === 'Pi Pizza Oven'\" class=\"change-link\" href=\"#\">Change</a>\n              </div>\n            </div>\n            <div class=\"item-price\">₱{{ order.price.toFixed(2) }}</div>\n            <div class=\"item-quantity\">\n              <div class=\"quantity-controls\">\n                <button @click=\"decreaseQuantity(index)\" class=\"quantity-btn\">-</button>\n                <span class=\"quantity-value\">{{ order.quantity }}</span>\n                <button @click=\"increaseQuantity(index)\" class=\"quantity-btn\">+</button>\n              </div>\n            </div>\n            <div class=\"item-total\">₱{{ (order.price * order.quantity).toFixed(2) }}</div>\n            <div class=\"item-actions\">\n              <button class=\"remove-btn\" @click=\"removeFromCart(index)\">×</button>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"cart-summary\">\n          <div class=\"subtotal\">\n            <span>Subtotal:</span>\n            <span>₱{{ totalPrice.toFixed(2) }}</span>\n          </div>\n          <div class=\"grand-total\">\n            <span>Grand total:</span>\n            <span>₱{{ totalPrice.toFixed(2) }}</span>\n          </div>\n        </div>\n\n        <div class=\"cart-actions\">\n          <button @click=\"addMoreOrder\" class=\"continue-shopping\">Continue Order</button>\n          <button @click=\"openModal\" class=\"checkout-btn\" :disabled=\"cart.length === 0 || isProcessingOrder || !isCafeOpen\">\n            Check out\n          </button>\n        </div>\n      </div>\n\n      <!-- No items in cart -->\n      <div class=\"empty-cart\" v-else>\n        <p>No items in cart. Add some from the dashboard.</p>\n        <button @click=\"addMoreOrder\" class=\"continue-shopping\">Start Order</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      cart: [], // Store multiple selected items\n      userName: localStorage.getItem('userName') || \"Guest\", // Fetch the logged-in user's name\n      isProcessingOrder: false,  // Track the order processing state\n      showModal: false, // Track the modal visibility\n      countdown: 3, // Countdown timer for the processing\n      progressBarWidth: 0, // Progress bar width\n      showOrderClosedMessage: false,\n      progressInterval: null, // Store the interval reference\n      isItemAdded: false, // New flag to track if item has been added\n      isCafeOpen: true, // Add this line to define isCafeOpen\n      // Map of product names to their image paths\n      productImages: {\n        // Ice Coffees\n        'Ice Peppermint Latte': 'peppermint-latte.png',\n        'Ice Matcha Cafe Latte': 'matcha-cafe-latte.png',\n        'Ice Cafe Latte': 'ice-cafe-latte.png',\n        'Ice Caramel Macchiato': 'caramel-macchiato.png',\n        'Ice Angel Affogato': 'angel-affogato.png',\n        'Ice Spanish Latte': 'spanish-latte.png',\n        'Ice Cappuccino': 'ice-cappuccino.png',\n        'Ice Cafe Mocha': 'cafe-mocha.png',\n        'Ice Salted Caramel Macchiato': 'salted-caramel-macchiato.png',\n        'Ice White Choco Mocha': 'white-choco-mocha.png',\n        'Ice Vanilla Latte': 'vanilla-latte.png',\n        'Ice Hazelnut Latte': 'hazelnut-latte.png',\n        'Ice Cafe Frizzy': 'cafe-frizzy.png',\n        'Ice Americano Lemon': 'americano-lemon.png',\n        'Ice Cafe Americano': 'ice-cafe-americano.png',\n        \n        // Hot Coffees\n        'Hot Cafe Americano': 'cafe-americano.png',\n        'Hot Peppermint Latte': 'hot-peppermint-latte.png',\n        'Hot Matcha Cafe Latte': 'hot-matcha-cafe-latte.png',\n        'Hot Cafe Latte': 'cafe-latte.png',\n        'Hot Cafe Latte Macchiato': 'hot-cafelattemacc.png',\n        'Hot Caramel Macchiato': 'hot-caramel-macchiato.png',\n        'Hot Spanish Latte': 'hot-spanish-latte.png',\n        'Hot Cappuccino': 'hot-cappuccino.png',\n        'Hot Cafe Mocha': 'hot-cafe-mocha.png',\n        'Hot Salted Caramel Macchiato': 'hot-salted-caramel-macchiato.png',\n        'Hot Vanilla Latte': 'hot-vanilla-latte.png',\n        'Hot Hazelnut Latte': 'hot-hazelnut-latte.png',\n        'Hot Tea Pot': 'hotea-pot.png',\n        \n        // Juice Drinks\n        'Apple Juice': 'apple.png',\n        'Carrot Juice': 'carrot.png',\n        'Mango Juice': 'mango.png',\n        'Orange Juice': 'orange.png',\n        'Fresh Lemon Juice': 'fresh-lemon.png',\n        'Strawberry Lemonade': 'strawberry-lemonade.png',\n        'Yakult Lemonade': 'yakult-lemonade.png',\n        'Yakult Honey Lemonade': 'yakult-honey-lemonade.png',\n        'Yakult Apple Lemonade': 'yakult-apple-lemonade.png',\n        'Yakult Orange Lemonade': 'yakult-orange-lemonade.png',\n        'Yakult Sprite Lemonade': 'yakult-sprite-lemonade.png',\n        'Yakult Mango Lemonade': 'yakult-mango-lemonade.png',\n        'Yakult Caramel Lemonade': 'yakult-caramel-lemonade.png',\n        'Yakult Strawberry Lemonade': 'yakult-strawberry-lemonade.png',\n        'Strawberry Mango Blue Lemonade': 'strawberry-mango-blue-lemonade.png',\n        'Strawberry Orange Blue Lemonade': 'strawberry-orange-blue-lemonade.png',\n        'Strawberry Apple Lemonade': 'strawberry-apple-lemonade.png',\n        'Apple Carrot Juice': 'apple-carrot.png',\n        'Mogu-Mogu Yakult': 'mogu-mogu-yakult.png',\n        'Mogu-Mogu Yakult w/ Lemon': 'mogu-mogu-yakult-with-lemon.png',\n        'Mogu-Mogu Yakult with Honey': 'mogu-mogu-yakult-with-honey.png',\n        'Mango Matcha Latte': 'mango-matcha-latte.png',\n        'Mango Strawberry Latte': 'mango-strawberry-latte.png',\n        \n        // Milkteas\n        'Avocado Milktea': 'avocado-milktea.png',\n        'Wintermelon Milktea': 'wintermelon-milktea.png',\n        'Okinawa Milktea': 'okinawa-milktea.png',\n        'Mango Milktea': 'mango-milktea.png',\n        'Oreo Milktea': 'oreo-milktea.png',\n        'Caramel Milktea': 'caramel-milktea.png',\n        'Chocolate Milktea': 'chocolate-milktea.png',\n        'Mocha Milktea': 'mocha-milktea.png',\n        'Matcha Milktea': 'matcha-milktea.png',\n        'Taro Milktea': 'taro-milktea.png',\n        'Red Velvet Milktea': 'red-velvet-milktea.png',\n        'Ube Milktea': 'ube-milktea.png',\n        'Pandan Milktea': 'pandan-milktea.png',\n        'Strawberry Milktea': 'strawberry-milktea.png',\n        'Melon Milktea': 'melon-milktea.png',\n        'Ube Taro Milktea': 'ube-taro-milktea.png',\n        \n        // Chocolate Drinks\n        'Hot Chocolate': 'hot-chocolate.png',\n        'Cold Chocolate': 'cold-chocolate.png',\n        \n        // Blended Frappes\n        'Cookies & Cream Frappe': 'cookies-and-cream.png',\n        'Ube Frappe': 'ube.png',\n        'Mocha Frappe': 'mocha.png',\n        'Matcha Frappe': 'matcha.png',\n        'Mango Frappe': 'mango-frappe.png',\n        'Chocolate Frappe': 'chocolate.png',\n        'Strawberry Frappe': 'strawberry.png',\n        'Pandan Frappe': 'pandan.png',\n        'Avocado Frappe': 'avocado.png',\n        'Melon Frappe': 'melon.png',\n        'Cookies & Coffee Frappe': 'cookies-and-coffee.png',\n        \n        // Pasta and Dishes\n        'Carbonara': 'carbonara.png',\n        'Baked Mac': 'bakemac.png',\n        'Tuna Pasta': 'tunapasta.png'\n      }\n    };\n  },\n  computed: {\n    totalPrice() {\n      return this.cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    },\n  },\n  mounted() {\n    // Initialize isCafeOpen from localStorage\n    const savedCafeStatus = localStorage.getItem('isCafeOpen');\n    if (savedCafeStatus !== null) {\n      this.isCafeOpen = JSON.parse(savedCafeStatus);\n    }\n    \n    // Load existing cart first\n    this.loadCart();\n    \n    // Check URL parameters and add item only if not already done\n    const itemFromUrl = this.$route.query.name && this.$route.query.price;\n    if (itemFromUrl && !this.isItemAdded) {\n      this.handleNewItem();\n    }\n    \n    console.log('Customer Name:', this.userName);\n    \n    // Dynamically adjust the background color and height of the confirm order container\n    this.adjustContainerHeight();\n\n    // Check if the cafe is open, if not show the closed message\n    if (!this.isCafeOpen) {\n      this.openOrderClosedMessage();\n    }\n  },\n  methods: {\n    isCafeOpenMethod() {\n      const now = new Date();\n      const dayOfWeek = now.getDay(); // 0 is Sunday, 1 is Monday, ..., 6 is Saturday\n      const hour = now.getHours();\n      const minute = now.getMinutes();\n\n      // The cafe is open Monday to Saturday, from 6:00 AM to 9:30 PM\n      if (dayOfWeek === 0 || // Closed on Sunday\n          hour < 6 || // Before 6 AM\n          (hour === 9 && minute > 30) || // After 9:30 PM\n          hour > 21) { // After 9 PM\n        return false; // Cafe is closed\n      }\n      return true; // Cafe is open\n    },\n\n    openOrderClosedMessage() {\n      this.showOrderClosedMessage = true;\n      this.showModal = false; // Close the modal if it's open\n    },\n\n    closeOrderClosedMessage() {\n      this.showOrderClosedMessage = false;\n    },\n\n    loadCart() {\n      const userCartKey = `cart_${this.userName}`; // Create user-specific cart key\n      const storedCart = localStorage.getItem(userCartKey);\n      if (storedCart) {\n        this.cart = JSON.parse(storedCart);\n        // Check if we have items from URL in the cart\n        if (this.$route.query.name) {\n          const urlItemExists = this.cart.some(item => item.name === this.$route.query.name);\n          this.isItemAdded = urlItemExists;\n        }\n      }\n    },\n\n    handleNewItem() {\n      const itemName = this.$route.query.name;\n      const newItem = {\n        name: itemName,\n        price: Number(this.$route.query.price) || 0,\n        quantity: 1\n      };\n      \n      // Set image path - use provided image from URL parameters\n      if (this.$route.query.image) {\n        newItem.image = this.$route.query.image;\n        \n        // If the image is a backend path without the full URL, ensure it's properly formatted\n        if (newItem.image.startsWith('/uploads')) {\n          // The image path is already in the correct format for getImagePath to handle\n          console.log('Using backend image path:', newItem.image);\n        }\n      } else if (this.productImages[itemName]) {\n        // Fallback to the product mapping for predefined items\n        newItem.image = this.productImages[itemName];\n      } else {\n        // If no image is provided and no mapping exists, set a flag to use default image\n        console.log('No image found for item:', itemName);\n        newItem.image = 'default.png';\n      }\n\n      // Check if item exists in cart\n      const existingItemIndex = this.cart.findIndex(item => item.name === newItem.name);\n      \n      if (existingItemIndex === -1) {\n        // Item doesn't exist, add it\n        this.cart.push(newItem);\n        this.isItemAdded = true;\n        this.saveCart();\n      }\n    },\n\n    saveCart() {\n      const userCartKey = `cart_${this.userName}`; // Use the same user-specific cart key\n      localStorage.setItem(userCartKey, JSON.stringify(this.cart));\n    },\n\n    startProcessingOrder() {\n      this.isProcessingOrder = true;  // This will display the loading section\n      this.progressBarWidth = 0;  // Reset the progress bar to 0%\n      this.updateProgressBar();   // Example method to update progress\n    },\n\n    updateProgressBar() {\n      let width = 0;\n      const interval = setInterval(() => {\n        if (width < 100) {\n          width += 10;\n          this.progressBarWidth = width;\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000);  // Update every second\n    },\n\n    stopProcessingOrder() {\n      this.isProcessingOrder = false;  // Stop the loading process\n    },\n\n    increaseQuantity(index) {\n      this.cart[index].quantity += 1;\n      this.saveCart();\n    },\n\n    decreaseQuantity(index) {\n      if (this.cart[index].quantity > 1) {\n        this.cart[index].quantity -= 1;\n        this.saveCart();\n      }\n    },\n\n    removeFromCart(index) {\n      this.cart.splice(index, 1);\n      this.saveCart();\n    },\n\n    addMoreOrder() {\n      // Get the last category from localStorage\n      const lastCategory = localStorage.getItem('lastCategory');\n      \n      // Navigate back to Dashboard with the category as a query parameter if available\n      if (lastCategory) {\n        this.$router.push({ \n          name: 'Dashboard',\n          query: { category: lastCategory }\n        });\n      } else {\n        this.$router.push({ name: 'Dashboard' });\n      }\n    },\n\n    openModal() {\n      this.showModal = true;\n    },\n\n    closeModal() {\n      this.showModal = false;\n    },\n\n    confirmOrder() {\n      this.showModal = false; // Close the modal\n\n      // Show loading spinner and start countdown\n      this.isProcessingOrder = true;\n      this.progressBarWidth = 0;\n      this.countdown = 2;\n\n      // Store the interval reference so we can clear it when canceling\n      this.progressInterval = setInterval(() => {\n        if (this.countdown > 0 && this.isProcessingOrder) { // Check if still processing\n          this.countdown--;\n          this.progressBarWidth += 33.33; // Update the progress bar width\n        } else if (this.isProcessingOrder) { // Only process if not cancelled\n          clearInterval(this.progressInterval);\n          this.processOrder(); // Call the function to send the order\n        } else {\n          clearInterval(this.progressInterval);\n        }\n      }, 1000); // Update every second\n    },\n\n    processOrder() {\n      const customerName = localStorage.getItem('userName') || \"Unknown\";  // Fetch the correct username\n      console.log('Customer Name:', customerName);  // Debugging\n\n      const orderData = {\n        customer_name: customerName,  // Use username here\n        items: this.cart.map(item => ({\n          name: item.name,\n          quantity: item.quantity,\n          price: item.price,\n          image: item.image // Include the image path\n        })),\n        status: 'pending'\n      };\n\n      // Proceed to send the order data to the backend\n      fetch('http://127.0.0.1:8000/orders', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData)\n      })\n      .then(response => response.json())\n      .then((data) => {\n        this.isProcessingOrder = false; // Hide the loading spinner\n        const orderID = data.order_id; // Use the specific order ID returned from the server\n\n        // Navigate to the Order ID page after the delay\n        this.$router.push({\n          name: 'OrderIDPage',\n          query: {\n            orderID: orderID, \n            customerName: customerName,\n            items: JSON.stringify(this.cart),\n            totalPrice: this.totalPrice\n          }\n        });\n\n        // Clear cart data after the order is placed - use user-specific key\n        const userCartKey = `cart_${this.userName}`;\n        localStorage.removeItem(userCartKey);\n        this.cart = [];\n      })\n      .catch(error => {\n        this.isProcessingOrder = false; // Hide the loading spinner\n        console.error(\"Error creating order:\", error);\n      });\n    },\n\n    stayOnPage() {\n      this.showModal = false; // Close the modal and stay on the page\n    },\n\n    adjustContainerHeight() {\n      const orderItems = document.querySelectorAll('.order-details li'); // Get all items in the order list\n      const confirmOrderContainer = document.querySelector('.confirm-order'); // Get the confirm-order container\n\n      const totalItems = orderItems.length;  // Calculate the number of items\n\n      // Dynamically adjust padding based on the number of items\n      if (totalItems <= 3) {\n        confirmOrderContainer.style.padding = '20px';  // For fewer items, keep normal padding\n      } else if (totalItems <= 6) {\n        confirmOrderContainer.style.padding = '25px';  // For moderate items, add more padding\n      } else {\n        confirmOrderContainer.style.padding = '30px';  // For many items, add more padding\n      }\n    },\n\n    getImagePath(item) {\n      // If the item has a URL path already, use it directly\n      if (item.image && (item.image.startsWith('http://') || item.image.startsWith('https://'))) {\n        return item.image;\n      }\n      \n      // Handle inventory system images (these would be full URLs from the inventory system)\n      if (item.image && item.image.includes('localhost:8001')) {\n        // Check if the path needs to be fixed - it should point to /uploads/products/\n        if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n          // Extract the filename\n          const parts = item.image.split('/');\n          const filename = parts[parts.length - 1];\n          const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n          console.log('Fixed inventory image path:', fixedPath);\n          return fixedPath;\n        }\n        return item.image;\n      }\n      \n      // Handle local paths starting with /uploads/\n      if (item.image && item.image.startsWith('/uploads/')) {\n        return `http://localhost:8000${item.image}`;\n      }\n      \n      // For items loaded from localStorage that have just the filename\n      if (item.image && !item.image.includes('/')) {\n        return `http://localhost:8000/uploads/avatars/${item.image}`;\n      }\n      \n      // Fallback to default image\n      return require('@/assets/default.png');\n    },\n    cancelProcessing() {\n      this.isProcessingOrder = false;\n      this.progressBarWidth = 0;\n      this.showModal = false;\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Reset basic elements */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n.cart-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: left;\n  padding: 0 10px;\n}\n\n.confirm-order {\n  padding: 20px;\n  background-color: white; /* Updated to white background */\n  max-width: 1200px;\n  margin: 0 auto;\n  font-family: Arial, sans-serif;\n  min-height: 100vh;\n}\n\n.cart-container {\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  border: 1px solid #E54F70;\n}\n\n.cart-header {\n  display: grid;\n  grid-template-columns: 3fr 1fr 1fr 1fr 0.5fr;\n  padding: 15px;\n  border-bottom: 1px solid #E54F70;\n  font-weight: bold;\n  color: #333;\n  background-color: rgba(229, 79, 112, 0.05);\n}\n\n.cart-items {\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.cart-item {\n  display: grid;\n  grid-template-columns: 3fr 1fr 1fr 1fr 0.5fr;\n  padding: 20px 15px;\n  align-items: center;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.cart-item:last-child {\n  border-bottom: none;\n}\n\n.item-details {\n  display: flex;\n  align-items: center;\n}\n\n.item-image {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  margin-right: 15px;\n  border-radius: 4px;\n}\n\n.item-info {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  text-align: left;\n}\n\n.item-name {\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 4px;\n}\n\n.estimated-ship {\n  color: #ff6b00;\n  font-size: 14px;\n  margin-bottom: 4px;\n}\n\n.item-source, .item-promotion {\n  font-size: 12px;\n  color: #666;\n  margin-bottom: 4px;\n}\n\n.change-link {\n  color: #0066cc;\n  text-decoration: none;\n  font-size: 14px;\n}\n\n.item-price, .item-total {\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  overflow: hidden;\n  width: fit-content;\n}\n\n.quantity-btn {\n  background-color: #f5f5f5;\n  border: none;\n  color: #333;\n  font-size: 16px;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n}\n\n.quantity-value {\n  padding: 0 10px;\n  font-size: 14px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #999;\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.remove-btn:hover {\n  color: #333;\n}\n\n.cart-summary {\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.subtotal, .grand-total {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.grand-total {\n  font-size: 18px;\n  font-weight: bold;\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n\n.cart-actions {\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n}\n\n.continue-shopping {\n  background-color: #ffffff;\n  border: 1px solid #333;\n  color: #333;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.checkout-btn {\n  background-color: #E54F70;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.checkout-btn:hover {\n  background-color: #d33d5e;\n}\n\n.empty-cart {\n  padding: 50px 20px;\n  text-align: center;\n}\n\n.empty-cart p {\n  margin-bottom: 20px;\n  font-size: 16px;\n}\n\n/* Modal Styles - Restored previous styling */\n.custom-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 999;\n}\n\n.modal-content {\n  background-color: #fce6e6;\n  padding: 30px;\n  border-radius: 10px;\n  text-align: center;\n  width: 80%;\n  max-width: 600px;\n}\n\n.close {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 24px;\n  color: #333;\n  cursor: pointer;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.modal-buttons button {\n  padding: 10px 15px;\n  font-size: 14px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.yes-btn {\n  background-color: rgb(136, 132, 136);\n  color: white;\n}\n\n.no-btn {\n  background-color: rgb(255, 0, 128);\n  color: white;\n}\n\n.yes-btn:hover {\n  background-color: #ff9a29;\n}\n\n.no-btn:hover {\n  background-color: #b82d67;\n}\n\n/* Processing Order Section */\n.loading-spinner-container {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n  padding: 20px;\n  background-color: #f8d2e4;\n  border-radius: 35px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  width: 80%;\n  max-width: 400px;\n}\n\n.wedding-text {\n  font-size: 36px;\n  font-weight: bold;\n  color: #d12f7a;\n  font-family: 'Dancing Script', cursive;\n  margin-bottom: 10px;\n}\n\n.loading-text {\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\n.progress-bar-container {\n  width: 100%;\n  max-width: 400px;\n  height: 30px;\n  background-color: #d85d7f;\n  border-radius: 20px;\n  overflow: hidden;\n}\n\n.progress-bar {\n  height: 100%;\n  background: repeating-linear-gradient(\n    45deg,\n    red 0%,\n    red 10%,\n    #d85d7f 10%,\n    #d85d7f 20%\n  );\n  border-radius: 20px;\n  animation: progressAnimation 3s linear infinite;\n}\n\n@keyframes progressAnimation {\n  0% { width: 0%; }\n  100% { width: 100%; }\n}\n\n.close-processing {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: none;\n  border: none;\n  font-size: 32px;\n  cursor: pointer;\n  color: #333;\n  padding: 5px 10px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  z-index: 1001;\n}\n\n/* Closed Message */\n.closed-message {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: #fff;\n  padding: 20px;\n  border-radius: 10px;\n  text-align: center;\n  font-size: 24px;\n  font-family: 'Dancing Script', cursive;\n  position: fixed;\n  top: 30%;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 80%;\n  max-width: 600px;\n  z-index: 9999;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n}\n\n.closed-message p {\n  margin: 0;\n  font-size: 22px;\n  font-weight: bold;\n}\n\n/* Dark Mode Styles */\n.dark-mode .confirm-order {\n  background-color: #222;\n  color: white;\n}\n\n.dark-mode .cart-container {\n  background-color: #333;\n  box-shadow: 0 1px 3px rgba(255, 255, 255, 0.1);\n}\n\n.dark-mode .cart-header {\n  border-bottom: 1px solid #444;\n  color: #fff;\n}\n\n.dark-mode .cart-items {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .cart-item {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .item-name {\n  color: #fff;\n}\n\n.dark-mode .item-source, .dark-mode .item-promotion {\n  color: #aaa;\n}\n\n.dark-mode .change-link {\n  color: #66b0ff;\n}\n\n.dark-mode .item-price, .dark-mode .item-total, \n.dark-mode .quantity-value, .dark-mode .subtotal,\n.dark-mode .grand-total {\n  color: #fff;\n}\n\n.dark-mode .quantity-controls {\n  border: 1px solid #555;\n}\n\n.dark-mode .quantity-btn {\n  background-color: #444;\n  color: #fff;\n}\n\n.dark-mode .remove-btn {\n  color: #ccc;\n}\n\n.dark-mode .remove-btn:hover {\n  color: #fff;\n}\n\n.dark-mode .cart-summary {\n  border-bottom: 1px solid #444;\n}\n\n.dark-mode .continue-shopping {\n  background-color: #333;\n  border: 1px solid #666;\n  color: #fff;\n}\n\n.dark-mode .checkout-btn {\n  background-color: #d12f7a;\n}\n\n.dark-mode .empty-cart p {\n  color: #fff;\n}\n\n.dark-mode .modal-content {\n  background-color: #222;\n  color: #fff;\n}\n\n.dark-mode .close {\n  color: #fff;\n}\n\n.dark-mode .loading-spinner-container {\n  background-color: #333;\n  color: #fff;\n}\n\n.dark-mode .wedding-text {\n  color: #f8a1b2;\n}\n\n.dark-mode .loading-text {\n  color: #fff;\n}\n\n.dark-mode .close-processing {\n  color: #fff;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .cart-header {\n    display: none;\n  }\n  \n  .cart-item {\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n    padding: 15px;\n  }\n  \n  .item-details {\n    grid-column: 1;\n  }\n  \n  .item-price, .item-quantity, .item-total {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .item-price::before {\n    content: \"Price:\";\n    font-weight: bold;\n  }\n  \n  .item-quantity::before {\n    content: \"Quantity:\";\n    font-weight: bold;\n  }\n  \n  .item-total::before {\n    content: \"Total:\";\n    font-weight: bold;\n  }\n  \n  .item-actions {\n    text-align: right;\n  }\n  \n  .cart-actions {\n    flex-direction: column;\n    gap: 10px;\n  }\n  \n  .continue-shopping, .checkout-btn {\n    width: 100%;\n  }\n\n  .loading-spinner-container {\n    width: 80%;\n    padding: 12px;\n    max-height: 250px;\n    overflow: hidden;\n  }\n  \n  .progress-bar-container {\n    max-width: 250px;\n  }\n  \n  .close-processing {\n    font-size: 28px;\n  }\n}\n\n@media (max-width: 480px) {\n  .item-image {\n    width: 50px;\n    height: 50px;\n  }\n  \n  .cart-title {\n    font-size: 20px;\n  }\n  \n  .item-name {\n    font-size: 14px;\n  }\n  \n  .estimated-ship, .item-source, .item-promotion {\n    font-size: 12px;\n  }\n  \n  .loading-spinner-container {\n    width: 75%;\n    padding: 10px;\n    max-height: 200px;\n    height: auto;\n    overflow: hidden;\n  }\n  \n  .progress-bar-container {\n    max-width: 220px;\n  }\n  \n  .close-processing {\n    font-size: 24px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}