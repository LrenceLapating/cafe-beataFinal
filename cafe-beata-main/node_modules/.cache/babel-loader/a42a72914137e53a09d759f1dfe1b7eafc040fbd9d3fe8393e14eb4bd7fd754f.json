{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport ItemEditor from './ItemEditor.vue';\nexport default {\n  components: {\n    ItemEditor\n  },\n  data() {\n    return {\n      orders: [],\n      // Store pending orders\n      isLoading: false,\n      // For loading state\n      ws: null,\n      // WebSocket connection\n      wsConnected: false,\n      activeDeclineOrderId: null,\n      // Track the order for which decline message is being customized\n      customDeclineMessage: \"\",\n      // Store the custom decline message\n      notificationSent: false,\n      // To track if the notification has been sent\n      searchQuery: \"\",\n      // To hold the search query input\n      isCafeOpen: true,\n      notificationMessage: \"\",\n      notificationClass: \"\",\n      notificationVisible: false,\n      showMenuEditor: false,\n      // Control visibility of menu editor popup\n      isSidebarOpen: true,\n      // Always open by default\n      orderReadyStatus: {},\n      // Track which orders are ready\n      confirmCompleteOrderId: null,\n      // Track which order is being confirmed for completion\n      showStockManager: false,\n      showStockUpdateModal: false,\n      stockItems: [],\n      stockSearchQuery: '',\n      selectedItem: null,\n      stockUpdateAction: 'add',\n      stockUpdateQuantity: 0,\n      stockUpdateReason: '',\n      selectedCategory: '',\n      uniqueCategories: [],\n      // New properties for decline modal\n      showDeclineModal: false,\n      selectedOrder: null,\n      editableItems: [],\n      refreshInterval: null,\n      // To store the interval ID for automatic refresh\n      isUpdating: false,\n      // New property for loading state\n      pingInterval: null,\n      // To store the interval ID for periodic ping\n      showChangePasswordModal: false,\n      passwordData: {\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      passwordMessage: '',\n      passwordMessageType: ''\n    };\n  },\n  computed: {\n    // Filter orders based on search query\n    filteredOrders() {\n      if (!this.searchQuery) {\n        return this.orders;\n      }\n      return this.orders.filter(order => {\n        const lowerCaseSearchQuery = this.searchQuery.toLowerCase();\n        return order.id.toString().includes(lowerCaseSearchQuery) ||\n        // Search by Order ID\n        order.customer_name.toLowerCase().includes(lowerCaseSearchQuery) // Search by Customer Name\n        ;\n      });\n    },\n    filteredStockItems() {\n      return this.stockItems.filter(item => {\n        if (!item || !item.name) return false;\n        const matchesSearch = item.name.toLowerCase().includes((this.stockSearchQuery || '').toLowerCase());\n        const matchesCategory = !this.selectedCategory || item.category === this.selectedCategory;\n        return matchesSearch && matchesCategory;\n      });\n    }\n  },\n  methods: {\n    toggleCafeStatus() {\n      this.isCafeOpen = !this.isCafeOpen; // Toggle the cafe status\n      localStorage.setItem('isCafeOpen', this.isCafeOpen); // Store cafe status\n\n      // Set the notification message and class based on the cafe status\n      if (this.isCafeOpen) {\n        this.notificationMessage = \"Cafe Beàta is now Open!\";\n        this.notificationClass = \"open-notification\"; // Set class for green when open\n      } else {\n        this.notificationMessage = \"Cafe Beàta is now Closed!\";\n        this.notificationClass = \"closed-notification\"; // Set class for red when closed\n      }\n      this.showNotification(); // Show the notification\n    },\n    showNotification() {\n      // Show the notification and reset visibility after a timeout\n      this.notificationVisible = true;\n      setTimeout(() => {\n        this.notificationVisible = false;\n      }, 3000); // Hide after 3 seconds\n    },\n    timeAgo(timestamp) {\n      // If timestamp is a string, ensure it's in ISO format by replacing space with \"T\"\n      if (typeof timestamp === \"string\") {\n        timestamp = timestamp.replace(\" \", \"T\"); // Convert to ISO format: \"YYYY-MM-DD HH:MM:SS\" -> \"YYYY-MM-DDTHH:MM:SS\"\n      }\n      const now = new Date();\n      const orderTime = new Date(timestamp); // Parse the timestamp\n\n      // Check if the timestamp is valid\n      if (isNaN(orderTime)) {\n        return \"Invalid time\"; // Return fallback message if timestamp is invalid\n      }\n      const differenceInSeconds = Math.floor((now - orderTime) / 1000);\n      if (differenceInSeconds < 60) {\n        return 'Just now';\n      } else if (differenceInSeconds < 3600) {\n        const minutes = Math.floor(differenceInSeconds / 60);\n        return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n      } else if (differenceInSeconds < 86400) {\n        const hours = Math.floor(differenceInSeconds / 3600);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else if (differenceInSeconds < 2592000) {\n        const days = Math.floor(differenceInSeconds / 86400);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      } else if (differenceInSeconds < 31536000) {\n        const months = Math.floor(differenceInSeconds / 2592000);\n        return `${months} month${months > 1 ? 's' : ''} ago`;\n      } else {\n        const years = Math.floor(differenceInSeconds / 31536000);\n        return `${years} year${years > 1 ? 's' : ''} ago`;\n      }\n    },\n    // Method to format the order date in the required format\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const year = date.getFullYear();\n      const hours = date.getHours();\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const period = hours >= 12 ? 'PM' : 'AM';\n      const hour12 = (hours % 12 || 12).toString().padStart(2, '0');\n\n      // Format: MM-DD-YYYY with highlighted time\n      const formattedDate = `${month}-${day}-${year} <span class=\"highlighted-time\">${hour12}:${minutes} ${period}</span>`;\n      return formattedDate;\n    },\n    cancelDecline() {\n      this.activeDeclineOrderId = null; // Hide decline input\n      this.customDeclineMessage = \"\"; // Clear text\n    },\n    // Navigate to the Order Record page\n    goToOrderRecord() {\n      this.$router.push({\n        name: \"OrderRecord\"\n      }); // Ensure this matches the name of the route\n    },\n    logout() {\n      this.$router.push({\n        name: \"Login\"\n      }); // Redirect the user to the Login page (adjust the route as needed)\n    },\n    // Fetch orders only once at initial load\n    async fetchOrders() {\n      if (this.isLoading) return;\n      this.isLoading = true;\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/orders\");\n        const data = await response.json();\n        if (data.orders && Array.isArray(data.orders)) {\n          // Filter pending orders and sort them by ID in ascending order\n          const pendingOrders = data.orders.filter(order => order.status === \"pending\").sort((a, b) => {\n            // Convert order IDs to numbers for proper numerical sorting\n            const idA = parseInt(a.id);\n            const idB = parseInt(b.id);\n            return idA - idB; // Sort in ascending order (lower IDs first)\n          });\n          console.log(`Fetched ${pendingOrders.length} pending orders`);\n\n          // Important: Create a new array reference to ensure Vue reactivity\n          this.orders = [...pendingOrders];\n\n          // Check if any of the fetched orders have ready notifications\n          // This ensures the \"Mark as Completed\" button is enabled for orders that are ready\n          this.orders.forEach(order => {\n            // If the order is already marked as ready in localStorage, keep that status\n            if (this.orderReadyStatus[order.id]) {\n              return;\n            }\n\n            // Check if there's a notification for this order\n            const userNotificationsKey = `user_notifications_${order.customer_name}`;\n            const notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n            const hasReadyNotification = notifications.some(n => n.orderId === order.id);\n            if (hasReadyNotification) {\n              this.orderReadyStatus[order.id] = true;\n            }\n          });\n\n          // Update localStorage with any changes\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n\n          // Force the UI to update\n          this.$forceUpdate();\n        } else {\n          console.error(\"Invalid data format\", data);\n          this.orders = [];\n        }\n      } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // Format ordered items for notification message\n    formatItems(items) {\n      if (!Array.isArray(items)) {\n        console.error(\"Invalid item format:\", items);\n        return \"Invalid item data\";\n      }\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\n    },\n    // Calculate the total price for a single order\n    calculateOrderTotal(items) {\n      if (!Array.isArray(items)) return \"₱0\";\n      return items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n    // Mark an order as completed and send notification\n    markAsCompleted(orderId, customerName, items) {\n      // Log for debugging\n      console.log(`Marking order ${orderId} as completed...`);\n\n      // Ensure items is properly formatted\n      let processedItems = items;\n      if (typeof items === 'string') {\n        try {\n          processedItems = JSON.parse(items);\n        } catch (e) {\n          console.error(\"Failed to parse items:\", e);\n          alert(\"Error processing order items. Please try again.\");\n          return;\n        }\n      }\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          status: \"completed\"\n        })\n      }).then(response => {\n        // First check if the response is actually received\n        if (!response) {\n          throw new Error('No response received from server');\n        }\n\n        // Then check if it's OK\n        if (!response.ok) {\n          return response.text().then(text => {\n            try {\n              // Try to parse as JSON\n              const data = JSON.parse(text);\n              throw new Error(data.detail || `Server error: ${response.status}`);\n            } catch (e) {\n              // If parsing fails, use the raw text\n              throw new Error(`Server error: ${response.status} - ${text || 'Unknown error'}`);\n            }\n          });\n        }\n        return response.json();\n      }).then(data => {\n        console.log(\"Order completed successfully:\", data);\n\n        // Immediately remove from pending orders\n        this.orders = this.orders.filter(order => order.id !== orderId);\n\n        // Remove from orderReadyStatus\n        delete this.orderReadyStatus[orderId];\n        // Update localStorage\n        localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n\n        // Calculate the total price\n        const total = processedItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n\n        // Prepare the notification with highlighted order details\n        const notification = {\n          orderId,\n          customerName,\n          message: `Your order is completed! ✔️ Thank you for choosing Café Beata. Enjoy your food and drinks! 🥰. <span class=\"highlighted-order-details\">Order details: ${this.formatItems(processedItems)}. Total: ₱${total}</span>`,\n          timestamp: new Date().toISOString(),\n          items: processedItems,\n          total\n        };\n\n        // Save the notification in localStorage for the specific user\n        const userNotificationsKey = `user_notifications_${customerName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Send real-time notification via WebSocket if connected\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'user_notification',\n            action: 'order_completed',\n            notification: notification,\n            target_user: customerName\n          }));\n        }\n\n        // Emit an event to notify other components\n        window.dispatchEvent(new Event(\"notificationUpdated\"));\n        alert(\"Order marked as completed!\");\n      }).catch(error => {\n        console.error(\"Error marking order as completed:\", error);\n        alert(error.message || \"Error completing order. Please try again.\");\n        // Refresh orders to ensure UI is in sync\n        this.fetchOrders();\n      });\n    },\n    // Open the decline modal for a specific order\n    openDeclineDialog(order) {\n      this.activeDeclineOrderId = order.id;\n      this.selectedOrder = order;\n      this.customDeclineMessage = localStorage.getItem(`customDeclineMessage_${order.id}`) || \"We need to adjust your order due to availability issues.\";\n\n      // Clone the items array to make it editable\n      this.editableItems = JSON.parse(JSON.stringify(order.items));\n\n      // Show the modal\n      this.showDeclineModal = true;\n    },\n    // Close the decline modal\n    closeDeclineModal() {\n      this.showDeclineModal = false;\n      this.activeDeclineOrderId = null;\n      this.selectedOrder = null;\n    },\n    // Increment item quantity\n    incrementQuantity(index) {\n      this.editableItems[index].quantity++;\n    },\n    // Decrement item quantity\n    decrementQuantity(index) {\n      if (this.editableItems[index].quantity > 0) {\n        this.editableItems[index].quantity--;\n      }\n    },\n    // Calculate the total of adjusted items\n    calculateAdjustedTotal() {\n      return this.editableItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n    // Send order adjustment for customer approval\n    sendForApproval() {\n      if (!this.selectedOrder) return;\n      const orderId = this.selectedOrder.id;\n      const customerName = this.selectedOrder.customer_name;\n\n      // Calculate the total price\n      const total = this.calculateAdjustedTotal();\n\n      // Format items for display\n      const formattedItems = this.formatItems(this.editableItems);\n\n      // Build a more specific message about quantity adjustments\n      let adjustmentReasons = [];\n      this.editableItems.forEach(item => {\n        const originalItem = this.selectedOrder.items.find(i => i.name === item.name);\n        if (originalItem && originalItem.quantity !== item.quantity) {\n          adjustmentReasons.push(`${item.name} adjusted from ${originalItem.quantity} to ${item.quantity} due to limited availability`);\n        }\n      });\n\n      // Create the customized message with specific quantity adjustment reasons\n      const specificAdjustments = adjustmentReasons.length > 0 ? `The following adjustments were made: ${adjustmentReasons.join('; ')}. ` : '';\n\n      // Prepare notification message with approval buttons\n      const message = `${this.customDeclineMessage} ${specificAdjustments}Please review the adjusted order: ${formattedItems}. Total: ₱${total}`;\n\n      // Create adjustment notification with approval options\n      const notification = {\n        orderId,\n        customerName,\n        message,\n        timestamp: new Date().toISOString(),\n        items: this.editableItems,\n        total,\n        requiresApproval: true,\n        // Flag to indicate this needs user approval\n        originalItems: this.selectedOrder.items // Store original items for reference\n      };\n\n      // Set loading state\n      this.isUpdating = true;\n\n      // First update the order in the database with the adjusted quantities\n      fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          items: this.editableItems,\n          status: \"pending\",\n          // Keep status as pending\n          isPendingApproval: true // Add flag for pending approval\n        })\n      }).then(response => {\n        if (!response.ok) {\n          return response.text().then(text => {\n            console.error(`Error status: ${response.status}, details: ${text}`);\n            throw new Error(`Failed to update order (${response.status}): ${text}`);\n          });\n        }\n        return response.json();\n      }).then(data => {\n        console.log(\"Order items updated in database successfully\", data);\n\n        // Now save to user's notifications\n        const userNotificationsKey = `user_notifications_${customerName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Send WebSocket notification if connected\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'user_notification',\n            action: 'order_adjustment',\n            // Set specific action type for adjustment requests\n            notification: notification,\n            target_user: customerName\n          }));\n        }\n\n        // Update the order in the UI immediately to show adjusted quantities\n        const orderIndex = this.orders.findIndex(o => o.id === orderId);\n        if (orderIndex !== -1) {\n          // Create a copy with adjusted items\n          const updatedOrder = {\n            ...this.orders[orderIndex],\n            items: this.editableItems,\n            isPendingApproval: true // Add flag for styling\n          };\n\n          // Update the order in the list - using Vue 3 array mutation\n          this.orders = [...this.orders.slice(0, orderIndex), updatedOrder, ...this.orders.slice(orderIndex + 1)];\n        }\n\n        // Show confirmation\n        this.notificationMessage = \"Adjustment request sent to customer for approval!\";\n        this.notificationClass = \"success-notification\";\n        this.showNotification();\n\n        // Close the modal and reset loading state\n        this.isUpdating = false;\n        this.closeDeclineModal();\n      }).catch(error => {\n        console.error(\"Error updating order items:\", error);\n\n        // Reset loading state but keep modal open for retry\n        this.isUpdating = false;\n\n        // Show error notification\n        this.notificationMessage = `Error: ${error.message}`;\n        this.notificationClass = \"error-notification\";\n        this.showNotification();\n\n        // Ask user if they want to retry via modal or notification\n        if (confirm(`Failed to update order: ${error.message}. Do you want to retry?`)) {\n          // Retry the update\n          this.sendForApproval();\n        }\n      });\n    },\n    // Decline the order directly\n    confirmDecline() {\n      if (!this.selectedOrder) return;\n\n      // Show loading indicator\n      this.isUpdating = true;\n      const orderId = this.selectedOrder.id;\n      const customerName = this.selectedOrder.customer_name;\n      const items = this.selectedOrder.items;\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          status: \"declined\"\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(() => {\n        // Remove from pending orders immediately\n        this.orders = this.orders.filter(order => order.id !== orderId);\n\n        // Remove from orderReadyStatus if it exists\n        if (this.orderReadyStatus[orderId]) {\n          delete this.orderReadyStatus[orderId];\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n        }\n\n        // Calculate total\n        const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n\n        // Prepare notification\n        const notification = {\n          orderId,\n          customerName,\n          message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\n          timestamp: new Date().toISOString(),\n          items,\n          total\n        };\n\n        // Save notification to localStorage\n        const userNotificationsKey = `user_notifications_${customerName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Send direct WebSocket notification for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          console.log('Sending WebSocket notification for declined order:', orderId);\n\n          // First send the standard notification\n          this.ws.send(JSON.stringify({\n            type: 'user_notification',\n            action: 'order_declined',\n            notification: notification,\n            target_user: customerName\n          }));\n\n          // Then send a special order_declined type message for real-time notification\n          this.ws.send(JSON.stringify({\n            type: 'order_declined',\n            order_id: orderId,\n            customer_name: customerName,\n            reason: message,\n            timestamp: new Date().toISOString()\n          }));\n        }\n\n        // Reset loading state\n        this.isUpdating = false;\n\n        // Close the modal\n        this.closeDeclineModal();\n\n        // Show success message\n        this.notificationMessage = `Order #${orderId} has been declined`;\n        this.notificationClass = \"closed-notification\";\n        this.showNotification();\n      }).catch(error => {\n        console.error(\"Error declining order:\", error);\n        this.isUpdating = false;\n        alert(\"Error declining order. Please try again.\");\n      });\n    },\n    // Original decline order function - unchanged\n    declineOrder(orderId, customerName, items) {\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          status: \"declined\"\n        }) // Properly formatted JSON\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(() => {\n        // Immediately remove from pending orders\n        this.orders = this.orders.filter(order => order.id !== orderId);\n\n        // Remove from orderReadyStatus if it exists\n        if (this.orderReadyStatus[orderId]) {\n          delete this.orderReadyStatus[orderId];\n          // Update localStorage\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n        }\n\n        // Calculate the total price\n        const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n\n        // Prepare the notification with the custom message and order details\n        const notification = {\n          orderId,\n          customerName,\n          message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\n          timestamp: new Date().toISOString(),\n          items,\n          // Include items in the notification\n          total // Include total in the notification\n        };\n\n        // Save the notification in localStorage for the specific user\n        const userNotificationsKey = `user_notifications_${customerName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n        // Send direct WebSocket notification for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          console.log('Sending WebSocket notification for declined order:', orderId);\n\n          // First send the standard notification\n          this.ws.send(JSON.stringify({\n            type: 'user_notification',\n            action: 'order_declined',\n            notification: notification,\n            target_user: customerName\n          }));\n\n          // Then send a special order_declined type message for real-time notification\n          this.ws.send(JSON.stringify({\n            type: 'order_declined',\n            order_id: orderId,\n            customer_name: customerName,\n            reason: message,\n            timestamp: new Date().toISOString()\n          }));\n        }\n\n        // Emit an event to notify other components (optional)\n        window.dispatchEvent(new Event(\"orderDeclined\"));\n\n        // Show success message\n        this.notificationMessage = `Order #${orderId} has been declined`;\n        this.notificationClass = \"closed-notification\";\n        this.showNotification();\n      }).catch(error => {\n        console.error(\"Error declining order:\", error);\n        this.isUpdating = false;\n        alert(\"Error declining order. Please try again.\");\n      });\n    },\n    // Save the decline message to localStorage whenever it's updated\n    updateDeclineMessage() {\n      if (this.activeDeclineOrderId !== null) {\n        localStorage.setItem(`customDeclineMessage_${this.activeDeclineOrderId}`, this.customDeclineMessage);\n      }\n    },\n    // New method to handle the \"Order Ready\" button click and show pop-up notification\n    sendOrderReadyNotification(orderId, customerName, items) {\n      const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n      const notification = {\n        orderId,\n        customerName,\n        message: `Your order is now ready! Proceed to the cashier for payment and pickup. ☺️ Order details: ${this.formatItems(items)}. Total: ₱${total}`,\n        timestamp: new Date().toISOString(),\n        items,\n        total\n      };\n\n      // Save the notification in localStorage for the specific user\n      const userNotificationsKey = `user_notifications_${customerName}`;\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n\n      // Add the notification without replacing existing ones\n      notifications.push(notification);\n\n      // Sort notifications by timestamp (newest first)\n      notifications.sort((a, b) => {\n        const dateA = new Date(a.timestamp);\n        const dateB = new Date(b.timestamp);\n        return dateB - dateA;\n      });\n      localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n      // Set order as ready using direct assignment\n      this.orderReadyStatus[orderId] = true;\n      // Force reactivity update\n      this.orderReadyStatus = {\n        ...this.orderReadyStatus\n      };\n\n      // Save orderReadyStatus to localStorage\n      localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n\n      // Send real-time notification via WebSocket if connected\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'user_notification',\n          action: 'order_ready',\n          notification: notification,\n          target_user: customerName\n        }));\n      }\n\n      // Show success notification to admin\n      this.notificationSent = true;\n      setTimeout(() => {\n        this.notificationSent = false;\n      }, 3000);\n    },\n    // Toggle menu editor popup visibility\n    toggleMenuEditor() {\n      this.showMenuEditor = !this.showMenuEditor;\n\n      // When opening the modal, prevent scrolling on the body\n      if (this.showMenuEditor) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = '';\n      }\n    },\n    // Toggle sidebar visibility\n    toggleSidebar() {\n      this.isSidebarOpen = !this.isSidebarOpen;\n      // When opening the sidebar, prevent scrolling on the body\n      if (this.isSidebarOpen) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = '';\n      }\n    },\n    // Close sidebar - only called when X button is clicked\n    closeSidebar() {\n      this.isSidebarOpen = false;\n      document.body.style.overflow = '';\n    },\n    // Handle clicks outside sidebar - removed to prevent auto-closing when clicking outside\n    handleOutsideClick() {\n      // Do nothing - sidebar should stay open\n    },\n    // Add new methods for completion confirmation\n    showCompletionConfirmation(orderId) {\n      this.confirmCompleteOrderId = orderId;\n    },\n    confirmCompletion() {\n      const order = this.orders.find(o => o.id === this.confirmCompleteOrderId);\n      if (order) {\n        this.markAsCompleted(order.id, order.customer_name, order.items);\n      }\n      this.confirmCompleteOrderId = null;\n    },\n    cancelCompletion() {\n      this.confirmCompleteOrderId = null;\n    },\n    toggleStockManager() {\n      this.showStockManager = !this.showStockManager;\n      if (this.showStockManager) {\n        this.fetchStockItems();\n      }\n    },\n    async fetchStockItems() {\n      try {\n        const response = await fetch('http://localhost:8000/api/stocks');\n        const data = await response.json();\n        console.log('Fetched stock data:', data); // Debug log\n\n        if (data.success && Array.isArray(data.items)) {\n          // Map the items to include name and category from item_name\n          this.stockItems = data.items.map(item => ({\n            id: item.item_id,\n            // Use item_id from the API response\n            name: item.item_name,\n            category: item.category,\n            quantity: item.quantity,\n            min_stock_level: item.min_stock_level\n          }));\n\n          // Update unique categories\n          this.uniqueCategories = [...new Set(this.stockItems.map(item => item.category))];\n          console.log('Processed stock items:', this.stockItems); // Debug log\n        } else {\n          console.error('Invalid data format received:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching stock items:', error);\n      }\n    },\n    getStockStatus(item) {\n      if (item.quantity === 0) return 'Disabled (Out of Stock)';\n      if (item.quantity >= 999999) return 'Enabled (Unlimited)';\n      if (item.quantity <= item.min_stock_level) return 'Low Stock';\n      return 'In Stock';\n    },\n    getStockStatusClass(item) {\n      if (item.quantity === 0) return 'status-disabled';\n      if (item.quantity >= 999999) return 'status-enabled';\n      if (item.quantity <= item.min_stock_level) return 'status-low';\n      return 'status-ok';\n    },\n    openStockUpdateModal(item) {\n      console.log('Opening modal for item:', item); // Debug log\n      this.selectedItem = item;\n      this.showStockUpdateModal = true;\n      this.stockUpdateQuantity = 0;\n      this.stockUpdateAction = 'add';\n      this.stockUpdateReason = '';\n    },\n    closeStockUpdateModal() {\n      this.showStockUpdateModal = false;\n      this.selectedItem = null;\n      this.stockUpdateQuantity = 0;\n      this.stockUpdateReason = '';\n    },\n    async submitStockUpdate() {\n      // Validate required fields\n      if (!this.selectedItem || !this.selectedItem.id) {\n        alert('No item selected');\n        return;\n      }\n      if (!this.stockUpdateAction) {\n        alert('Please select an action');\n        return;\n      }\n      try {\n        let requestBody = {};\n\n        // Handle different action types\n        if (this.stockUpdateAction === 'disabled') {\n          // For disabled, set quantity to 0 and use 'set' action\n          requestBody = {\n            action: 'set',\n            quantity: 0,\n            reason: this.stockUpdateReason || 'Disabled - Out of Stock'\n          };\n        } else if (this.stockUpdateAction === 'enabled') {\n          // For enabled, set a special value to indicate unlimited\n          requestBody = {\n            action: 'set',\n            quantity: 999999,\n            // Very large number to represent unlimited\n            reason: this.stockUpdateReason || 'Enabled - Unlimited Orders'\n          };\n        } else {\n          // For regular actions (add, subtract, set)\n          if (!this.stockUpdateQuantity || this.stockUpdateQuantity <= 0) {\n            alert('Please enter a valid quantity (greater than 0)');\n            return;\n          }\n\n          // Additional validation for subtract action\n          if (this.stockUpdateAction === 'subtract' && this.stockUpdateQuantity > this.selectedItem.quantity) {\n            alert('Cannot remove more than current stock');\n            return;\n          }\n          requestBody = {\n            action: this.stockUpdateAction,\n            quantity: parseInt(this.stockUpdateQuantity),\n            reason: this.stockUpdateReason || 'Stock update'\n          };\n        }\n        console.log('Sending request:', requestBody);\n        const response = await fetch(`http://localhost:8000/api/stocks/${this.selectedItem.id}/update`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          throw new Error(data.detail || 'Failed to update stock');\n        }\n        if (data.success) {\n          alert('Stock updated successfully!');\n          this.closeStockUpdateModal();\n          await this.fetchStockItems(); // Refresh the stock list\n        } else {\n          throw new Error(data.message || 'Failed to update stock');\n        }\n      } catch (error) {\n        console.error('Error updating stock:', error);\n        alert(error.message || 'Failed to update stock. Please try again.');\n      }\n    },\n    initWebSocket() {\n      // Use the same host as the API\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n\n      // Close existing connection if it exists\n      if (this.ws) {\n        try {\n          this.ws.close();\n        } catch (e) {\n          console.error(\"Error closing existing WebSocket:\", e);\n        }\n      }\n      console.log('Initializing WebSocket connection...');\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.wsConnected = true;\n\n        // Set up a periodic ping to keep the connection alive\n        if (this.pingInterval) clearInterval(this.pingInterval);\n        this.pingInterval = setInterval(() => {\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n              type: 'ping'\n            }));\n          }\n        }, 30000); // ping every 30 seconds\n      };\n      this.ws.onmessage = async event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message received:', data);\n          if (data.type === 'new_order') {\n            // Handle new order\n            if (data.order.status === 'pending') {\n              // Add the new order to the orders array\n              this.orders.push(data.order);\n\n              // Re-sort the orders array by ID in ascending order\n              this.orders.sort((a, b) => {\n                const idA = parseInt(a.id);\n                const idB = parseInt(b.id);\n                return idA - idB; // Sort in ascending order (lower IDs first)\n              });\n            }\n          } else if (data.type === 'order_status_update') {\n            // Handle order status update\n            if (data.status !== 'pending') {\n              this.orders = this.orders.filter(order => order.id !== data.order_id);\n\n              // Remove from orderReadyStatus if it exists\n              if (this.orderReadyStatus[data.order_id]) {\n                delete this.orderReadyStatus[data.order_id];\n                // Update localStorage\n                localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n              }\n            }\n          } else if (data.type === 'admin_notification') {\n            // Handle customer responses to order adjustments\n            if (data.action === 'adjustment_response') {\n              // Process the customer's response to an order adjustment\n              const notification = data.notification;\n              const orderId = notification.orderId;\n              if (notification.message.includes('APPROVED')) {\n                // Find the order and update it with adjusted items\n                const orderIndex = this.orders.findIndex(o => o.id === orderId);\n                if (orderIndex !== -1) {\n                  // Update the order with the adjusted items and remove pending approval flag\n                  const updatedOrder = {\n                    ...this.orders[orderIndex],\n                    items: notification.items,\n                    isPendingApproval: false // Remove the pending approval flag\n                  };\n\n                  // Update using Vue 3 reactivity \n                  this.orders = [...this.orders.slice(0, orderIndex), updatedOrder, ...this.orders.slice(orderIndex + 1)];\n\n                  // Show success notification\n                  this.notificationMessage = `Customer has approved order adjustments for Order #${orderId}`;\n                  this.notificationClass = \"open-notification\";\n                  this.showNotification();\n                }\n              } else if (notification.message.includes('DECLINED')) {\n                // Remove the order from the list if customer declined\n                this.orders = this.orders.filter(o => o.id !== orderId);\n\n                // Show declined notification\n                this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\n                this.notificationClass = \"closed-notification\";\n                this.showNotification();\n              }\n\n              // Mark the notification as processed\n              notification.processed = true;\n\n              // Update the notification in localStorage\n              const adminNotificationsKey = 'user_notifications_Admin';\n              let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n\n              // Find and update the processed notification\n              const notificationIndex = adminNotifications.findIndex(n => n.isAdminNotification && n.orderId === orderId && !n.processed);\n              if (notificationIndex !== -1) {\n                adminNotifications[notificationIndex].processed = true;\n                localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n              }\n            }\n          } else if (data.type === 'customer_approval') {\n            // Direct customer approval handling for real-time updates\n            const {\n              orderId,\n              approved\n            } = data;\n            if (approved) {\n              console.log(`CRITICAL FIX: Customer approved order #${orderId} - handling the single-order case specially`);\n\n              // Check if this is the single-order case (the problematic case)\n              const isSingleOrder = this.orders.length === 1;\n\n              // Always try direct DOM manipulation first\n              try {\n                const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\n                if (orderElement) {\n                  console.log(\"Found order element in DOM, applying direct DOM updates\");\n\n                  // Remove the pending approval class and add all styling inline\n                  orderElement.classList.remove('order-pending-approval');\n                  orderElement.style.backgroundColor = \"#ffffff\";\n                  orderElement.style.border = \"2px solid #ddd\";\n                  orderElement.style.boxShadow = \"0 2px 5px rgba(0, 0, 0, 0.1)\";\n\n                  // Hide the PENDING APPROVAL label\n                  const style = document.createElement('style');\n                  style.id = `fix-order-${orderId}`;\n                  style.textContent = `\n                    .order-item[data-order-id=\"${orderId}\"]::before {\n                      display: none !important;\n                    }\n                    .order-item[data-order-id=\"${orderId}\"] h3 {\n                      color: #333 !important;\n                    }\n                    .order-item[data-order-id=\"${orderId}\"] .order-total {\n                      color: #333 !important;\n                    }\n                  `;\n                  document.head.appendChild(style);\n\n                  // Update the status text\n                  const statusParagraphs = orderElement.querySelectorAll('p');\n                  for (const paragraph of statusParagraphs) {\n                    if (paragraph.innerHTML.includes('Status:')) {\n                      paragraph.innerHTML = '<strong>Status:</strong> pending';\n                      break;\n                    }\n                  }\n                }\n\n                // For the single-order case, recreate the entire orders container\n                if (isSingleOrder) {\n                  console.log(\"Single order detected - using special handling\");\n\n                  // 1. Get the order container\n                  const ordersContainer = document.querySelector('.orders-container');\n                  if (!ordersContainer) {\n                    console.error(\"Orders container not found\");\n                    return;\n                  }\n\n                  // 2. Find the order in our data\n                  const order = this.orders.find(o => o.id === orderId);\n                  if (!order) {\n                    console.error(\"Order not found in data\");\n                    return;\n                  }\n\n                  // 3. Create an updated version of the order without pending approval\n                  const updatedOrder = {\n                    ...order,\n                    isPendingApproval: false\n                  };\n\n                  // 4. Replace the entire orders list HTML\n                  const ordersList = ordersContainer.querySelector('.orders-list');\n                  if (!ordersList) {\n                    console.error(\"Orders list not found\");\n                    return;\n                  }\n\n                  // Create a new order item element \n                  const newOrderItemHTML = `\n                    <div class=\"order-item\" data-order-id=\"${updatedOrder.id}\">\n                      <div class=\"order-details\">\n                        <h3>Order ID: ${updatedOrder.id}</h3>\n                        <p><strong>Customer:</strong> ${updatedOrder.customer_name}</p>\n                        <p><strong>Status:</strong> ${updatedOrder.status}</p>\n                        <p><strong>Time Order:</strong> ${this.timeAgo(updatedOrder.created_at)}</p>\n                        \n                        <div class=\"items-section\">\n                          <strong>Items:</strong>\n                          <ul>\n                            ${updatedOrder.items.map(item => `<li>${item.name} - ₱${item.price} x ${item.quantity}</li>`).join('')}\n                          </ul>\n                        </div>\n                        \n                        <div class=\"order-total\">\n                          <p><strong>Total Amount: ₱${this.calculateOrderTotal(updatedOrder.items)}</strong></p>\n                        </div>\n                      </div>\n                      \n                      <div class=\"order-actions\">\n                        <button \n                          onclick=\"document.dispatchEvent(new CustomEvent('completion-confirmation', {detail: {orderId: ${updatedOrder.id}}}))\"\n                          class=\"mark-completed-btn small-btn ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\"\n                          ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\n                        >\n                          Mark as Completed\n                        </button>\n                        \n                        <button \n                          onclick=\"document.dispatchEvent(new CustomEvent('order-ready', {detail: {orderId: ${updatedOrder.id}, customerName: '${updatedOrder.customer_name}'}}))\"\n                          class=\"order-ready-btn small-btn\"\n                        >\n                          Order Ready 🔔\n                        </button>\n                        \n                        <button \n                          onclick=\"document.dispatchEvent(new CustomEvent('decline-dialog', {detail: {orderId: ${updatedOrder.id}}}))\"\n                          class=\"decline-btn\"\n                        >\n                          Decline\n                        </button>\n                      </div>\n                    </div>\n                  `;\n\n                  // Replace the content\n                  ordersList.innerHTML = newOrderItemHTML;\n\n                  // Setup event listeners for our custom events\n                  if (!this._customListenersAdded) {\n                    document.addEventListener('completion-confirmation', e => {\n                      this.showCompletionConfirmation(e.detail.orderId);\n                    });\n                    document.addEventListener('order-ready', e => {\n                      this.sendOrderReadyNotification(e.detail.orderId, e.detail.customerName, updatedOrder.items);\n                    });\n                    document.addEventListener('decline-dialog', e => {\n                      // Find the order again since we need the full object\n                      const order = this.orders.find(o => o.id === e.detail.orderId);\n                      if (order) {\n                        this.openDeclineDialog(order);\n                      }\n                    });\n                    this._customListenersAdded = true;\n                  }\n\n                  // Also update our Vue data model\n                  this.orders = [updatedOrder];\n                }\n              } catch (error) {\n                console.error(\"Error during direct DOM manipulation:\", error);\n              }\n\n              // Always show notification to admin\n              this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\n              this.notificationClass = \"open-notification\";\n              this.showNotification();\n\n              // Update the database in the background\n              fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  status: \"pending\",\n                  isPendingApproval: false\n                })\n              }).then(response => response.json()).then(data => {\n                console.log(\"Database updated to reflect customer approval:\", data);\n\n                // Always fetch all orders as a fallback\n                setTimeout(() => {\n                  this.fetchPendingOrders();\n                }, 1000);\n              }).catch(err => {\n                console.error(\"Error updating database after customer approval:\", err);\n\n                // Force reload as last resort for error cases\n                if (isSingleOrder) {\n                  setTimeout(() => location.reload(), 1000);\n                }\n              });\n            } else {\n              // If declined, handle in Vue since that part seems to work\n              this.orders = this.orders.filter(o => o.id !== orderId);\n\n              // Show notification about the decline\n              this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\n              this.notificationClass = \"closed-notification\";\n              this.showNotification();\n            }\n          } else if (data.type === 'stock_update') {\n            // Handle stock update\n            const stockItem = this.stockItems.find(item => item.id === data.item_id);\n            if (stockItem) {\n              stockItem.quantity = data.new_quantity;\n              stockItem.min_stock_level = data.min_stock_level;\n\n              // Update unique categories if needed\n              if (!this.uniqueCategories.includes(data.category)) {\n                this.uniqueCategories.push(data.category);\n              }\n            }\n            // Refresh stock items to ensure all data is up to date\n            await this.fetchStockItems();\n          } else if (data.type === 'menu_update') {\n            // Handle menu updates (new items, edited items, or deleted items)\n            await this.fetchStockItems(); // Refresh stock items when menu changes\n          } else if (data.type === 'category_update') {\n            // Handle category updates\n            await this.fetchStockItems(); // Refresh stock items when categories change\n\n            // Update unique categories list\n            if (data.action === 'add' && data.category && data.category.name) {\n              if (!this.uniqueCategories.includes(data.category.name)) {\n                this.uniqueCategories.push(data.category.name);\n              }\n            } else if (data.action === 'update' && data.category) {\n              // Replace old category name with new one\n              const index = this.uniqueCategories.indexOf(data.category.old_name);\n              if (index !== -1) {\n                this.uniqueCategories[index] = data.category.name;\n              } else if (!this.uniqueCategories.includes(data.category.name)) {\n                this.uniqueCategories.push(data.category.name);\n              }\n\n              // Update selected category if it was renamed\n              if (this.selectedCategory === data.category.old_name) {\n                this.selectedCategory = data.category.name;\n              }\n            } else if (data.action === 'delete' && data.category_name) {\n              // Remove deleted category\n              this.uniqueCategories = this.uniqueCategories.filter(cat => cat !== data.category_name);\n\n              // Reset selected category if it was deleted\n              if (this.selectedCategory === data.category_name) {\n                this.selectedCategory = '';\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.wsConnected = false;\n        // Try to reconnect after 5 seconds\n        setTimeout(() => {\n          this.initWebSocket();\n        }, 5000);\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.wsConnected = false;\n      };\n    },\n    // Handle localStorage changes for admin notifications\n    handleStorageEvent(event) {\n      // Check if the storage event is for admin notifications\n      if (event.key === 'user_notifications_Admin') {\n        // Process new admin notifications\n        this.processAdminNotifications();\n      }\n    },\n    // Process admin notifications from localStorage\n    processAdminNotifications() {\n      // Get admin notifications \n      const adminNotificationsKey = 'user_notifications_Admin';\n      const adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n\n      // Check for unprocessed customer response notifications\n      const unprocessedNotifications = adminNotifications.filter(n => n.isAdminNotification && (n.message.includes('APPROVED') || n.message.includes('DECLINED')) && !n.processed);\n\n      // Process each notification\n      unprocessedNotifications.forEach(notification => {\n        const orderId = notification.orderId;\n        if (notification.message.includes('APPROVED')) {\n          // If customer approved adjustments\n          // Find the order and update it\n          const orderIndex = this.orders.findIndex(o => o.id === orderId);\n          if (orderIndex !== -1) {\n            // Update the order with adjusted items\n            this.orders[orderIndex].items = notification.items;\n\n            // Mark the notification as processed\n            notification.processed = true;\n          }\n        } else if (notification.message.includes('DECLINED')) {\n          // If customer declined, remove the order\n          this.orders = this.orders.filter(o => o.id !== orderId);\n\n          // Mark the notification as processed\n          notification.processed = true;\n        }\n      });\n\n      // Update the processed notifications in localStorage\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n\n      // Show notification to admin about the response\n      if (unprocessedNotifications.length > 0) {\n        const lastNotification = unprocessedNotifications[unprocessedNotifications.length - 1];\n        this.notificationMessage = lastNotification.message;\n        this.notificationClass = lastNotification.message.includes('APPROVED') ? 'open-notification' : 'closed-notification';\n        this.showNotification();\n      }\n    },\n    // Fetch pending orders - wrapper for fetchOrders for consistency\n    fetchPendingOrders() {\n      this.fetchOrders();\n    },\n    // Connect to WebSocket - renamed from initWebSocket for consistency\n    connectWebSocket() {\n      this.initWebSocket();\n    },\n    // Add this method to force refresh orders after WebSocket updates\n    forceRefreshOrder(orderId) {\n      console.log(`Forcing refresh for order #${orderId}, current orders count: ${this.orders.length}`);\n\n      // Find the order that needs refreshing\n      const orderIndex = this.orders.findIndex(o => o.id === orderId);\n      if (orderIndex !== -1) {\n        // Fetch the latest order data from the server to ensure it's up to date\n        fetch(`http://127.0.0.1:8000/orders/${orderId}`).then(response => response.json()).then(data => {\n          if (data) {\n            console.log('Fetched fresh order data for real-time update:', data);\n\n            // Create a fresh order object with the latest data\n            const updatedOrder = {\n              ...data,\n              isPendingApproval: data.isPendingApproval || false // Ensure the flag is set correctly\n            };\n\n            // Special handling for single order\n            if (this.orders.length === 1) {\n              this.orders = [updatedOrder];\n            } else {\n              // Replace the order in the array using Vue reactivity\n              this.orders = [...this.orders.slice(0, orderIndex), updatedOrder, ...this.orders.slice(orderIndex + 1)];\n            }\n\n            // Force the component to re-render\n            this.$forceUpdate();\n            console.log('Order updated successfully in UI:', updatedOrder);\n\n            // If order is approved but UI doesn't update, try refreshing all orders\n            if (!updatedOrder.isPendingApproval) {\n              setTimeout(() => {\n                this.fetchPendingOrders();\n              }, 300);\n            }\n          }\n        }).catch(error => {\n          console.error('Error refreshing order:', error);\n          // Fallback to refreshing all orders on error\n          this.fetchPendingOrders();\n        });\n      } else {\n        console.log(`Order #${orderId} not found in current orders, refreshing all orders`);\n        // If the order isn't found in the current array, refresh all orders\n        this.fetchPendingOrders();\n      }\n    },\n    // Add direct DOM manipulation method to fix pending approval status when reactivity fails\n    forceFixPendingUI(orderId) {\n      console.log(`CRITICAL FIX: Using direct DOM manipulation to fix UI for order #${orderId}`);\n      try {\n        // Find the order element\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\n        if (!orderElement) {\n          console.log(\"Order element not found for direct fix\");\n          return false;\n        }\n\n        // Remove the critical class that causes the red border\n        orderElement.classList.remove('order-pending-approval');\n\n        // Add a success indicator class\n        orderElement.classList.add('order-approved-success');\n\n        // Find and update status text\n        const statusParagraphs = orderElement.querySelectorAll('p');\n        for (const paragraph of statusParagraphs) {\n          if (paragraph.textContent.includes(\"Status:\")) {\n            paragraph.innerHTML = '<strong>Status:</strong> pending';\n            console.log('Updated status text');\n          }\n        }\n\n        // Remove the \"PENDING APPROVAL\" label\n        // Create a specific style for this order element\n        const styleId = `order-${orderId}-fix`;\n        let styleElement = document.getElementById(styleId);\n        if (!styleElement) {\n          styleElement = document.createElement('style');\n          styleElement.id = styleId;\n          document.head.appendChild(styleElement);\n        }\n        styleElement.textContent = `\n          .order-item[data-order-id=\"${orderId}\"]::before {\n            display: none !important;\n          }\n          .order-item[data-order-id=\"${orderId}\"].order-pending-approval {\n            background-color: #ffffff !important;\n            border: 2px solid #ddd !important;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;\n          }\n          .order-item[data-order-id=\"${orderId}\"] h3 {\n            color: #333 !important;\n          }\n          .order-item[data-order-id=\"${orderId}\"] .order-total {\n            color: #333 !important;\n          }\n          .order-approved-success {\n            animation: successPulse 1s;\n          }\n          @keyframes successPulse {\n            0% { background-color: #e6ffe6; }\n            50% { background-color: #ccffcc; }\n            100% { background-color: #ffffff; }\n          }\n        `;\n        console.log(\"Direct DOM manipulation complete - critical CSS override applied\");\n        return true;\n      } catch (error) {\n        console.error(\"Error during direct DOM manipulation:\", error);\n        return false;\n      }\n    },\n    // Completely bypass Vue for this critical update\n    handleApprovalBypassVue(orderId) {\n      // Force a direct manipulation of the DOM \n      const fixed = this.forceFixPendingUI(orderId);\n\n      // If direct manipulation succeeded, set a flag to prevent further attempts\n      if (fixed) {\n        // Store fixed orders in localStorage to avoid repeated fixes\n        const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\n        if (!fixedOrders.includes(orderId)) {\n          fixedOrders.push(orderId);\n          localStorage.setItem('fixedApprovedOrders', JSON.stringify(fixedOrders));\n        }\n\n        // Show feedback to admin\n        this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\n        this.notificationClass = \"open-notification\";\n        this.showNotification();\n      }\n\n      // Force refresh orders after a short delay\n      setTimeout(() => {\n        this.fetchPendingOrders();\n      }, 1000);\n    },\n    toggleChangePassword() {\n      this.showChangePasswordModal = !this.showChangePasswordModal;\n      if (this.isSidebarOpen && window.innerWidth <= 768) {\n        this.toggleSidebar();\n      }\n    },\n    updatePassword() {\n      // Check if current password is correct\n      const currentAdminPassword = localStorage.getItem('adminPassword') || 'admin123';\n\n      // Reset message\n      this.passwordMessage = '';\n      this.passwordMessageType = '';\n\n      // Validate current password\n      if (this.passwordData.currentPassword !== currentAdminPassword) {\n        this.passwordMessage = 'Current password is incorrect';\n        this.passwordMessageType = 'error';\n        return;\n      }\n\n      // Validate new password\n      if (this.passwordData.newPassword.length < 6) {\n        this.passwordMessage = 'New password must be at least 6 characters';\n        this.passwordMessageType = 'error';\n        return;\n      }\n\n      // Validate password confirmation\n      if (this.passwordData.newPassword !== this.passwordData.confirmPassword) {\n        this.passwordMessage = 'New passwords do not match';\n        this.passwordMessageType = 'error';\n        return;\n      }\n\n      // Update the password in localStorage\n      localStorage.setItem('adminPassword', this.passwordData.newPassword);\n\n      // Show success message\n      this.passwordMessage = 'Password updated successfully!';\n      this.passwordMessageType = 'success';\n\n      // Clear form after a delay\n      setTimeout(() => {\n        this.passwordData = {\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: ''\n        };\n\n        // Close the modal after 2 seconds\n        setTimeout(() => {\n          this.toggleChangePassword();\n        }, 1000);\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.fetchPendingOrders();\n    // Set up automatic refresh every 60 seconds\n    this.refreshInterval = setInterval(() => {\n      this.fetchPendingOrders();\n    }, 60000);\n\n    // Check localStorage for cafe status\n    const storedCafeStatus = localStorage.getItem('isCafeOpen');\n    if (storedCafeStatus !== null) {\n      this.isCafeOpen = storedCafeStatus === 'true';\n    }\n\n    // Load orderReadyStatus from localStorage if available\n    const savedOrderReadyStatus = localStorage.getItem('orderReadyStatus');\n    if (savedOrderReadyStatus) {\n      this.orderReadyStatus = JSON.parse(savedOrderReadyStatus);\n    }\n\n    // Event listener for customer approval/decline responses\n    window.addEventListener('storage', this.handleStorageEvent);\n\n    // Connect to WebSocket\n    this.connectWebSocket();\n\n    // Add a global document event listener for a custom event we'll dispatch on customer approval\n    document.addEventListener('customer-approval', event => {\n      if (event.detail && event.detail.orderId) {\n        console.log('Got customer-approval event at document level:', event.detail);\n        this.handleApprovalBypassVue(event.detail.orderId);\n      }\n    });\n\n    // Dispatch a custom approval event if we have any approvals stored in localStorage\n    // This helps sync UI state on page load\n    const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\n    fixedOrders.forEach(orderId => {\n      setTimeout(() => {\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"].order-pending-approval`);\n        if (orderElement) {\n          console.log(`Found previously fixed order #${orderId} still showing pending, re-fixing`);\n          this.forceFixPendingUI(orderId);\n        }\n      }, 1000);\n    });\n  },\n  beforeUnmount() {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n    if (this.ws) {\n      this.ws.close();\n    }\n\n    // Remove event listeners\n    window.removeEventListener('storage', this.handleStorageEvent);\n    document.removeEventListener('customer-approval', this.handleApprovalBypassVue);\n  }\n};","map":{"version":3,"names":["ItemEditor","components","data","orders","isLoading","ws","wsConnected","activeDeclineOrderId","customDeclineMessage","notificationSent","searchQuery","isCafeOpen","notificationMessage","notificationClass","notificationVisible","showMenuEditor","isSidebarOpen","orderReadyStatus","confirmCompleteOrderId","showStockManager","showStockUpdateModal","stockItems","stockSearchQuery","selectedItem","stockUpdateAction","stockUpdateQuantity","stockUpdateReason","selectedCategory","uniqueCategories","showDeclineModal","selectedOrder","editableItems","refreshInterval","isUpdating","pingInterval","showChangePasswordModal","passwordData","currentPassword","newPassword","confirmPassword","passwordMessage","passwordMessageType","computed","filteredOrders","filter","order","lowerCaseSearchQuery","toLowerCase","id","toString","includes","customer_name","filteredStockItems","item","name","matchesSearch","matchesCategory","category","methods","toggleCafeStatus","localStorage","setItem","showNotification","setTimeout","timeAgo","timestamp","replace","now","Date","orderTime","isNaN","differenceInSeconds","Math","floor","minutes","hours","days","months","years","formatDate","dateString","date","month","getMonth","padStart","day","getDate","year","getFullYear","getHours","getMinutes","period","hour12","formattedDate","cancelDecline","goToOrderRecord","$router","push","logout","fetchOrders","response","fetch","json","Array","isArray","pendingOrders","status","sort","a","b","idA","parseInt","idB","console","log","length","forEach","userNotificationsKey","notifications","JSON","parse","getItem","hasReadyNotification","some","n","orderId","stringify","$forceUpdate","error","formatItems","items","map","quantity","join","calculateOrderTotal","reduce","sum","price","toFixed","markAsCompleted","customerName","processedItems","e","alert","method","headers","body","then","Error","ok","text","detail","total","notification","message","toISOString","readyState","WebSocket","OPEN","send","type","action","target_user","window","dispatchEvent","Event","catch","openDeclineDialog","closeDeclineModal","incrementQuantity","index","decrementQuantity","calculateAdjustedTotal","sendForApproval","formattedItems","adjustmentReasons","originalItem","find","i","specificAdjustments","requiresApproval","originalItems","isPendingApproval","orderIndex","findIndex","o","updatedOrder","slice","confirm","confirmDecline","order_id","reason","declineOrder","updateDeclineMessage","sendOrderReadyNotification","dateA","dateB","toggleMenuEditor","document","style","overflow","toggleSidebar","closeSidebar","handleOutsideClick","showCompletionConfirmation","confirmCompletion","cancelCompletion","toggleStockManager","fetchStockItems","success","item_id","item_name","min_stock_level","Set","getStockStatus","getStockStatusClass","openStockUpdateModal","closeStockUpdateModal","submitStockUpdate","requestBody","initWebSocket","wsUrl","location","hostname","close","onopen","clearInterval","setInterval","onmessage","event","processed","adminNotificationsKey","adminNotifications","notificationIndex","isAdminNotification","approved","isSingleOrder","orderElement","querySelector","classList","remove","backgroundColor","border","boxShadow","createElement","textContent","head","appendChild","statusParagraphs","querySelectorAll","paragraph","innerHTML","ordersContainer","ordersList","newOrderItemHTML","created_at","_customListenersAdded","addEventListener","fetchPendingOrders","err","reload","stockItem","new_quantity","indexOf","old_name","category_name","cat","onclose","onerror","handleStorageEvent","key","processAdminNotifications","unprocessedNotifications","lastNotification","connectWebSocket","forceRefreshOrder","forceFixPendingUI","add","styleId","styleElement","getElementById","handleApprovalBypassVue","fixed","fixedOrders","toggleChangePassword","innerWidth","updatePassword","currentAdminPassword","mounted","storedCafeStatus","savedOrderReadyStatus","beforeUnmount","removeEventListener"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\admin\\NotificationsPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"notifications-page\">\r\n    <!-- Sidebar Toggle Button (For Mobile) -->\r\n    <button class=\"menu-button\" @click=\"toggleSidebar\">\r\n      <div class=\"menu-icon-container\">\r\n        <i class=\"fa fa-bars\"></i>\r\n      </div>\r\n    </button>\r\n\r\n    <div v-if=\"isSidebarOpen\" class=\"overlay\"></div>\r\n    \r\n    <!-- Sidebar -->\r\n    <div :class=\"['sidebar', { 'open': isSidebarOpen }]\" @click.stop>\r\n      <button class=\"close-sidebar\" @click=\"toggleSidebar\">\r\n        <i class=\"fa fa-times\"></i>\r\n      </button>\r\n      \r\n      <!-- Admin Profile Section -->\r\n      <div class=\"user-profile-section\">\r\n        <h3><i class=\"fa fa-user-circle\"></i> Admin Dashboard</h3>\r\n      </div>\r\n\r\n      <hr class=\"utility-divider\">\r\n\r\n      <!-- Utility Buttons -->\r\n      <div class=\"utility-section\">\r\n        <button @click=\"goToOrderRecord\" class=\"utility-button\">\r\n          <i class=\"fa fa-history\"></i>\r\n          <span>View Order Record</span>\r\n        </button>\r\n\r\n        <button @click=\"toggleMenuEditor\" class=\"utility-button\">\r\n          <i class=\"fa fa-utensils\"></i>\r\n          <span>Menu Editor</span>\r\n        </button>\r\n\r\n        <button @click=\"toggleStockManager\" class=\"utility-button\">\r\n          <i class=\"fa fa-boxes\"></i>\r\n          <span>Stock Management</span>\r\n        </button>\r\n\r\n        <button @click=\"toggleChangePassword\" class=\"utility-button\">\r\n          <i class=\"fa fa-key\"></i>\r\n          <span>Change Password</span>\r\n        </button>\r\n\r\n        <button @click=\"logout\" class=\"utility-button logout\">\r\n          <i class=\"fa fa-sign-out\"></i>\r\n          <span>Logout</span>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Cafe Status Section -->\r\n      <div class=\"cafe-status-section\">\r\n        <button @click=\"toggleCafeStatus\" :class=\"{'open-btn': isCafeOpen, 'closed-btn': !isCafeOpen}\" class=\"cafe-toggle-btn\">\r\n          <i :class=\"isCafeOpen ? 'fa fa-check-circle' : 'fa fa-times-circle'\"></i>\r\n          {{ isCafeOpen ? 'Set Cafe Closed' : 'Set Cafe Open' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div :class=\"['content', { 'shifted': isSidebarOpen }]\">\r\n      <!-- Add the top bar with pink gradient at the very top -->\r\n      <div class=\"top-bar\">\r\n        <div class=\"centered-content\">\r\n          <!-- Add sidebar button to the top bar -->\r\n          <button class=\"menu-button-header\" @click=\"toggleSidebar\">\r\n            <div class=\"menu-icon-container\">\r\n              <i class=\"fa fa-bars\"></i>\r\n            </div>\r\n          </button>\r\n          <div class=\"logo-container\">\r\n            <div class=\"cafe-title\">Cafe Preorder Admin Dashboard</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"content-below-top-bar\">\r\n        <div v-if=\"notificationVisible\" :class=\"['notification-popup', notificationClass]\">\r\n          <p>{{ notificationMessage }}</p>\r\n        </div>\r\n\r\n        <!-- Search Bar -->\r\n        <div class=\"search-bar\">\r\n          <input \r\n            type=\"text\" \r\n            v-model=\"searchQuery\" \r\n            placeholder=\"Search orders by ID, customer name...\" \r\n            class=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div v-if=\"isLoading\" class=\"loading\">Loading...</div>\r\n\r\n        <div v-if=\"filteredOrders.length && !isLoading\" class=\"orders-container\">\r\n          <h2>Pending Orders</h2>\r\n          <div class=\"orders-list\">\r\n            <div class=\"order-item\" \r\n              v-for=\"order in filteredOrders\" \r\n              :key=\"order.id\" \r\n              :data-order-id=\"order.id\"\r\n              :class=\"{\r\n                'order-declined-state': activeDeclineOrderId === order.id,\r\n                'order-pending-approval': order.isPendingApproval\r\n              }\">\r\n              <div class=\"order-details\">\r\n                <h3>Order ID: {{ order.id }}</h3>\r\n                <p><strong>Customer:</strong> {{ order.customer_name }}</p>\r\n                <p><strong>Status:</strong> {{ order.status }}{{ order.isPendingApproval ? ' (Pending Approval)' : '' }}</p>\r\n                <p><strong>Time Order: </strong> {{ timeAgo(order.created_at) }}</p> <!-- Time Ago Display -->\r\n\r\n                <div class=\"items-section\">\r\n                  <strong>Items:</strong>\r\n                  <ul>\r\n                    <li v-for=\"item in order.items\" :key=\"item.name\">\r\n                      {{ item.name }} - ₱{{ item.price }} x {{ item.quantity }}\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <!-- Total Amount below items -->\r\n                <div class=\"order-total\">\r\n                  <p><strong>Total Amount: ₱{{ calculateOrderTotal(order.items) }}</strong></p>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"order-actions\">\r\n                <!-- Mark as Completed Buttons -->\r\n                <button \r\n                  @click=\"showCompletionConfirmation(order.id)\" \r\n                  class=\"mark-completed-btn small-btn\"\r\n                  :disabled=\"!orderReadyStatus[order.id]\"\r\n                  :class=\"{ 'disabled': !orderReadyStatus[order.id] }\"\r\n                >\r\n                  Mark as Completed\r\n                </button>\r\n\r\n                <!-- Order Ready button -->\r\n                <button \r\n                  @click=\"sendOrderReadyNotification(order.id, order.customer_name, order.items)\" \r\n                  class=\"order-ready-btn small-btn\"\r\n                >\r\n                  Order Ready  🔔\r\n                </button>\r\n\r\n                <!-- Decline button -->\r\n                <button @click=\"openDeclineDialog(order)\" class=\"decline-btn\">\r\n                  Decline\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Completion Confirmation Popup -->\r\n          <div v-if=\"confirmCompleteOrderId\" class=\"completion-confirmation-popup\">\r\n            <div class=\"completion-confirmation-content\">\r\n              <h3>Confirm Completion</h3>\r\n              <p>Are you sure Order ID: {{ confirmCompleteOrderId }} is completed?</p>\r\n              <div class=\"confirmation-buttons\">\r\n                <button @click=\"confirmCompletion\" class=\"confirm-yes-btn\">Yes</button>\r\n                <button @click=\"cancelCompletion\" class=\"confirm-no-btn\">No</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div v-else-if=\"!isLoading\" class=\"no-orders\">\r\n          <p>No pending orders at the moment.</p>\r\n        </div>\r\n\r\n        <!-- Popup Notification Sent -->\r\n        <div v-if=\"notificationSent\" class=\"notification-sent-popup\">\r\n          <p>Notification Sent!</p>\r\n          <button @click=\"notificationSent = false\" class=\"close-popup-btn\">Close</button>\r\n        </div>\r\n\r\n        <!-- Menu Editor Popup Modal -->\r\n        <div v-if=\"showMenuEditor\" class=\"menu-editor-modal\">\r\n          <div class=\"menu-editor-content\">\r\n            <div class=\"menu-editor-header\">\r\n              <h2>Menu Editor</h2>\r\n              <button @click=\"toggleMenuEditor\" class=\"close-modal-btn\">\r\n                <i class=\"fa-solid fa-times\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"menu-editor-body\">\r\n              <ItemEditor />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Stock Management Modal -->\r\n        <div v-if=\"showStockManager\" class=\"stock-manager-modal\">\r\n          <div class=\"stock-manager-content\">\r\n            <div class=\"stock-manager-header\">\r\n              <h2>Stock Management</h2>\r\n              <button @click=\"toggleStockManager\" class=\"close-modal-btn\">\r\n                <i class=\"fa-solid fa-times\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"stock-manager-body\">\r\n              <!-- Search Bar -->\r\n              <div class=\"stock-search-bar\">\r\n                <div class=\"stock-filters\">\r\n                  <input \r\n                    type=\"text\" \r\n                    v-model=\"stockSearchQuery\" \r\n                    placeholder=\"Search items...\" \r\n                    class=\"search-input\"\r\n                  />\r\n                  <select v-model=\"selectedCategory\" class=\"category-filter\">\r\n                    <option value=\"\">All Categories</option>\r\n                    <option v-for=\"category in uniqueCategories\" :key=\"category\" :value=\"category\">\r\n                      {{ category }}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Stock Items Table -->\r\n              <div class=\"stock-table-container\">\r\n                <table class=\"stock-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Item Name</th>\r\n                      <th>Category</th>\r\n                      <th>Current Stock</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"item in filteredStockItems\" :key=\"item.id\">\r\n                      <td>{{ item.name }}</td>\r\n                      <td>{{ item.category }}</td>\r\n                      <td>{{ item.quantity >= 999999 ? 'Unlimited' : item.quantity }}</td>\r\n                      <td :class=\"getStockStatusClass(item)\">{{ getStockStatus(item) }}</td>\r\n                      <td>\r\n                        <button @click=\"openStockUpdateModal(item)\" class=\"update-stock-btn\">\r\n                          Update Stock\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Stock Update Modal -->\r\n        <div v-if=\"showStockUpdateModal\" class=\"stock-update-modal\">\r\n          <div class=\"stock-update-content\">\r\n            <h3>Update Stock: {{ selectedItem?.name }}</h3>\r\n            <div class=\"stock-update-form\">\r\n              <div class=\"form-group\">\r\n                <label>Current Stock: {{ selectedItem?.quantity >= 999999 ? 'Unlimited' : selectedItem?.quantity }}</label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Action:</label>\r\n                <select v-model=\"stockUpdateAction\">\r\n                  <option value=\"add\">Add Stock</option>\r\n                  <option value=\"subtract\">Remove Stock</option>\r\n                  <option value=\"set\">Set Stock</option>\r\n                  <option value=\"disabled\">Disabled (Out of Stock)</option>\r\n                  <option value=\"enabled\">Enabled (Unlimited Orders)</option>\r\n                </select>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Quantity:</label>\r\n                <input \r\n                  v-if=\"stockUpdateAction !== 'disabled' && stockUpdateAction !== 'enabled'\"\r\n                  type=\"number\" \r\n                  v-model.number=\"stockUpdateQuantity\" \r\n                  min=\"0\"\r\n                  :max=\"stockUpdateAction === 'subtract' ? selectedItem?.quantity : 999999\"\r\n                />\r\n                <span v-else-if=\"stockUpdateAction === 'disabled'\">\r\n                  Item will be marked as out of stock and cannot be ordered.\r\n                </span>\r\n                <span v-else-if=\"stockUpdateAction === 'enabled'\">\r\n                  Item will be available for unlimited orders regardless of quantity.\r\n                </span>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Reason:</label>\r\n                <input type=\"text\" v-model=\"stockUpdateReason\" placeholder=\"Enter reason for update\"/>\r\n              </div>\r\n              <div class=\"update-buttons\">\r\n                <button @click=\"submitStockUpdate\" class=\"confirm-btn\">Update Stock</button>\r\n                <button @click=\"closeStockUpdateModal\" class=\"cancel-btn\">Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Decline Modal -->\r\n        <div v-if=\"showDeclineModal\" class=\"decline-modal-overlay\">\r\n          <div class=\"decline-modal-content\">\r\n            <div class=\"decline-modal-header\">\r\n              <h3>Order Adjustment</h3>\r\n              <button @click=\"closeDeclineModal\" class=\"close-modal-btn\">✕</button>\r\n      </div>\r\n            <div class=\"decline-modal-body\">\r\n              <p><strong>Order ID:</strong> {{ selectedOrder?.id }}</p>\r\n              <p><strong>Customer:</strong> {{ selectedOrder?.customer_name }}</p>\r\n              \r\n              <!-- Customized Message -->\r\n              <div class=\"form-group\">\r\n                <label>Message to Customer:</label>\r\n                <textarea \r\n                  v-model=\"customDeclineMessage\" \r\n                  placeholder=\"Enter a message explaining the changes...\" \r\n                  rows=\"3\"\r\n                ></textarea>\r\n              </div>\r\n              \r\n              <!-- Edit Item Quantities -->\r\n              <div class=\"form-group\">\r\n                <label>Adjust Item Quantities:</label>\r\n                <div class=\"items-adjustment\">\r\n                  <div v-for=\"(item, index) in editableItems\" :key=\"index\" class=\"item-adjust-row\">\r\n                    <span class=\"item-name\">{{ item.name }}</span>\r\n                    <div class=\"quantity-controls\">\r\n                      <button @click=\"decrementQuantity(index)\" :disabled=\"item.quantity <= 0\">-</button>\r\n                      <input type=\"number\" v-model.number=\"item.quantity\" min=\"0\">\r\n                      <button @click=\"incrementQuantity(index)\">+</button>\r\n                    </div>\r\n                    <span class=\"item-price\">₱{{ (item.price * item.quantity).toFixed(2) }}</span>\r\n                  </div>\r\n                </div>\r\n                <p class=\"adjusted-total\"><strong>Adjusted Total:</strong> ₱{{ calculateAdjustedTotal() }}</p>\r\n              </div>\r\n              \r\n              <!-- Action Buttons -->\r\n              <div class=\"decline-modal-actions\">\r\n                <button \r\n                  @click=\"sendForApproval\" \r\n                  class=\"send-approval-btn\"\r\n                  :disabled=\"isUpdating\"\r\n                >\r\n                  <span v-if=\"isUpdating\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i> Updating...\r\n                  </span>\r\n                  <span v-else>Send for Approval</span>\r\n                </button>\r\n                <button \r\n                  @click=\"confirmDecline\" \r\n                  class=\"confirm-decline-btn\"\r\n                  :disabled=\"isUpdating\"\r\n                >\r\n                  <span v-if=\"isUpdating\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i> Declining...\r\n                  </span>\r\n                  <span v-else>Declined</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Change Password Modal -->\r\n        <div v-if=\"showChangePasswordModal\" class=\"password-modal\">\r\n          <div class=\"password-modal-content\">\r\n            <div class=\"password-modal-header\">\r\n              <h2>Change Admin Password</h2>\r\n              <button @click=\"toggleChangePassword\" class=\"close-modal-btn\">\r\n                <i class=\"fa-solid fa-times\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"password-modal-body\">\r\n              <form @submit.prevent=\"updatePassword\" class=\"password-form\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"currentPassword\">Current Password</label>\r\n                  <input \r\n                    type=\"password\" \r\n                    id=\"currentPassword\" \r\n                    v-model=\"passwordData.currentPassword\" \r\n                    required\r\n                  />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"newPassword\">New Password</label>\r\n                  <input \r\n                    type=\"password\" \r\n                    id=\"newPassword\" \r\n                    v-model=\"passwordData.newPassword\" \r\n                    required\r\n                  />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"confirmPassword\">Confirm New Password</label>\r\n                  <input \r\n                    type=\"password\" \r\n                    id=\"confirmPassword\" \r\n                    v-model=\"passwordData.confirmPassword\" \r\n                    required\r\n                  />\r\n                </div>\r\n                <div v-if=\"passwordMessage\" :class=\"['password-message', passwordMessageType]\">\r\n                  {{ passwordMessage }}\r\n                </div>\r\n                <div class=\"form-actions\">\r\n                  <button type=\"submit\" class=\"save-password-btn\">Save New Password</button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ItemEditor from './ItemEditor.vue'\r\n\r\nexport default {\r\n  components: {\r\n    ItemEditor\r\n  },\r\n  data() {\r\n    return {\r\n      orders: [], // Store pending orders\r\n      isLoading: false, // For loading state\r\n      ws: null, // WebSocket connection\r\n      wsConnected: false,\r\n      activeDeclineOrderId: null, // Track the order for which decline message is being customized\r\n      customDeclineMessage: \"\", // Store the custom decline message\r\n      notificationSent: false, // To track if the notification has been sent\r\n      searchQuery: \"\", // To hold the search query input\r\n      isCafeOpen: true,\r\n      notificationMessage: \"\",\r\n      notificationClass: \"\", \r\n      notificationVisible: false,\r\n      showMenuEditor: false, // Control visibility of menu editor popup\r\n      isSidebarOpen: true, // Always open by default\r\n      orderReadyStatus: {}, // Track which orders are ready\r\n      confirmCompleteOrderId: null, // Track which order is being confirmed for completion\r\n      showStockManager: false,\r\n      showStockUpdateModal: false,\r\n      stockItems: [],\r\n      stockSearchQuery: '',\r\n      selectedItem: null,\r\n      stockUpdateAction: 'add',\r\n      stockUpdateQuantity: 0,\r\n      stockUpdateReason: '',\r\n      selectedCategory: '',\r\n      uniqueCategories: [],\r\n      // New properties for decline modal\r\n      showDeclineModal: false,\r\n      selectedOrder: null,\r\n      editableItems: [],\r\n      refreshInterval: null, // To store the interval ID for automatic refresh\r\n      isUpdating: false, // New property for loading state\r\n      pingInterval: null, // To store the interval ID for periodic ping\r\n      showChangePasswordModal: false,\r\n      passwordData: {\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      },\r\n      passwordMessage: '',\r\n      passwordMessageType: ''\r\n    };\r\n  },\r\n  computed: {\r\n    // Filter orders based on search query\r\n    filteredOrders() {\r\n      if (!this.searchQuery) {\r\n        return this.orders;\r\n      }\r\n      return this.orders.filter(order => {\r\n        const lowerCaseSearchQuery = this.searchQuery.toLowerCase();\r\n        return (\r\n          order.id.toString().includes(lowerCaseSearchQuery) || // Search by Order ID\r\n          order.customer_name.toLowerCase().includes(lowerCaseSearchQuery) // Search by Customer Name\r\n        );\r\n      });\r\n    },\r\n    filteredStockItems() {\r\n      return this.stockItems.filter(item => {\r\n        if (!item || !item.name) return false;\r\n        const matchesSearch = item.name.toLowerCase().includes((this.stockSearchQuery || '').toLowerCase());\r\n        const matchesCategory = !this.selectedCategory || item.category === this.selectedCategory;\r\n        return matchesSearch && matchesCategory;\r\n      });\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    toggleCafeStatus() {\r\n    this.isCafeOpen = !this.isCafeOpen; // Toggle the cafe status\r\n    localStorage.setItem('isCafeOpen', this.isCafeOpen); // Store cafe status\r\n\r\n    // Set the notification message and class based on the cafe status\r\n    if (this.isCafeOpen) {\r\n      this.notificationMessage = \"Cafe Beàta is now Open!\";\r\n      this.notificationClass = \"open-notification\"; // Set class for green when open\r\n    } else {\r\n      this.notificationMessage = \"Cafe Beàta is now Closed!\";\r\n      this.notificationClass = \"closed-notification\"; // Set class for red when closed\r\n    }\r\n\r\n    this.showNotification();  // Show the notification\r\n  },\r\n  \r\n   showNotification() {\r\n    // Show the notification and reset visibility after a timeout\r\n    this.notificationVisible = true;\r\n\r\n    setTimeout(() => {\r\n      this.notificationVisible = false;\r\n    }, 3000);  // Hide after 3 seconds\r\n  },\r\n\r\n\r\n    timeAgo(timestamp) {\r\n    // If timestamp is a string, ensure it's in ISO format by replacing space with \"T\"\r\n    if (typeof timestamp === \"string\") {\r\n      timestamp = timestamp.replace(\" \", \"T\"); // Convert to ISO format: \"YYYY-MM-DD HH:MM:SS\" -> \"YYYY-MM-DDTHH:MM:SS\"\r\n    }\r\n\r\n    const now = new Date();\r\n    const orderTime = new Date(timestamp); // Parse the timestamp\r\n\r\n    // Check if the timestamp is valid\r\n    if (isNaN(orderTime)) {\r\n      return \"Invalid time\"; // Return fallback message if timestamp is invalid\r\n    }\r\n\r\n    const differenceInSeconds = Math.floor((now - orderTime) / 1000);\r\n\r\n    if (differenceInSeconds < 60) {\r\n      return 'Just now';\r\n    } else if (differenceInSeconds < 3600) {\r\n      const minutes = Math.floor(differenceInSeconds / 60);\r\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n    } else if (differenceInSeconds < 86400) {\r\n      const hours = Math.floor(differenceInSeconds / 3600);\r\n      return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n    } else if (differenceInSeconds < 2592000) {\r\n      const days = Math.floor(differenceInSeconds / 86400);\r\n      return `${days} day${days > 1 ? 's' : ''} ago`;\r\n    } else if (differenceInSeconds < 31536000) {\r\n      const months = Math.floor(differenceInSeconds / 2592000);\r\n      return `${months} month${months > 1 ? 's' : ''} ago`;\r\n    } else {\r\n      const years = Math.floor(differenceInSeconds / 31536000);\r\n      return `${years} year${years > 1 ? 's' : ''} ago`;\r\n    }\r\n  },\r\n\r\n\r\n\r\n    // Method to format the order date in the required format\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      const hours = date.getHours();\r\n      const minutes = date.getMinutes().toString().padStart(2, '0');\r\n      const period = hours >= 12 ? 'PM' : 'AM';\r\n      const hour12 = (hours % 12 || 12).toString().padStart(2, '0');\r\n      \r\n      // Format: MM-DD-YYYY with highlighted time\r\n      const formattedDate = `${month}-${day}-${year} <span class=\"highlighted-time\">${hour12}:${minutes} ${period}</span>`;\r\n      return formattedDate;\r\n    },\r\n\r\n    cancelDecline() {\r\n      this.activeDeclineOrderId = null; // Hide decline input\r\n      this.customDeclineMessage = \"\"; // Clear text\r\n    },\r\n\r\n    // Navigate to the Order Record page\r\n    goToOrderRecord() {\r\n      this.$router.push({ name: \"OrderRecord\" });  // Ensure this matches the name of the route\r\n    },\r\n\r\n    logout() {\r\n      this.$router.push({ name: \"Login\" });  // Redirect the user to the Login page (adjust the route as needed)\r\n    },\r\n\r\n    // Fetch orders only once at initial load\r\n    async fetchOrders() {\r\n      if (this.isLoading) return;\r\n      this.isLoading = true;\r\n      \r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:8000/orders\");\r\n        const data = await response.json();\r\n        if (data.orders && Array.isArray(data.orders)) {\r\n          // Filter pending orders and sort them by ID in ascending order\r\n          const pendingOrders = data.orders\r\n            .filter(order => order.status === \"pending\")\r\n            .sort((a, b) => {\r\n              // Convert order IDs to numbers for proper numerical sorting\r\n              const idA = parseInt(a.id);\r\n              const idB = parseInt(b.id);\r\n              return idA - idB; // Sort in ascending order (lower IDs first)\r\n            });\r\n          \r\n          console.log(`Fetched ${pendingOrders.length} pending orders`);\r\n          \r\n          // Important: Create a new array reference to ensure Vue reactivity\r\n          this.orders = [...pendingOrders];\r\n          \r\n          // Check if any of the fetched orders have ready notifications\r\n          // This ensures the \"Mark as Completed\" button is enabled for orders that are ready\r\n          this.orders.forEach(order => {\r\n            // If the order is already marked as ready in localStorage, keep that status\r\n            if (this.orderReadyStatus[order.id]) {\r\n              return;\r\n            }\r\n            \r\n            // Check if there's a notification for this order\r\n            const userNotificationsKey = `user_notifications_${order.customer_name}`;\r\n            const notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n            const hasReadyNotification = notifications.some(n => n.orderId === order.id);\r\n            \r\n            if (hasReadyNotification) {\r\n              this.orderReadyStatus[order.id] = true;\r\n            }\r\n          });\r\n          \r\n          // Update localStorage with any changes\r\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n          \r\n          // Force the UI to update\r\n          this.$forceUpdate();\r\n        } else {\r\n          console.error(\"Invalid data format\", data);\r\n          this.orders = [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching orders:\", error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    // Format ordered items for notification message\r\n    formatItems(items) {\r\n      if (!Array.isArray(items)) {\r\n        console.error(\"Invalid item format:\", items);\r\n        return \"Invalid item data\";\r\n      }\r\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\r\n    },\r\n\r\n    // Calculate the total price for a single order\r\n    calculateOrderTotal(items) {\r\n      if (!Array.isArray(items)) return \"₱0\";\r\n      return items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n    },\r\n\r\n    // Mark an order as completed and send notification\r\n    markAsCompleted(orderId, customerName, items) {\r\n      // Log for debugging\r\n      console.log(`Marking order ${orderId} as completed...`);\r\n      \r\n      // Ensure items is properly formatted\r\n      let processedItems = items;\r\n      if (typeof items === 'string') {\r\n        try {\r\n          processedItems = JSON.parse(items);\r\n        } catch (e) {\r\n          console.error(\"Failed to parse items:\", e);\r\n          alert(\"Error processing order items. Please try again.\");\r\n          return;\r\n        }\r\n      }\r\n      \r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ status: \"completed\" })\r\n      })\r\n        .then(response => {\r\n          // First check if the response is actually received\r\n          if (!response) {\r\n            throw new Error('No response received from server');\r\n          }\r\n          \r\n          // Then check if it's OK\r\n          if (!response.ok) {\r\n            return response.text().then(text => {\r\n              try {\r\n                // Try to parse as JSON\r\n                const data = JSON.parse(text);\r\n                throw new Error(data.detail || `Server error: ${response.status}`);\r\n              } catch (e) {\r\n                // If parsing fails, use the raw text\r\n                throw new Error(`Server error: ${response.status} - ${text || 'Unknown error'}`);\r\n              }\r\n            });\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"Order completed successfully:\", data);\r\n          \r\n          // Immediately remove from pending orders\r\n          this.orders = this.orders.filter(order => order.id !== orderId);\r\n\r\n          // Remove from orderReadyStatus\r\n          delete this.orderReadyStatus[orderId];\r\n          // Update localStorage\r\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n\r\n          // Calculate the total price\r\n          const total = processedItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n\r\n          // Prepare the notification with highlighted order details\r\n          const notification = {\r\n            orderId,\r\n            customerName,\r\n            message: `Your order is completed! ✔️ Thank you for choosing Café Beata. Enjoy your food and drinks! 🥰. <span class=\"highlighted-order-details\">Order details: ${this.formatItems(processedItems)}. Total: ₱${total}</span>`,\r\n            timestamp: new Date().toISOString(),\r\n            items: processedItems,\r\n            total,\r\n          };\r\n\r\n          // Save the notification in localStorage for the specific user\r\n          const userNotificationsKey = `user_notifications_${customerName}`;\r\n          let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n          notifications.push(notification);\r\n          localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n\r\n          // Send real-time notification via WebSocket if connected\r\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n            this.ws.send(JSON.stringify({\r\n              type: 'user_notification',\r\n              action: 'order_completed',\r\n              notification: notification,\r\n              target_user: customerName\r\n            }));\r\n          }\r\n\r\n          // Emit an event to notify other components\r\n          window.dispatchEvent(new Event(\"notificationUpdated\"));\r\n\r\n          alert(\"Order marked as completed!\");\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error marking order as completed:\", error);\r\n          alert(error.message || \"Error completing order. Please try again.\");\r\n          // Refresh orders to ensure UI is in sync\r\n          this.fetchOrders();\r\n        });\r\n    },\r\n\r\n    // Open the decline modal for a specific order\r\n    openDeclineDialog(order) {\r\n      this.activeDeclineOrderId = order.id;\r\n      this.selectedOrder = order;\r\n      this.customDeclineMessage = localStorage.getItem(`customDeclineMessage_${order.id}`) || \"We need to adjust your order due to availability issues.\";\r\n      \r\n      // Clone the items array to make it editable\r\n      this.editableItems = JSON.parse(JSON.stringify(order.items));\r\n      \r\n      // Show the modal\r\n      this.showDeclineModal = true;\r\n    },\r\n\r\n    // Close the decline modal\r\n    closeDeclineModal() {\r\n      this.showDeclineModal = false;\r\n      this.activeDeclineOrderId = null;\r\n      this.selectedOrder = null;\r\n    },\r\n\r\n    // Increment item quantity\r\n    incrementQuantity(index) {\r\n      this.editableItems[index].quantity++;\r\n    },\r\n\r\n    // Decrement item quantity\r\n    decrementQuantity(index) {\r\n      if (this.editableItems[index].quantity > 0) {\r\n        this.editableItems[index].quantity--;\r\n      }\r\n    },\r\n\r\n    // Calculate the total of adjusted items\r\n    calculateAdjustedTotal() {\r\n      return this.editableItems.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);\r\n    },\r\n\r\n    // Send order adjustment for customer approval\r\n    sendForApproval() {\r\n      if (!this.selectedOrder) return;\r\n      \r\n      const orderId = this.selectedOrder.id;\r\n      const customerName = this.selectedOrder.customer_name;\r\n      \r\n      // Calculate the total price\r\n      const total = this.calculateAdjustedTotal();\r\n      \r\n      // Format items for display\r\n      const formattedItems = this.formatItems(this.editableItems);\r\n      \r\n      // Build a more specific message about quantity adjustments\r\n      let adjustmentReasons = [];\r\n      this.editableItems.forEach((item) => {\r\n        const originalItem = this.selectedOrder.items.find(i => i.name === item.name);\r\n        if (originalItem && originalItem.quantity !== item.quantity) {\r\n          adjustmentReasons.push(`${item.name} adjusted from ${originalItem.quantity} to ${item.quantity} due to limited availability`);\r\n        }\r\n      });\r\n      \r\n      // Create the customized message with specific quantity adjustment reasons\r\n      const specificAdjustments = adjustmentReasons.length > 0 \r\n        ? `The following adjustments were made: ${adjustmentReasons.join('; ')}. ` \r\n        : '';\r\n        \r\n      // Prepare notification message with approval buttons\r\n      const message = `${this.customDeclineMessage} ${specificAdjustments}Please review the adjusted order: ${formattedItems}. Total: ₱${total}`;\r\n      \r\n      // Create adjustment notification with approval options\r\n      const notification = {\r\n        orderId,\r\n        customerName,\r\n        message,\r\n        timestamp: new Date().toISOString(),\r\n        items: this.editableItems,\r\n        total,\r\n        requiresApproval: true,  // Flag to indicate this needs user approval\r\n        originalItems: this.selectedOrder.items  // Store original items for reference\r\n      };\r\n      \r\n      // Set loading state\r\n      this.isUpdating = true;\r\n      \r\n      // First update the order in the database with the adjusted quantities\r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          items: this.editableItems,\r\n          status: \"pending\",  // Keep status as pending\r\n          isPendingApproval: true // Add flag for pending approval\r\n        })\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          return response.text().then(text => {\r\n            console.error(`Error status: ${response.status}, details: ${text}`);\r\n            throw new Error(`Failed to update order (${response.status}): ${text}`);\r\n          });\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Order items updated in database successfully\", data);\r\n        \r\n        // Now save to user's notifications\r\n        const userNotificationsKey = `user_notifications_${customerName}`;\r\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n        notifications.push(notification);\r\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n        \r\n        // Send WebSocket notification if connected\r\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n          this.ws.send(JSON.stringify({\r\n            type: 'user_notification',\r\n            action: 'order_adjustment',  // Set specific action type for adjustment requests\r\n            notification: notification,\r\n            target_user: customerName\r\n          }));\r\n        }\r\n        \r\n        // Update the order in the UI immediately to show adjusted quantities\r\n        const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n        if (orderIndex !== -1) {\r\n          // Create a copy with adjusted items\r\n          const updatedOrder = {\r\n            ...this.orders[orderIndex],\r\n            items: this.editableItems,\r\n            isPendingApproval: true // Add flag for styling\r\n          };\r\n          \r\n          // Update the order in the list - using Vue 3 array mutation\r\n          this.orders = [\r\n            ...this.orders.slice(0, orderIndex),\r\n            updatedOrder,\r\n            ...this.orders.slice(orderIndex + 1)\r\n          ];\r\n        }\r\n        \r\n        // Show confirmation\r\n        this.notificationMessage = \"Adjustment request sent to customer for approval!\";\r\n        this.notificationClass = \"success-notification\";\r\n        this.showNotification();\r\n        \r\n        // Close the modal and reset loading state\r\n        this.isUpdating = false;\r\n        this.closeDeclineModal();\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error updating order items:\", error);\r\n        \r\n        // Reset loading state but keep modal open for retry\r\n        this.isUpdating = false;\r\n        \r\n        // Show error notification\r\n        this.notificationMessage = `Error: ${error.message}`;\r\n        this.notificationClass = \"error-notification\";\r\n        this.showNotification();\r\n        \r\n        // Ask user if they want to retry via modal or notification\r\n        if (confirm(`Failed to update order: ${error.message}. Do you want to retry?`)) {\r\n          // Retry the update\r\n          this.sendForApproval();\r\n        }\r\n      });\r\n    },\r\n\r\n    // Decline the order directly\r\n    confirmDecline() {\r\n      if (!this.selectedOrder) return;\r\n      \r\n      // Show loading indicator\r\n      this.isUpdating = true;\r\n      \r\n      const orderId = this.selectedOrder.id;\r\n      const customerName = this.selectedOrder.customer_name;\r\n      const items = this.selectedOrder.items;\r\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\r\n      \r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ status: \"declined\" })\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        // Remove from pending orders immediately\r\n        this.orders = this.orders.filter(order => order.id !== orderId);\r\n        \r\n        // Remove from orderReadyStatus if it exists\r\n        if (this.orderReadyStatus[orderId]) {\r\n          delete this.orderReadyStatus[orderId];\r\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n        }\r\n        \r\n        // Calculate total\r\n        const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n        \r\n        // Prepare notification\r\n        const notification = {\r\n          orderId,\r\n          customerName,\r\n          message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\r\n          timestamp: new Date().toISOString(),\r\n          items, \r\n          total,\r\n        };\r\n        \r\n        // Save notification to localStorage\r\n        const userNotificationsKey = `user_notifications_${customerName}`;\r\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n        notifications.push(notification);\r\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n        \r\n        // Send direct WebSocket notification for real-time updates\r\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n          console.log('Sending WebSocket notification for declined order:', orderId);\r\n          \r\n          // First send the standard notification\r\n          this.ws.send(JSON.stringify({\r\n            type: 'user_notification',\r\n            action: 'order_declined',\r\n            notification: notification,\r\n            target_user: customerName\r\n          }));\r\n          \r\n          // Then send a special order_declined type message for real-time notification\r\n          this.ws.send(JSON.stringify({\r\n            type: 'order_declined',\r\n            order_id: orderId,\r\n            customer_name: customerName,\r\n            reason: message,\r\n            timestamp: new Date().toISOString()\r\n          }));\r\n        }\r\n        \r\n        // Reset loading state\r\n        this.isUpdating = false;\r\n        \r\n        // Close the modal\r\n        this.closeDeclineModal();\r\n        \r\n        // Show success message\r\n        this.notificationMessage = `Order #${orderId} has been declined`;\r\n        this.notificationClass = \"closed-notification\";\r\n        this.showNotification();\r\n        \r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error declining order:\", error);\r\n        this.isUpdating = false;\r\n        alert(\"Error declining order. Please try again.\");\r\n      });\r\n    },\r\n\r\n    // Original decline order function - unchanged\r\n    declineOrder(orderId, customerName, items) {\r\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\r\n\r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ status: \"declined\" }) // Properly formatted JSON\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(() => {\r\n          // Immediately remove from pending orders\r\n          this.orders = this.orders.filter(order => order.id !== orderId);\r\n\r\n          // Remove from orderReadyStatus if it exists\r\n          if (this.orderReadyStatus[orderId]) {\r\n            delete this.orderReadyStatus[orderId];\r\n            // Update localStorage\r\n            localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n          }\r\n\r\n          // Calculate the total price\r\n          const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n\r\n          // Prepare the notification with the custom message and order details\r\n          const notification = {\r\n            orderId,\r\n            customerName,\r\n            message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\r\n            timestamp: new Date().toISOString(),\r\n            items,  // Include items in the notification\r\n            total,  // Include total in the notification\r\n          };\r\n\r\n          // Save the notification in localStorage for the specific user\r\n          const userNotificationsKey = `user_notifications_${customerName}`;\r\n          let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n          notifications.push(notification);\r\n          localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n\r\n          // Send direct WebSocket notification for real-time updates\r\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n            console.log('Sending WebSocket notification for declined order:', orderId);\r\n            \r\n            // First send the standard notification\r\n            this.ws.send(JSON.stringify({\r\n              type: 'user_notification',\r\n              action: 'order_declined',\r\n              notification: notification,\r\n              target_user: customerName\r\n            }));\r\n            \r\n            // Then send a special order_declined type message for real-time notification\r\n            this.ws.send(JSON.stringify({\r\n              type: 'order_declined',\r\n              order_id: orderId,\r\n              customer_name: customerName,\r\n              reason: message,\r\n              timestamp: new Date().toISOString()\r\n            }));\r\n          }\r\n\r\n          // Emit an event to notify other components (optional)\r\n          window.dispatchEvent(new Event(\"orderDeclined\"));\r\n\r\n          // Show success message\r\n          this.notificationMessage = `Order #${orderId} has been declined`;\r\n          this.notificationClass = \"closed-notification\";\r\n          this.showNotification();\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error declining order:\", error);\r\n          this.isUpdating = false;\r\n          alert(\"Error declining order. Please try again.\");\r\n        });\r\n    },\r\n\r\n    // Save the decline message to localStorage whenever it's updated\r\n    updateDeclineMessage() {\r\n      if (this.activeDeclineOrderId !== null) {\r\n        localStorage.setItem(`customDeclineMessage_${this.activeDeclineOrderId}`, this.customDeclineMessage);\r\n      }\r\n    },\r\n\r\n    // New method to handle the \"Order Ready\" button click and show pop-up notification\r\n    sendOrderReadyNotification(orderId, customerName, items) {\r\n      const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n\r\n      const notification = {\r\n        orderId,\r\n        customerName,\r\n        message: `Your order is now ready! Proceed to the cashier for payment and pickup. ☺️ Order details: ${this.formatItems(items)}. Total: ₱${total}`,\r\n        timestamp: new Date().toISOString(),\r\n        items,\r\n        total,\r\n      };\r\n\r\n      // Save the notification in localStorage for the specific user\r\n      const userNotificationsKey = `user_notifications_${customerName}`;\r\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n      \r\n      // Add the notification without replacing existing ones\r\n      notifications.push(notification);\r\n      \r\n      // Sort notifications by timestamp (newest first)\r\n      notifications.sort((a, b) => {\r\n        const dateA = new Date(a.timestamp);\r\n        const dateB = new Date(b.timestamp);\r\n        return dateB - dateA;\r\n      });\r\n      \r\n      localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n\r\n      // Set order as ready using direct assignment\r\n      this.orderReadyStatus[orderId] = true;\r\n      // Force reactivity update\r\n      this.orderReadyStatus = { ...this.orderReadyStatus };\r\n      \r\n      // Save orderReadyStatus to localStorage\r\n      localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n\r\n      // Send real-time notification via WebSocket if connected\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n        this.ws.send(JSON.stringify({\r\n          type: 'user_notification',\r\n          action: 'order_ready',\r\n          notification: notification,\r\n          target_user: customerName\r\n        }));\r\n      }\r\n\r\n      // Show success notification to admin\r\n      this.notificationSent = true;\r\n      setTimeout(() => {\r\n        this.notificationSent = false;\r\n      }, 3000);\r\n    },\r\n\r\n    // Toggle menu editor popup visibility\r\n    toggleMenuEditor() {\r\n      this.showMenuEditor = !this.showMenuEditor;\r\n      \r\n      // When opening the modal, prevent scrolling on the body\r\n      if (this.showMenuEditor) {\r\n        document.body.style.overflow = 'hidden';\r\n      } else {\r\n        document.body.style.overflow = '';\r\n      }\r\n    },\r\n\r\n    // Toggle sidebar visibility\r\n    toggleSidebar() {\r\n      this.isSidebarOpen = !this.isSidebarOpen;\r\n      // When opening the sidebar, prevent scrolling on the body\r\n      if (this.isSidebarOpen) {\r\n        document.body.style.overflow = 'hidden';\r\n      } else {\r\n        document.body.style.overflow = '';\r\n      }\r\n    },\r\n\r\n    // Close sidebar - only called when X button is clicked\r\n    closeSidebar() {\r\n      this.isSidebarOpen = false;\r\n      document.body.style.overflow = '';\r\n    },\r\n\r\n    // Handle clicks outside sidebar - removed to prevent auto-closing when clicking outside\r\n    handleOutsideClick() {\r\n      // Do nothing - sidebar should stay open\r\n    },\r\n\r\n    // Add new methods for completion confirmation\r\n    showCompletionConfirmation(orderId) {\r\n      this.confirmCompleteOrderId = orderId;\r\n    },\r\n\r\n    confirmCompletion() {\r\n      const order = this.orders.find(o => o.id === this.confirmCompleteOrderId);\r\n      if (order) {\r\n        this.markAsCompleted(order.id, order.customer_name, order.items);\r\n      }\r\n      this.confirmCompleteOrderId = null;\r\n    },\r\n\r\n    cancelCompletion() {\r\n      this.confirmCompleteOrderId = null;\r\n    },\r\n\r\n    toggleStockManager() {\r\n      this.showStockManager = !this.showStockManager;\r\n      if (this.showStockManager) {\r\n        this.fetchStockItems();\r\n      }\r\n    },\r\n\r\n    async fetchStockItems() {\r\n      try {\r\n        const response = await fetch('http://localhost:8000/api/stocks');\r\n        const data = await response.json();\r\n        console.log('Fetched stock data:', data); // Debug log\r\n        \r\n        if (data.success && Array.isArray(data.items)) {\r\n          // Map the items to include name and category from item_name\r\n          this.stockItems = data.items.map(item => ({\r\n            id: item.item_id, // Use item_id from the API response\r\n            name: item.item_name,\r\n            category: item.category,\r\n            quantity: item.quantity,\r\n            min_stock_level: item.min_stock_level\r\n          }));\r\n          \r\n          // Update unique categories\r\n          this.uniqueCategories = [...new Set(this.stockItems.map(item => item.category))];\r\n          console.log('Processed stock items:', this.stockItems); // Debug log\r\n        } else {\r\n          console.error('Invalid data format received:', data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching stock items:', error);\r\n      }\r\n    },\r\n\r\n    getStockStatus(item) {\r\n      if (item.quantity === 0) return 'Disabled (Out of Stock)';\r\n      if (item.quantity >= 999999) return 'Enabled (Unlimited)';\r\n      if (item.quantity <= item.min_stock_level) return 'Low Stock';\r\n      return 'In Stock';\r\n    },\r\n\r\n    getStockStatusClass(item) {\r\n      if (item.quantity === 0) return 'status-disabled';\r\n      if (item.quantity >= 999999) return 'status-enabled';\r\n      if (item.quantity <= item.min_stock_level) return 'status-low';\r\n      return 'status-ok';\r\n    },\r\n\r\n    openStockUpdateModal(item) {\r\n      console.log('Opening modal for item:', item); // Debug log\r\n      this.selectedItem = item;\r\n      this.showStockUpdateModal = true;\r\n      this.stockUpdateQuantity = 0;\r\n      this.stockUpdateAction = 'add';\r\n      this.stockUpdateReason = '';\r\n    },\r\n\r\n    closeStockUpdateModal() {\r\n      this.showStockUpdateModal = false;\r\n      this.selectedItem = null;\r\n      this.stockUpdateQuantity = 0;\r\n      this.stockUpdateReason = '';\r\n    },\r\n\r\n    async submitStockUpdate() {\r\n      // Validate required fields\r\n      if (!this.selectedItem || !this.selectedItem.id) {\r\n        alert('No item selected');\r\n        return;\r\n      }\r\n\r\n      if (!this.stockUpdateAction) {\r\n        alert('Please select an action');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        let requestBody = {};\r\n        \r\n        // Handle different action types\r\n        if (this.stockUpdateAction === 'disabled') {\r\n          // For disabled, set quantity to 0 and use 'set' action\r\n          requestBody = {\r\n            action: 'set',\r\n            quantity: 0,\r\n            reason: this.stockUpdateReason || 'Disabled - Out of Stock'\r\n          };\r\n        } else if (this.stockUpdateAction === 'enabled') {\r\n          // For enabled, set a special value to indicate unlimited\r\n          requestBody = {\r\n            action: 'set',\r\n            quantity: 999999, // Very large number to represent unlimited\r\n            reason: this.stockUpdateReason || 'Enabled - Unlimited Orders'\r\n          };\r\n        } else {\r\n          // For regular actions (add, subtract, set)\r\n          if (!this.stockUpdateQuantity || this.stockUpdateQuantity <= 0) {\r\n            alert('Please enter a valid quantity (greater than 0)');\r\n            return;\r\n          }\r\n\r\n          // Additional validation for subtract action\r\n          if (this.stockUpdateAction === 'subtract' && this.stockUpdateQuantity > this.selectedItem.quantity) {\r\n            alert('Cannot remove more than current stock');\r\n            return;\r\n          }\r\n          \r\n          requestBody = {\r\n            action: this.stockUpdateAction,\r\n            quantity: parseInt(this.stockUpdateQuantity),\r\n            reason: this.stockUpdateReason || 'Stock update'\r\n          };\r\n        }\r\n\r\n        console.log('Sending request:', requestBody);\r\n\r\n        const response = await fetch(`http://localhost:8000/api/stocks/${this.selectedItem.id}/update`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestBody)\r\n        });\r\n\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(data.detail || 'Failed to update stock');\r\n        }\r\n\r\n        if (data.success) {\r\n          alert('Stock updated successfully!');\r\n          this.closeStockUpdateModal();\r\n          await this.fetchStockItems(); // Refresh the stock list\r\n        } else {\r\n          throw new Error(data.message || 'Failed to update stock');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating stock:', error);\r\n        alert(error.message || 'Failed to update stock. Please try again.');\r\n      }\r\n    },\r\n\r\n    initWebSocket() {\r\n      // Use the same host as the API\r\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\r\n      \r\n      // Close existing connection if it exists\r\n      if (this.ws) {\r\n        try {\r\n          this.ws.close();\r\n        } catch (e) {\r\n          console.error(\"Error closing existing WebSocket:\", e);\r\n        }\r\n      }\r\n      \r\n      console.log('Initializing WebSocket connection...');\r\n      this.ws = new WebSocket(wsUrl);\r\n      \r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket connected');\r\n        this.wsConnected = true;\r\n        \r\n        // Set up a periodic ping to keep the connection alive\r\n        if (this.pingInterval) clearInterval(this.pingInterval);\r\n        this.pingInterval = setInterval(() => {\r\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n            this.ws.send(JSON.stringify({ type: 'ping' }));\r\n          }\r\n        }, 30000); // ping every 30 seconds\r\n      };\r\n      \r\n      this.ws.onmessage = async (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('WebSocket message received:', data);\r\n\r\n          if (data.type === 'new_order') {\r\n            // Handle new order\r\n            if (data.order.status === 'pending') {\r\n              // Add the new order to the orders array\r\n              this.orders.push(data.order);\r\n              \r\n              // Re-sort the orders array by ID in ascending order\r\n              this.orders.sort((a, b) => {\r\n                const idA = parseInt(a.id);\r\n                const idB = parseInt(b.id);\r\n                return idA - idB; // Sort in ascending order (lower IDs first)\r\n              });\r\n            }\r\n          } else if (data.type === 'order_status_update') {\r\n            // Handle order status update\r\n            if (data.status !== 'pending') {\r\n              this.orders = this.orders.filter(order => order.id !== data.order_id);\r\n              \r\n              // Remove from orderReadyStatus if it exists\r\n              if (this.orderReadyStatus[data.order_id]) {\r\n                delete this.orderReadyStatus[data.order_id];\r\n                // Update localStorage\r\n                localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n              }\r\n            }\r\n          } else if (data.type === 'admin_notification') {\r\n            // Handle customer responses to order adjustments\r\n            if (data.action === 'adjustment_response') {\r\n              // Process the customer's response to an order adjustment\r\n              const notification = data.notification;\r\n              const orderId = notification.orderId;\r\n              \r\n              if (notification.message.includes('APPROVED')) {\r\n                // Find the order and update it with adjusted items\r\n                const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n                if (orderIndex !== -1) {\r\n                  // Update the order with the adjusted items and remove pending approval flag\r\n                  const updatedOrder = {\r\n                    ...this.orders[orderIndex],\r\n                    items: notification.items,\r\n                    isPendingApproval: false // Remove the pending approval flag\r\n                  };\r\n                  \r\n                  // Update using Vue 3 reactivity \r\n                  this.orders = [\r\n                    ...this.orders.slice(0, orderIndex),\r\n                    updatedOrder,\r\n                    ...this.orders.slice(orderIndex + 1)\r\n                  ];\r\n                  \r\n                  // Show success notification\r\n                  this.notificationMessage = `Customer has approved order adjustments for Order #${orderId}`;\r\n                  this.notificationClass = \"open-notification\";\r\n                  this.showNotification();\r\n                }\r\n              } else if (notification.message.includes('DECLINED')) {\r\n                // Remove the order from the list if customer declined\r\n                this.orders = this.orders.filter(o => o.id !== orderId);\r\n                \r\n                // Show declined notification\r\n                this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\r\n                this.notificationClass = \"closed-notification\";\r\n                this.showNotification();\r\n              }\r\n              \r\n              // Mark the notification as processed\r\n              notification.processed = true;\r\n              \r\n              // Update the notification in localStorage\r\n              const adminNotificationsKey = 'user_notifications_Admin';\r\n              let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\r\n              \r\n              // Find and update the processed notification\r\n              const notificationIndex = adminNotifications.findIndex(n => \r\n                n.isAdminNotification && n.orderId === orderId && !n.processed\r\n              );\r\n              \r\n              if (notificationIndex !== -1) {\r\n                adminNotifications[notificationIndex].processed = true;\r\n                localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\r\n              }\r\n            }\r\n          } else if (data.type === 'customer_approval') {\r\n            // Direct customer approval handling for real-time updates\r\n            const { orderId, approved } = data;\r\n            \r\n            if (approved) {\r\n              console.log(`CRITICAL FIX: Customer approved order #${orderId} - handling the single-order case specially`);\r\n              \r\n              // Check if this is the single-order case (the problematic case)\r\n              const isSingleOrder = this.orders.length === 1;\r\n              \r\n              // Always try direct DOM manipulation first\r\n              try {\r\n                const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\r\n                if (orderElement) {\r\n                  console.log(\"Found order element in DOM, applying direct DOM updates\");\r\n                  \r\n                  // Remove the pending approval class and add all styling inline\r\n                  orderElement.classList.remove('order-pending-approval');\r\n                  orderElement.style.backgroundColor = \"#ffffff\";\r\n                  orderElement.style.border = \"2px solid #ddd\";\r\n                  orderElement.style.boxShadow = \"0 2px 5px rgba(0, 0, 0, 0.1)\";\r\n                  \r\n                  // Hide the PENDING APPROVAL label\r\n                  const style = document.createElement('style');\r\n                  style.id = `fix-order-${orderId}`;\r\n                  style.textContent = `\r\n                    .order-item[data-order-id=\"${orderId}\"]::before {\r\n                      display: none !important;\r\n                    }\r\n                    .order-item[data-order-id=\"${orderId}\"] h3 {\r\n                      color: #333 !important;\r\n                    }\r\n                    .order-item[data-order-id=\"${orderId}\"] .order-total {\r\n                      color: #333 !important;\r\n                    }\r\n                  `;\r\n                  document.head.appendChild(style);\r\n                  \r\n                  // Update the status text\r\n                  const statusParagraphs = orderElement.querySelectorAll('p');\r\n                  for (const paragraph of statusParagraphs) {\r\n                    if (paragraph.innerHTML.includes('Status:')) {\r\n                      paragraph.innerHTML = '<strong>Status:</strong> pending';\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n                \r\n                // For the single-order case, recreate the entire orders container\r\n                if (isSingleOrder) {\r\n                  console.log(\"Single order detected - using special handling\");\r\n                  \r\n                  // 1. Get the order container\r\n                  const ordersContainer = document.querySelector('.orders-container');\r\n                  if (!ordersContainer) {\r\n                    console.error(\"Orders container not found\");\r\n                    return;\r\n                  }\r\n                  \r\n                  // 2. Find the order in our data\r\n                  const order = this.orders.find(o => o.id === orderId);\r\n                  if (!order) {\r\n                    console.error(\"Order not found in data\");\r\n                    return;\r\n                  }\r\n                  \r\n                  // 3. Create an updated version of the order without pending approval\r\n                  const updatedOrder = { ...order, isPendingApproval: false };\r\n                  \r\n                  // 4. Replace the entire orders list HTML\r\n                  const ordersList = ordersContainer.querySelector('.orders-list');\r\n                  if (!ordersList) {\r\n                    console.error(\"Orders list not found\");\r\n                    return;\r\n                  }\r\n                  \r\n                  // Create a new order item element \r\n                  const newOrderItemHTML = `\r\n                    <div class=\"order-item\" data-order-id=\"${updatedOrder.id}\">\r\n                      <div class=\"order-details\">\r\n                        <h3>Order ID: ${updatedOrder.id}</h3>\r\n                        <p><strong>Customer:</strong> ${updatedOrder.customer_name}</p>\r\n                        <p><strong>Status:</strong> ${updatedOrder.status}</p>\r\n                        <p><strong>Time Order:</strong> ${this.timeAgo(updatedOrder.created_at)}</p>\r\n                        \r\n                        <div class=\"items-section\">\r\n                          <strong>Items:</strong>\r\n                          <ul>\r\n                            ${updatedOrder.items.map(item => \r\n                              `<li>${item.name} - ₱${item.price} x ${item.quantity}</li>`\r\n                            ).join('')}\r\n                          </ul>\r\n                        </div>\r\n                        \r\n                        <div class=\"order-total\">\r\n                          <p><strong>Total Amount: ₱${this.calculateOrderTotal(updatedOrder.items)}</strong></p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div class=\"order-actions\">\r\n                        <button \r\n                          onclick=\"document.dispatchEvent(new CustomEvent('completion-confirmation', {detail: {orderId: ${updatedOrder.id}}}))\"\r\n                          class=\"mark-completed-btn small-btn ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\"\r\n                          ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\r\n                        >\r\n                          Mark as Completed\r\n                        </button>\r\n                        \r\n                        <button \r\n                          onclick=\"document.dispatchEvent(new CustomEvent('order-ready', {detail: {orderId: ${updatedOrder.id}, customerName: '${updatedOrder.customer_name}'}}))\"\r\n                          class=\"order-ready-btn small-btn\"\r\n                        >\r\n                          Order Ready 🔔\r\n                        </button>\r\n                        \r\n                        <button \r\n                          onclick=\"document.dispatchEvent(new CustomEvent('decline-dialog', {detail: {orderId: ${updatedOrder.id}}}))\"\r\n                          class=\"decline-btn\"\r\n                        >\r\n                          Decline\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  `;\r\n                  \r\n                  // Replace the content\r\n                  ordersList.innerHTML = newOrderItemHTML;\r\n                  \r\n                  // Setup event listeners for our custom events\r\n                  if (!this._customListenersAdded) {\r\n                    document.addEventListener('completion-confirmation', (e) => {\r\n                      this.showCompletionConfirmation(e.detail.orderId);\r\n                    });\r\n                    \r\n                    document.addEventListener('order-ready', (e) => {\r\n                      this.sendOrderReadyNotification(e.detail.orderId, e.detail.customerName, updatedOrder.items);\r\n                    });\r\n                    \r\n                    document.addEventListener('decline-dialog', (e) => {\r\n                      // Find the order again since we need the full object\r\n                      const order = this.orders.find(o => o.id === e.detail.orderId);\r\n                      if (order) {\r\n                        this.openDeclineDialog(order);\r\n                      }\r\n                    });\r\n                    \r\n                    this._customListenersAdded = true;\r\n                  }\r\n                  \r\n                  // Also update our Vue data model\r\n                  this.orders = [updatedOrder];\r\n                }\r\n              } catch (error) {\r\n                console.error(\"Error during direct DOM manipulation:\", error);\r\n              }\r\n              \r\n              // Always show notification to admin\r\n              this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\r\n              this.notificationClass = \"open-notification\";\r\n              this.showNotification();\r\n              \r\n              // Update the database in the background\r\n              fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\r\n                method: \"PUT\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                  status: \"pending\",\r\n                  isPendingApproval: false\r\n                })\r\n              })\r\n              .then(response => response.json())\r\n              .then(data => {\r\n                console.log(\"Database updated to reflect customer approval:\", data);\r\n                \r\n                // Always fetch all orders as a fallback\r\n                setTimeout(() => {\r\n                  this.fetchPendingOrders();\r\n                }, 1000);\r\n              })\r\n              .catch(err => {\r\n                console.error(\"Error updating database after customer approval:\", err);\r\n                \r\n                // Force reload as last resort for error cases\r\n                if (isSingleOrder) {\r\n                  setTimeout(() => location.reload(), 1000);\r\n                }\r\n              });\r\n            } else {\r\n              // If declined, handle in Vue since that part seems to work\r\n              this.orders = this.orders.filter(o => o.id !== orderId);\r\n              \r\n              // Show notification about the decline\r\n              this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\r\n              this.notificationClass = \"closed-notification\";\r\n              this.showNotification();\r\n            }\r\n          } else if (data.type === 'stock_update') {\r\n            // Handle stock update\r\n            const stockItem = this.stockItems.find(item => item.id === data.item_id);\r\n            if (stockItem) {\r\n              stockItem.quantity = data.new_quantity;\r\n              stockItem.min_stock_level = data.min_stock_level;\r\n              \r\n              // Update unique categories if needed\r\n              if (!this.uniqueCategories.includes(data.category)) {\r\n                this.uniqueCategories.push(data.category);\r\n              }\r\n            }\r\n            // Refresh stock items to ensure all data is up to date\r\n            await this.fetchStockItems();\r\n          } else if (data.type === 'menu_update') {\r\n            // Handle menu updates (new items, edited items, or deleted items)\r\n            await this.fetchStockItems(); // Refresh stock items when menu changes\r\n          } else if (data.type === 'category_update') {\r\n            // Handle category updates\r\n            await this.fetchStockItems(); // Refresh stock items when categories change\r\n            \r\n            // Update unique categories list\r\n            if (data.action === 'add' && data.category && data.category.name) {\r\n              if (!this.uniqueCategories.includes(data.category.name)) {\r\n                this.uniqueCategories.push(data.category.name);\r\n              }\r\n            } else if (data.action === 'update' && data.category) {\r\n              // Replace old category name with new one\r\n              const index = this.uniqueCategories.indexOf(data.category.old_name);\r\n              if (index !== -1) {\r\n                this.uniqueCategories[index] = data.category.name;\r\n              } else if (!this.uniqueCategories.includes(data.category.name)) {\r\n                this.uniqueCategories.push(data.category.name);\r\n              }\r\n              \r\n              // Update selected category if it was renamed\r\n              if (this.selectedCategory === data.category.old_name) {\r\n                this.selectedCategory = data.category.name;\r\n              }\r\n            } else if (data.action === 'delete' && data.category_name) {\r\n              // Remove deleted category\r\n              this.uniqueCategories = this.uniqueCategories.filter(cat => cat !== data.category_name);\r\n              \r\n              // Reset selected category if it was deleted\r\n              if (this.selectedCategory === data.category_name) {\r\n                this.selectedCategory = '';\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing WebSocket message:', error);\r\n        }\r\n      };\r\n      \r\n      this.ws.onclose = () => {\r\n        console.log('WebSocket disconnected');\r\n        this.wsConnected = false;\r\n        // Try to reconnect after 5 seconds\r\n        setTimeout(() => {\r\n          this.initWebSocket();\r\n        }, 5000);\r\n      };\r\n      \r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.wsConnected = false;\r\n      };\r\n    },\r\n\r\n    // Handle localStorage changes for admin notifications\r\n    handleStorageEvent(event) {\r\n      // Check if the storage event is for admin notifications\r\n      if (event.key === 'user_notifications_Admin') {\r\n        // Process new admin notifications\r\n        this.processAdminNotifications();\r\n      }\r\n    },\r\n    \r\n    // Process admin notifications from localStorage\r\n    processAdminNotifications() {\r\n      // Get admin notifications \r\n      const adminNotificationsKey = 'user_notifications_Admin';\r\n      const adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\r\n      \r\n      // Check for unprocessed customer response notifications\r\n      const unprocessedNotifications = adminNotifications.filter(n => \r\n        n.isAdminNotification && \r\n        (n.message.includes('APPROVED') || n.message.includes('DECLINED')) && \r\n        !n.processed\r\n      );\r\n      \r\n      // Process each notification\r\n      unprocessedNotifications.forEach(notification => {\r\n        const orderId = notification.orderId;\r\n        \r\n        if (notification.message.includes('APPROVED')) {\r\n          // If customer approved adjustments\r\n          // Find the order and update it\r\n          const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n          \r\n          if (orderIndex !== -1) {\r\n            // Update the order with adjusted items\r\n            this.orders[orderIndex].items = notification.items;\r\n            \r\n            // Mark the notification as processed\r\n            notification.processed = true;\r\n          }\r\n        } else if (notification.message.includes('DECLINED')) {\r\n          // If customer declined, remove the order\r\n          this.orders = this.orders.filter(o => o.id !== orderId);\r\n          \r\n          // Mark the notification as processed\r\n          notification.processed = true;\r\n        }\r\n      });\r\n      \r\n      // Update the processed notifications in localStorage\r\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\r\n      \r\n      // Show notification to admin about the response\r\n      if (unprocessedNotifications.length > 0) {\r\n        const lastNotification = unprocessedNotifications[unprocessedNotifications.length - 1];\r\n        this.notificationMessage = lastNotification.message;\r\n        this.notificationClass = lastNotification.message.includes('APPROVED') ? \r\n          'open-notification' : 'closed-notification';\r\n        this.showNotification();\r\n      }\r\n    },\r\n    \r\n    // Fetch pending orders - wrapper for fetchOrders for consistency\r\n    fetchPendingOrders() {\r\n      this.fetchOrders();\r\n    },\r\n    \r\n    // Connect to WebSocket - renamed from initWebSocket for consistency\r\n    connectWebSocket() {\r\n      this.initWebSocket();\r\n    },\r\n\r\n    // Add this method to force refresh orders after WebSocket updates\r\n    forceRefreshOrder(orderId) {\r\n      console.log(`Forcing refresh for order #${orderId}, current orders count: ${this.orders.length}`);\r\n      \r\n      // Find the order that needs refreshing\r\n      const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n      \r\n      if (orderIndex !== -1) {\r\n        // Fetch the latest order data from the server to ensure it's up to date\r\n        fetch(`http://127.0.0.1:8000/orders/${orderId}`)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if (data) {\r\n              console.log('Fetched fresh order data for real-time update:', data);\r\n              \r\n              // Create a fresh order object with the latest data\r\n              const updatedOrder = {\r\n                ...data,\r\n                isPendingApproval: data.isPendingApproval || false // Ensure the flag is set correctly\r\n              };\r\n              \r\n              // Special handling for single order\r\n              if (this.orders.length === 1) {\r\n                this.orders = [updatedOrder];\r\n              } else {\r\n                // Replace the order in the array using Vue reactivity\r\n                this.orders = [\r\n                  ...this.orders.slice(0, orderIndex),\r\n                  updatedOrder,\r\n                  ...this.orders.slice(orderIndex + 1)\r\n                ];\r\n              }\r\n              \r\n              // Force the component to re-render\r\n              this.$forceUpdate();\r\n              \r\n              console.log('Order updated successfully in UI:', updatedOrder);\r\n              \r\n              // If order is approved but UI doesn't update, try refreshing all orders\r\n              if (!updatedOrder.isPendingApproval) {\r\n                setTimeout(() => {\r\n                  this.fetchPendingOrders();\r\n                }, 300);\r\n              }\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error refreshing order:', error);\r\n            // Fallback to refreshing all orders on error\r\n            this.fetchPendingOrders();\r\n          });\r\n      } else {\r\n        console.log(`Order #${orderId} not found in current orders, refreshing all orders`);\r\n        // If the order isn't found in the current array, refresh all orders\r\n        this.fetchPendingOrders();\r\n      }\r\n    },\r\n\r\n    // Add direct DOM manipulation method to fix pending approval status when reactivity fails\r\n    forceFixPendingUI(orderId) {\r\n      console.log(`CRITICAL FIX: Using direct DOM manipulation to fix UI for order #${orderId}`);\r\n      \r\n      try {\r\n        // Find the order element\r\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\r\n        if (!orderElement) {\r\n          console.log(\"Order element not found for direct fix\");\r\n          return false;\r\n        }\r\n        \r\n        // Remove the critical class that causes the red border\r\n        orderElement.classList.remove('order-pending-approval');\r\n        \r\n        // Add a success indicator class\r\n        orderElement.classList.add('order-approved-success');\r\n        \r\n        // Find and update status text\r\n        const statusParagraphs = orderElement.querySelectorAll('p');\r\n        for (const paragraph of statusParagraphs) {\r\n          if (paragraph.textContent.includes(\"Status:\")) {\r\n            paragraph.innerHTML = '<strong>Status:</strong> pending';\r\n            console.log('Updated status text');\r\n          }\r\n        }\r\n        \r\n        // Remove the \"PENDING APPROVAL\" label\r\n        // Create a specific style for this order element\r\n        const styleId = `order-${orderId}-fix`;\r\n        let styleElement = document.getElementById(styleId);\r\n        \r\n        if (!styleElement) {\r\n          styleElement = document.createElement('style');\r\n          styleElement.id = styleId;\r\n          document.head.appendChild(styleElement);\r\n        }\r\n        \r\n        styleElement.textContent = `\r\n          .order-item[data-order-id=\"${orderId}\"]::before {\r\n            display: none !important;\r\n          }\r\n          .order-item[data-order-id=\"${orderId}\"].order-pending-approval {\r\n            background-color: #ffffff !important;\r\n            border: 2px solid #ddd !important;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;\r\n          }\r\n          .order-item[data-order-id=\"${orderId}\"] h3 {\r\n            color: #333 !important;\r\n          }\r\n          .order-item[data-order-id=\"${orderId}\"] .order-total {\r\n            color: #333 !important;\r\n          }\r\n          .order-approved-success {\r\n            animation: successPulse 1s;\r\n          }\r\n          @keyframes successPulse {\r\n            0% { background-color: #e6ffe6; }\r\n            50% { background-color: #ccffcc; }\r\n            100% { background-color: #ffffff; }\r\n          }\r\n        `;\r\n        \r\n        console.log(\"Direct DOM manipulation complete - critical CSS override applied\");\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Error during direct DOM manipulation:\", error);\r\n        return false;\r\n      }\r\n    },\r\n\r\n    // Completely bypass Vue for this critical update\r\n    handleApprovalBypassVue(orderId) {\r\n      // Force a direct manipulation of the DOM \r\n      const fixed = this.forceFixPendingUI(orderId);\r\n      \r\n      // If direct manipulation succeeded, set a flag to prevent further attempts\r\n      if (fixed) {\r\n        // Store fixed orders in localStorage to avoid repeated fixes\r\n        const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\r\n        if (!fixedOrders.includes(orderId)) {\r\n          fixedOrders.push(orderId);\r\n          localStorage.setItem('fixedApprovedOrders', JSON.stringify(fixedOrders));\r\n        }\r\n        \r\n        // Show feedback to admin\r\n        this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\r\n        this.notificationClass = \"open-notification\";\r\n        this.showNotification();\r\n      }\r\n      \r\n      // Force refresh orders after a short delay\r\n      setTimeout(() => {\r\n        this.fetchPendingOrders();\r\n      }, 1000);\r\n    },\r\n\r\n    toggleChangePassword() {\r\n      this.showChangePasswordModal = !this.showChangePasswordModal;\r\n      if (this.isSidebarOpen && window.innerWidth <= 768) {\r\n        this.toggleSidebar();\r\n      }\r\n    },\r\n\r\n    updatePassword() {\r\n      // Check if current password is correct\r\n      const currentAdminPassword = localStorage.getItem('adminPassword') || 'admin123';\r\n      \r\n      // Reset message\r\n      this.passwordMessage = '';\r\n      this.passwordMessageType = '';\r\n      \r\n      // Validate current password\r\n      if (this.passwordData.currentPassword !== currentAdminPassword) {\r\n        this.passwordMessage = 'Current password is incorrect';\r\n        this.passwordMessageType = 'error';\r\n        return;\r\n      }\r\n      \r\n      // Validate new password\r\n      if (this.passwordData.newPassword.length < 6) {\r\n        this.passwordMessage = 'New password must be at least 6 characters';\r\n        this.passwordMessageType = 'error';\r\n        return;\r\n      }\r\n      \r\n      // Validate password confirmation\r\n      if (this.passwordData.newPassword !== this.passwordData.confirmPassword) {\r\n        this.passwordMessage = 'New passwords do not match';\r\n        this.passwordMessageType = 'error';\r\n        return;\r\n      }\r\n      \r\n      // Update the password in localStorage\r\n      localStorage.setItem('adminPassword', this.passwordData.newPassword);\r\n      \r\n      // Show success message\r\n      this.passwordMessage = 'Password updated successfully!';\r\n      this.passwordMessageType = 'success';\r\n      \r\n      // Clear form after a delay\r\n      setTimeout(() => {\r\n        this.passwordData = {\r\n          currentPassword: '',\r\n          newPassword: '',\r\n          confirmPassword: ''\r\n        };\r\n        \r\n        // Close the modal after 2 seconds\r\n        setTimeout(() => {\r\n          this.toggleChangePassword();\r\n        }, 1000);\r\n      }, 1000);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchPendingOrders();\r\n    // Set up automatic refresh every 60 seconds\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchPendingOrders();\r\n    }, 60000);\r\n    \r\n    // Check localStorage for cafe status\r\n    const storedCafeStatus = localStorage.getItem('isCafeOpen');\r\n    if (storedCafeStatus !== null) {\r\n      this.isCafeOpen = storedCafeStatus === 'true';\r\n    }\r\n    \r\n    // Load orderReadyStatus from localStorage if available\r\n    const savedOrderReadyStatus = localStorage.getItem('orderReadyStatus');\r\n    if (savedOrderReadyStatus) {\r\n      this.orderReadyStatus = JSON.parse(savedOrderReadyStatus);\r\n    }\r\n    \r\n    // Event listener for customer approval/decline responses\r\n    window.addEventListener('storage', this.handleStorageEvent);\r\n    \r\n    // Connect to WebSocket\r\n    this.connectWebSocket();\r\n    \r\n    // Add a global document event listener for a custom event we'll dispatch on customer approval\r\n    document.addEventListener('customer-approval', (event) => {\r\n      if (event.detail && event.detail.orderId) {\r\n        console.log('Got customer-approval event at document level:', event.detail);\r\n        this.handleApprovalBypassVue(event.detail.orderId);\r\n      }\r\n    });\r\n    \r\n    // Dispatch a custom approval event if we have any approvals stored in localStorage\r\n    // This helps sync UI state on page load\r\n    const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\r\n    fixedOrders.forEach(orderId => {\r\n      setTimeout(() => {\r\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"].order-pending-approval`);\r\n        if (orderElement) {\r\n          console.log(`Found previously fixed order #${orderId} still showing pending, re-fixing`);\r\n          this.forceFixPendingUI(orderId);\r\n        }\r\n      }, 1000);\r\n    });\r\n  },\r\n\r\n  beforeUnmount() {\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    \r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n    }\r\n    \r\n    if (this.ws) {\r\n      this.ws.close();\r\n    }\r\n    \r\n    // Remove event listeners\r\n    window.removeEventListener('storage', this.handleStorageEvent);\r\n    document.removeEventListener('customer-approval', this.handleApprovalBypassVue);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Base styles for all screen sizes */\r\n.notifications-page {\r\n  height: 100vh;\r\n  display: flex;\r\n  background-color: #ffffff;\r\n}\r\n\r\n/* Top Bar Styles to match dashboard */\r\n.top-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  background-image: linear-gradient(to right, #E54F70, #ed9598);\r\n  padding: 0 15px;\r\n  height: 60px;\r\n  width: 100%;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 100;\r\n}\r\n\r\n.content.shifted .top-bar {\r\n  left: 300px; /* Adjust left position when sidebar is open */\r\n  width: calc(100% - 300px); /* Adjust width when sidebar is open */\r\n}\r\n\r\n.content-below-top-bar {\r\n  margin-top: 70px; /* Add margin to account for the fixed top bar */\r\n  padding: 10px 20px;\r\n}\r\n\r\n.centered-content {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding: 0 0 0 5px; /* Reduce left padding to move button closer to edge */\r\n  height: 100%;\r\n}\r\n\r\n.logo-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.cafe-title {\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* Menu Button */\r\n.menu-button {\r\n  position: fixed;\r\n  top: 15px;\r\n  left: 15px;\r\n  z-index: 300;\r\n  background: #d12f7a;\r\n  color: white;\r\n  padding: 12px 15px;\r\n  font-size: 20px;\r\n  border: none;\r\n  border-radius: 12px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  display: none; /* Hide the floating button */\r\n}\r\n\r\n.menu-button:hover {\r\n  background: #b82d67;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.menu-icon-container {\r\n  position: relative;\r\n  display: inline-block;\r\n  font-size: 24px;\r\n}\r\n\r\n/* Sidebar */\r\n.sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: -300px;\r\n  height: 100vh;\r\n  width: 300px;\r\n  background: #f5f5f5;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 0;\r\n  box-shadow: 4px 0 15px rgba(0, 0, 0, 0.1);\r\n  color: #333;\r\n}\r\n\r\n.sidebar.open {\r\n  left: 0;\r\n}\r\n\r\n.close-sidebar {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 15px;\r\n  background: rgba(209, 47, 122, 0.1);\r\n  border: none;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  color: #d12f7a;\r\n  padding: 8px 12px;\r\n  border-radius: 50%;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.close-sidebar:hover {\r\n  background: rgba(209, 47, 122, 0.2);\r\n  transform: rotate(90deg);\r\n}\r\n\r\n/* User Profile Section */\r\n.user-profile-section {\r\n  padding: 30px 20px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  background: rgba(209, 47, 122, 0.1);\r\n  border-radius: 15px;\r\n  margin: 0 15px 20px;\r\n}\r\n\r\n.user-profile-section h3 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n  font-size: 28px;\r\n  font-weight: 600;\r\n  text-shadow: none;\r\n}\r\n\r\n/* Utility Section */\r\n.utility-section {\r\n  padding: 15px;\r\n  margin: 0 15px;\r\n  background: white;\r\n  border-radius: 15px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.utility-button {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 14px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #333;\r\n  font-size: 16px;\r\n  text-decoration: none;\r\n  transition: all 0.3s ease;\r\n  border-radius: 10px;\r\n  margin-bottom: 8px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.utility-button:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.utility-button:hover {\r\n  background: rgba(209, 47, 122, 0.1);\r\n  transform: translateX(5px);\r\n}\r\n\r\n.utility-button i {\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #d12f7a;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  color: white;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.utility-button:hover i {\r\n  transform: rotate(10deg);\r\n}\r\n\r\n.utility-button span {\r\n  font-weight: 500;\r\n}\r\n\r\n.utility-button.logout {\r\n  background: rgba(244, 67, 54, 0.1);\r\n  color: #f44336;\r\n  margin-top: 8px;\r\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.utility-button.logout i {\r\n  background: #f44336;\r\n}\r\n\r\n.utility-button.logout:hover {\r\n  background: rgba(244, 67, 54, 0.15);\r\n}\r\n\r\n/* Cafe Status Section */\r\n.cafe-status-section {\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.cafe-toggle-btn {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n  border: 2px solid #d12f7a;\r\n  cursor: pointer;\r\n  border-radius: 30px;\r\n  transition: all 0.3s ease;\r\n  font-weight: 600;\r\n  width: 100%;\r\n  background: white;\r\n  color: #d12f7a;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.cafe-toggle-btn::before {\r\n  content: '🏪';\r\n  font-size: 20px;\r\n}\r\n\r\n.cafe-toggle-btn:hover {\r\n  background: rgba(209, 47, 122, 0.1);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.cafe-toggle-btn.open-btn {\r\n  border-color: #4CAF50;\r\n  color: #4CAF50;\r\n}\r\n\r\n.cafe-toggle-btn.open-btn::before {\r\n  content: '✅';\r\n}\r\n\r\n.cafe-toggle-btn.closed-btn {\r\n  border-color: #f44336;\r\n  color: #f44336;\r\n}\r\n\r\n.cafe-toggle-btn.closed-btn::before {\r\n  content: '🚫';\r\n}\r\n\r\n/* Utility Divider */\r\n.utility-divider {\r\n  border: none;\r\n  height: 1px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  margin: 15px;\r\n  border-radius: 1px;\r\n}\r\n\r\n/* Main Content Area */\r\n.content {\r\n  flex: 1;\r\n  margin-left: 0;\r\n  padding: 20px;\r\n  transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.content.shifted {\r\n  margin-left: 300px;\r\n}\r\n\r\n/* Overlay */\r\n.overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  backdrop-filter: blur(4px);\r\n  z-index: 999;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.overlay.visible {\r\n  opacity: 1;\r\n}\r\n\r\n/* Search Bar */\r\n.search-bar {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 20px auto;\r\n  width: 90%;\r\n  max-width: 400px;\r\n  background-color: transparent;\r\n  border-radius: 30px;\r\n  border: 2px solid #d12f7a;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  font-size: 16px;\r\n  border: none;\r\n  outline: none;\r\n  background-color: transparent;\r\n  color: #333;\r\n  border-radius: 30px;\r\n}\r\n\r\n/* Orders Container */\r\n.orders-container {\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.orders-container h2 {\r\n  text-align: center;\r\n  color: #d12f7a;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.orders-list {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  gap: 20px;\r\n  width: 100%;\r\n}\r\n\r\n/* Order Item */\r\n.order-item {\r\n  background-color: #f8d2e4;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: auto;\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n\r\n.order-item:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.order-details h3 {\r\n  color: #d12f7a;\r\n  margin-top: 0;\r\n}\r\n\r\n.order-details p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.items-section {\r\n  margin-top: 15px; \r\n  flex-grow: 1; /* Allow the items section to expand and adapt */\r\n}\r\n\r\n.order-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  margin-top: 15px;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding-left: 20px;\r\n  margin: 0;\r\n}\r\n\r\n.order-total {\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  color: #d12f7a;\r\n  text-align: center; /* Ensure it aligns nicely with the rest of the content */\r\n}\r\n\r\n/* Button styles */\r\nbutton.mark-completed-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\nbutton.mark-completed-btn:disabled,\r\nbutton.mark-completed-btn.disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\nbutton.mark-completed-btn:not(:disabled):hover {\r\n  background-color: #b82d67;\r\n}\r\n\r\n.order-ready-btn {\r\n  background-color: #4caf50; /* Green background for success */\r\n  color: white; /* White text */\r\n  padding: 8px 10px;\r\n  font-size: 14px;\r\n  border: none;\r\n  border-radius: 5px; /* Rounded corners */\r\n  cursor: pointer;\r\n  width: 100%;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\n.order-ready-btn:hover {\r\n  background-color: #45a049; /* Slightly darker green when hovered */\r\n  transform: translateY(-2px); /* Slight upward movement on hover */\r\n}\r\n\r\n.order-ready-btn:active {\r\n  background-color: #388e3c; /* Even darker green when clicked */\r\n  transform: translateY(0); /* Reset the movement after click */\r\n}\r\n\r\nbutton.decline-btn {\r\n  background-color: #f5a5a5;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\nbutton.decline-btn:hover {\r\n  background-color: #f17b7b;\r\n}\r\n\r\n/* Notification styles */\r\n.notification-popup,\r\n.notification-sent-popup {\r\n  position: fixed;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 15px 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\r\n  font-size: 18px;\r\n  min-width: 200px;\r\n  max-width: 90%;\r\n  z-index: 1000;\r\n  transition: opacity 0.3s ease, transform 0.3s ease;\r\n  opacity: 1;\r\n  text-align: center;\r\n}\r\n\r\n.notification-sent-popup {\r\n  background-color: rgb(82, 13, 45);\r\n  color: white;\r\n}\r\n\r\n.notification-popup.hide {\r\n  opacity: 0;\r\n  transform: translateX(-50%) translateY(-20px);\r\n}\r\n\r\n.notification-popup button,\r\n.notification-sent-popup button {\r\n  background-color: #fff;\r\n  color: #007bff;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.notification-popup button:hover,\r\n.notification-sent-popup button:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.notification-popup.open-notification {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.notification-popup.closed-notification {\r\n  background-color: red;\r\n  color: white;\r\n}\r\n\r\n.highlighted-order-details {\r\n  display: inline-block;\r\n  background-color: #f8d2e4;\r\n  color: #d12f7a;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  border: 2px solid #d12f7a;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.highlighted-order-details::before {\r\n  content: \"——— \";\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #d12f7a;\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  color: #d12f7a;\r\n  font-size: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.no-orders {\r\n  text-align: center;\r\n  margin: 30px 0;\r\n}\r\n\r\n.highlighted-time {\r\n  color: #d12f7a;\r\n  font-weight: bold;\r\n}\r\n\r\n.dark-mode .highlighted-time {\r\n  color: #f8d2e4;\r\n}\r\n\r\n.section-divider {\r\n  border-top: 1px solid #ddd;\r\n  margin: 30px 0;\r\n}\r\n\r\n/* Media Queries for Responsive Design */\r\n@media (max-width: 768px) {\r\n  .header {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .header-buttons {\r\n    order: 3;\r\n    width: 100%;\r\n    justify-content: center;\r\n  }\r\n  \r\n  h1 {\r\n    order: 1;\r\n    width: 100%;\r\n  }\r\n  \r\n  .order-record-button {\r\n    order: 2;\r\n    width: 100%;\r\n    max-width: 200px;\r\n  }\r\n  \r\n  .logout-button {\r\n    order: 4;\r\n    width: 100%;\r\n    max-width: 200px;\r\n  }\r\n  \r\n  .orders-list {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .notifications-page {\r\n    padding: 10px;\r\n  }\r\n  \r\n  .cafe-toggle-btn {\r\n    width: 180px;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .notification-popup,\r\n  .notification-sent-popup {\r\n    font-size: 16px;\r\n    padding: 10px 20px;\r\n  }\r\n  \r\n  .order-item {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .decline-container {\r\n    padding: 10px;\r\n  }\r\n  \r\n  .decline-buttons {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .decline-submit-btn,\r\n  .decline-cancel-btn {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* Menu Editor Modal Styles */\r\n.menu-editor-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1001;\r\n  overflow-y: auto;\r\n}\r\n\r\n.menu-editor-content {\r\n  background-color: white;\r\n  width: 90%;\r\n  max-width: 800px;\r\n  max-height: 90vh;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.menu-editor-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  background-color: #f8d2e4;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.menu-editor-header h2 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n}\r\n\r\n.close-modal-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #d12f7a;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n}\r\n\r\n.close-modal-btn:hover {\r\n  color: #b82d67;\r\n}\r\n\r\n.menu-editor-body {\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  max-height: calc(90vh - 70px); /* Subtract header height */\r\n}\r\n\r\n/* Media query adjustments for the modal */\r\n@media (max-width: 768px) {\r\n  .menu-editor-content {\r\n    width: 95%;\r\n    max-height: 95vh;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .menu-editor-header {\r\n    padding: 10px 15px;\r\n  }\r\n  \r\n  .menu-editor-body {\r\n    padding: 15px;\r\n  }\r\n}\r\n\r\n/* Completion Confirmation Popup Styles */\r\n.completion-confirmation-popup {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1002;\r\n}\r\n\r\n.completion-confirmation-content {\r\n  background-color: white;\r\n  padding: 25px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  text-align: center;\r\n  max-width: 400px;\r\n  width: 90%;\r\n}\r\n\r\n.completion-confirmation-content h3 {\r\n  color: #d12f7a;\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  font-size: 1.5em;\r\n}\r\n\r\n.completion-confirmation-content p {\r\n  margin-bottom: 20px;\r\n  font-size: 1.1em;\r\n  color: #333;\r\n}\r\n\r\n.confirmation-buttons {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 15px;\r\n}\r\n\r\n.confirm-yes-btn,\r\n.confirm-no-btn {\r\n  padding: 10px 25px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1.1em;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.confirm-yes-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n}\r\n\r\n.confirm-yes-btn:hover {\r\n  background-color: #b82d67;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.confirm-no-btn {\r\n  background-color: #f5a5a5;\r\n  color: white;\r\n}\r\n\r\n.confirm-no-btn:hover {\r\n  background-color: #f17b7b;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* Media query adjustments for the confirmation popup */\r\n@media (max-width: 480px) {\r\n  .completion-confirmation-content {\r\n    padding: 20px;\r\n    width: 85%;\r\n  }\r\n\r\n  .confirmation-buttons {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  .confirm-yes-btn,\r\n  .confirm-no-btn {\r\n    width: 100%;\r\n    padding: 12px;\r\n  }\r\n}\r\n\r\n/* Stock Management Modal Styles */\r\n.stock-manager-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1001;\r\n}\r\n\r\n.stock-manager-content {\r\n  background-color: white;\r\n  width: 90%;\r\n  max-width: 1000px;\r\n  max-height: 90vh;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.stock-manager-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  background-color: #f8d2e4;\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n}\r\n\r\n.stock-manager-header h2 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n}\r\n\r\n.stock-manager-body {\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.stock-search-bar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stock-table-container {\r\n  overflow-x: auto;\r\n}\r\n\r\n.stock-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\n.stock-table th,\r\n.stock-table td {\r\n  padding: 12px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.stock-table th {\r\n  background-color: #f8d2e4;\r\n  color: #d12f7a;\r\n}\r\n\r\n.status-out {\r\n  color: #f44336;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-low {\r\n  color: #ff9800;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-ok {\r\n  color: #4caf50;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-disabled {\r\n  color: #9e9e9e;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-enabled {\r\n  color: #2196f3;\r\n  font-weight: bold;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.update-stock-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 2px 4px rgba(209, 47, 122, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.update-stock-btn::before {\r\n  content: '📦';\r\n  font-size: 16px;\r\n}\r\n\r\n.update-stock-btn:hover {\r\n  background-color: #b82d67;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(209, 47, 122, 0.3);\r\n}\r\n\r\n.update-stock-btn:active {\r\n  transform: translateY(0);\r\n  box-shadow: 0 2px 4px rgba(209, 47, 122, 0.2);\r\n}\r\n\r\n.stock-update-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1002;\r\n}\r\n\r\n.stock-update-content {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  width: 90%;\r\n  max-width: 400px;\r\n}\r\n\r\n.stock-update-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.form-group label {\r\n  font-weight: bold;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.update-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n}\r\n\r\n.confirm-btn,\r\n.cancel-btn {\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.confirm-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f5a5a5;\r\n  color: white;\r\n}\r\n\r\n.low-stock {\r\n  color: #ff9800;\r\n  font-weight: bold;\r\n}\r\n\r\n.out-of-stock {\r\n  color: #f44336;\r\n  font-weight: bold;\r\n}\r\n\r\n.stock-filters {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 15px;\r\n  width: 100%;\r\n}\r\n\r\n.category-filter {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  min-width: 150px;\r\n  background-color: white;\r\n  cursor: pointer;\r\n}\r\n\r\n.category-filter:hover {\r\n  border-color: #d12f7a;\r\n}\r\n\r\n.dark-mode .category-filter {\r\n  background-color: #333;\r\n  color: white;\r\n  border-color: #555;\r\n}\r\n\r\n.dark-mode .category-filter:hover {\r\n  border-color: #f8c6d0;\r\n}\r\n\r\n/* Add styles for the new header menu button */\r\n.menu-button-header {\r\n  background: #d12f7a;\r\n  color: white;\r\n  padding: 8px 12px;\r\n  font-size: 18px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease-in-out;\r\n  margin-right: 15px;\r\n  margin-left: 0; /* Ensure no left margin */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.menu-button-header:hover {\r\n  background: #b82d67;\r\n}\r\n\r\n/* New styles for decline modal and order highlighting */\r\n.order-declined-state {\r\n  background-color: #ffe6e6 !important;\r\n  border: 2px solid #ff0000 !important;\r\n}\r\n\r\n.order-pending-approval {\r\n  background-color: #ffe6e6 !important;\r\n  border: 2px solid #ff0000 !important;\r\n  box-shadow: 0 4px 10px rgba(255, 0, 0, 0.2) !important;\r\n  position: relative;\r\n  transition: all 0.5s ease-in-out;\r\n}\r\n\r\n.order-pending-approval::before {\r\n  content: 'PENDING APPROVAL';\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: #ff0000;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  padding: 4px 8px;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.order-pending-approval h3 {\r\n  color: #ff0000 !important;\r\n}\r\n\r\n.order-pending-approval .order-details p {\r\n  color: #333 !important;\r\n}\r\n\r\n.order-pending-approval .order-total {\r\n  color: #ff0000 !important;\r\n  font-weight: bold;\r\n}\r\n\r\n.decline-modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.decline-modal-content {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  max-width: 600px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.decline-modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  border-bottom: 1px solid #eee;\r\n  background-color: #f8d2e4;\r\n}\r\n\r\n.decline-modal-header h3 {\r\n  margin: 0;\r\n  color: #d12f7a;\r\n}\r\n\r\n.decline-modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.form-group textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  resize: vertical;\r\n}\r\n\r\n.items-adjustment {\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  border: 1px solid #eee;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.item-adjust-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.item-adjust-row:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.item-name {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.quantity-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 10px;\r\n}\r\n\r\n.quantity-controls button {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid #ddd;\r\n  background-color: #f0f0f0;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.quantity-controls button:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.quantity-controls input {\r\n  width: 50px;\r\n  text-align: center;\r\n  margin: 0 5px;\r\n  padding: 5px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.item-price {\r\n  min-width: 80px;\r\n  text-align: right;\r\n  font-weight: bold;\r\n}\r\n\r\n.adjusted-total {\r\n  text-align: right;\r\n  font-size: 16px;\r\n  margin-top: 10px;\r\n  color: #d12f7a;\r\n}\r\n\r\n.decline-modal-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 20px;\r\n}\r\n\r\n.send-approval-btn {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.confirm-decline-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Animation for order approval transition */\r\n@keyframes orderApproved {\r\n  0% {\r\n    background-color: #ffe6e6;\r\n    border-color: #ff0000;\r\n    box-shadow: 0 4px 10px rgba(255, 0, 0, 0.2);\r\n  }\r\n  50% {\r\n    background-color: #e6ffe6;\r\n    border-color: #4caf50;\r\n    box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3);\r\n  }\r\n  100% {\r\n    background-color: white;\r\n    border-color: #ddd;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n}\r\n\r\n.order-approved-animation {\r\n  animation: orderApproved 1.5s ease-in-out forwards;\r\n}\r\n\r\n/* Add the success animation styles */\r\n@keyframes successPulse {\r\n  0% { background-color: #fff; }\r\n  25% { background-color: #e6ffe6; }\r\n  50% { background-color: #ccffcc; }\r\n  75% { background-color: #e6ffe6; }\r\n  100% { background-color: #fff; }\r\n}\r\n\r\n.order-approved-success {\r\n  animation: successPulse 2s ease;\r\n  border: 2px solid #4CAF50 !important;\r\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3) !important;\r\n}\r\n\r\n/* Change Password Modal Styles */\r\n.password-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1003;\r\n  overflow-y: auto;\r\n}\r\n\r\n.password-modal-content {\r\n  background-color: white;\r\n  width: 90%;\r\n  max-width: 800px;\r\n  max-height: 90vh;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.password-modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  background-color: #f8d2e4;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.password-modal-header h2 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n}\r\n\r\n.close-modal-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #d12f7a;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n}\r\n\r\n.close-modal-btn:hover {\r\n  color: #b82d67;\r\n}\r\n\r\n.password-modal-body {\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  max-height: calc(90vh - 70px); /* Subtract header height */\r\n}\r\n\r\n.password-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.form-group label {\r\n  font-weight: bold;\r\n}\r\n\r\n.form-group input {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n}\r\n\r\n.save-password-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.password-message {\r\n  color: #ff0000;\r\n  font-size: 14px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.password-message.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.password-message.error {\r\n  color: #f44336;\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}