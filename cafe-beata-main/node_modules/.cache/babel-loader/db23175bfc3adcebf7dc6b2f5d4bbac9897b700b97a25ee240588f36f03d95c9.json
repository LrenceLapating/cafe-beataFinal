{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, withModifiers as _withModifiers, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelSelect as _vModelSelect, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notifications-page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"overlay\"\n};\nconst _hoisted_3 = {\n  class: \"utility-section\"\n};\nconst _hoisted_4 = {\n  class: \"cafe-status-section\"\n};\nconst _hoisted_5 = {\n  class: \"top-bar\"\n};\nconst _hoisted_6 = {\n  class: \"centered-content\"\n};\nconst _hoisted_7 = {\n  class: \"content-below-top-bar\"\n};\nconst _hoisted_8 = {\n  class: \"search-bar\"\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"loading\"\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"orders-container\"\n};\nconst _hoisted_11 = {\n  class: \"orders-list\"\n};\nconst _hoisted_12 = [\"data-order-id\"];\nconst _hoisted_13 = {\n  class: \"order-details\"\n};\nconst _hoisted_14 = {\n  class: \"items-section\"\n};\nconst _hoisted_15 = {\n  class: \"order-total\"\n};\nconst _hoisted_16 = {\n  class: \"order-actions\"\n};\nconst _hoisted_17 = [\"onClick\", \"disabled\"];\nconst _hoisted_18 = [\"onClick\"];\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = {\n  key: 0,\n  class: \"completion-confirmation-popup\"\n};\nconst _hoisted_21 = {\n  class: \"completion-confirmation-content\"\n};\nconst _hoisted_22 = {\n  class: \"confirmation-buttons\"\n};\nconst _hoisted_23 = {\n  key: 3,\n  class: \"no-orders\"\n};\nconst _hoisted_24 = {\n  key: 4,\n  class: \"notification-sent-popup\"\n};\nconst _hoisted_25 = {\n  key: 5,\n  class: \"menu-editor-modal\"\n};\nconst _hoisted_26 = {\n  class: \"menu-editor-content\"\n};\nconst _hoisted_27 = {\n  class: \"menu-editor-header\"\n};\nconst _hoisted_28 = {\n  class: \"menu-editor-body\"\n};\nconst _hoisted_29 = {\n  key: 6,\n  class: \"stock-manager-modal\"\n};\nconst _hoisted_30 = {\n  class: \"stock-manager-content\"\n};\nconst _hoisted_31 = {\n  class: \"stock-manager-header\"\n};\nconst _hoisted_32 = {\n  class: \"stock-manager-body\"\n};\nconst _hoisted_33 = {\n  class: \"stock-search-bar\"\n};\nconst _hoisted_34 = {\n  class: \"stock-filters\"\n};\nconst _hoisted_35 = [\"value\"];\nconst _hoisted_36 = {\n  class: \"stock-table-container\"\n};\nconst _hoisted_37 = {\n  class: \"stock-table\"\n};\nconst _hoisted_38 = [\"onClick\"];\nconst _hoisted_39 = {\n  key: 7,\n  class: \"stock-update-modal\"\n};\nconst _hoisted_40 = {\n  class: \"stock-update-content\"\n};\nconst _hoisted_41 = {\n  class: \"stock-update-form\"\n};\nconst _hoisted_42 = {\n  class: \"form-group\"\n};\nconst _hoisted_43 = {\n  class: \"form-group\"\n};\nconst _hoisted_44 = {\n  class: \"form-group\"\n};\nconst _hoisted_45 = [\"max\"];\nconst _hoisted_46 = {\n  key: 1\n};\nconst _hoisted_47 = {\n  key: 2\n};\nconst _hoisted_48 = {\n  class: \"form-group\"\n};\nconst _hoisted_49 = {\n  class: \"update-buttons\"\n};\nconst _hoisted_50 = {\n  key: 8,\n  class: \"decline-modal-overlay\"\n};\nconst _hoisted_51 = {\n  class: \"decline-modal-content\"\n};\nconst _hoisted_52 = {\n  class: \"decline-modal-header\"\n};\nconst _hoisted_53 = {\n  class: \"decline-modal-body\"\n};\nconst _hoisted_54 = {\n  class: \"form-group\"\n};\nconst _hoisted_55 = {\n  class: \"form-group\"\n};\nconst _hoisted_56 = {\n  class: \"items-adjustment\"\n};\nconst _hoisted_57 = {\n  class: \"item-name\"\n};\nconst _hoisted_58 = {\n  class: \"quantity-controls\"\n};\nconst _hoisted_59 = [\"onClick\", \"disabled\"];\nconst _hoisted_60 = [\"onUpdate:modelValue\"];\nconst _hoisted_61 = [\"onClick\"];\nconst _hoisted_62 = {\n  class: \"item-price\"\n};\nconst _hoisted_63 = {\n  class: \"adjusted-total\"\n};\nconst _hoisted_64 = {\n  class: \"decline-modal-actions\"\n};\nconst _hoisted_65 = [\"disabled\"];\nconst _hoisted_66 = {\n  key: 0\n};\nconst _hoisted_67 = {\n  key: 1\n};\nconst _hoisted_68 = [\"disabled\"];\nconst _hoisted_69 = {\n  key: 0\n};\nconst _hoisted_70 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ItemEditor = _resolveComponent(\"ItemEditor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Sidebar Toggle Button (For Mobile) \"), _createElementVNode(\"button\", {\n    class: \"menu-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleSidebar && $options.toggleSidebar(...args))\n  }, _cache[27] || (_cache[27] = [_createElementVNode(\"div\", {\n    class: \"menu-icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fa fa-bars\"\n  })], -1 /* HOISTED */)])), $data.isSidebarOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Sidebar \"), _createElementVNode(\"div\", {\n    class: _normalizeClass(['sidebar', {\n      'open': $data.isSidebarOpen\n    }]),\n    onClick: _cache[8] || (_cache[8] = _withModifiers(() => {}, [\"stop\"]))\n  }, [_createElementVNode(\"button\", {\n    class: \"close-sidebar\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleSidebar && $options.toggleSidebar(...args))\n  }, _cache[28] || (_cache[28] = [_createElementVNode(\"i\", {\n    class: \"fa fa-times\"\n  }, null, -1 /* HOISTED */)])), _createCommentVNode(\" Admin Profile Section \"), _cache[34] || (_cache[34] = _createElementVNode(\"div\", {\n    class: \"user-profile-section\"\n  }, [_createElementVNode(\"h3\", null, [_createElementVNode(\"i\", {\n    class: \"fa fa-user-circle\"\n  }), _createTextVNode(\" Admin Dashboard\")])], -1 /* HOISTED */)), _cache[35] || (_cache[35] = _createElementVNode(\"hr\", {\n    class: \"utility-divider\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Utility Buttons \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.goToOrderRecord && $options.goToOrderRecord(...args)),\n    class: \"utility-button\"\n  }, _cache[29] || (_cache[29] = [_createElementVNode(\"i\", {\n    class: \"fa fa-history\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"View Order Record\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.toggleMenuEditor && $options.toggleMenuEditor(...args)),\n    class: \"utility-button\"\n  }, _cache[30] || (_cache[30] = [_createElementVNode(\"i\", {\n    class: \"fa fa-utensils\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Menu Editor\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleStockManager && $options.toggleStockManager(...args)),\n    class: \"utility-button\"\n  }, _cache[31] || (_cache[31] = [_createElementVNode(\"i\", {\n    class: \"fa fa-boxes\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Stock Management\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.toggleChangePassword && $options.toggleChangePassword(...args)),\n    class: \"utility-button\"\n  }, _cache[32] || (_cache[32] = [_createElementVNode(\"i\", {\n    class: \"fa fa-key\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Change Password\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.logout && $options.logout(...args)),\n    class: \"utility-button logout\"\n  }, _cache[33] || (_cache[33] = [_createElementVNode(\"i\", {\n    class: \"fa fa-sign-out\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Logout\", -1 /* HOISTED */)]))]), _createCommentVNode(\" Cafe Status Section \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.toggleCafeStatus && $options.toggleCafeStatus(...args)),\n    class: _normalizeClass([{\n      'open-btn': $data.isCafeOpen,\n      'closed-btn': !$data.isCafeOpen\n    }, \"cafe-toggle-btn\"])\n  }, [_createElementVNode(\"i\", {\n    class: _normalizeClass($data.isCafeOpen ? 'fa fa-check-circle' : 'fa fa-times-circle')\n  }, null, 2 /* CLASS */), _createTextVNode(\" \" + _toDisplayString($data.isCafeOpen ? 'Set Cafe Closed' : 'Set Cafe Open'), 1 /* TEXT */)], 2 /* CLASS */)])], 2 /* CLASS */), _createCommentVNode(\" Main Content \"), _createElementVNode(\"div\", {\n    class: _normalizeClass(['content', {\n      'shifted': $data.isSidebarOpen\n    }])\n  }, [_createCommentVNode(\" Add the top bar with pink gradient at the very top \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" Add sidebar button to the top bar \"), _createElementVNode(\"button\", {\n    class: \"menu-button-header\",\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.toggleSidebar && $options.toggleSidebar(...args))\n  }, _cache[36] || (_cache[36] = [_createElementVNode(\"div\", {\n    class: \"menu-icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fa fa-bars\"\n  })], -1 /* HOISTED */)])), _cache[37] || (_cache[37] = _createElementVNode(\"div\", {\n    class: \"logo-container\"\n  }, [_createElementVNode(\"div\", {\n    class: \"cafe-title\"\n  }, \"Cafe Preorder Admin Dashboard\")], -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_7, [$data.notificationVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass(['notification-popup', $data.notificationClass])\n  }, [_createElementVNode(\"p\", null, _toDisplayString($data.notificationMessage), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Search Bar \"), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $data.searchQuery = $event),\n    placeholder: \"Search orders by ID, customer name...\",\n    class: \"search-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]])]), $data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \"Loading...\")) : _createCommentVNode(\"v-if\", true), $options.filteredOrders.length && !$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_cache[43] || (_cache[43] = _createElementVNode(\"h2\", null, \"Pending Orders\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredOrders, order => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"order-item\", {\n        'order-declined-state': $data.activeDeclineOrderId === order.id,\n        'order-pending-approval': order.isPendingApproval\n      }]),\n      key: order.id,\n      \"data-order-id\": order.id\n    }, [_createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"h3\", null, \"Order ID: \" + _toDisplayString(order.id), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[38] || (_cache[38] = _createElementVNode(\"strong\", null, \"Customer:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(order.customer_name), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[39] || (_cache[39] = _createElementVNode(\"strong\", null, \"Status:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(order.status) + _toDisplayString(order.isPendingApproval ? ' (Pending Approval)' : ''), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[40] || (_cache[40] = _createElementVNode(\"strong\", null, \"Time Order: \", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($options.timeAgo(order.created_at)), 1 /* TEXT */)]), _createCommentVNode(\" Time Ago Display \"), _createElementVNode(\"div\", _hoisted_14, [_cache[41] || (_cache[41] = _createElementVNode(\"strong\", null, \"Items:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(order.items, item => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: item.name\n      }, _toDisplayString(item.name) + \" - ₱\" + _toDisplayString(item.price) + \" x \" + _toDisplayString(item.quantity), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Total Amount below items \"), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, \"Total Amount: ₱\" + _toDisplayString($options.calculateOrderTotal(order.items)), 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_16, [_createCommentVNode(\" Mark as Completed Buttons \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.showCompletionConfirmation(order.id),\n      class: _normalizeClass([\"mark-completed-btn small-btn\", {\n        'disabled': !$data.orderReadyStatus[order.id]\n      }]),\n      disabled: !$data.orderReadyStatus[order.id]\n    }, \" Mark as Completed \", 10 /* CLASS, PROPS */, _hoisted_17), _createCommentVNode(\" Order Ready button \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.sendOrderReadyNotification(order.id, order.customer_name, order.items),\n      class: \"order-ready-btn small-btn\"\n    }, \" Order Ready 🔔 \", 8 /* PROPS */, _hoisted_18), _createCommentVNode(\" Decline button \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.openDeclineDialog(order),\n      class: \"decline-btn\"\n    }, \" Decline \", 8 /* PROPS */, _hoisted_19)])], 10 /* CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Completion Confirmation Popup \"), $data.confirmCompleteOrderId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_cache[42] || (_cache[42] = _createElementVNode(\"h3\", null, \"Confirm Completion\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"Are you sure Order ID: \" + _toDisplayString($data.confirmCompleteOrderId) + \" is completed?\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.confirmCompletion && $options.confirmCompletion(...args)),\n    class: \"confirm-yes-btn\"\n  }, \"Yes\"), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => $options.cancelCompletion && $options.cancelCompletion(...args)),\n    class: \"confirm-no-btn\"\n  }, \"No\")])])])) : _createCommentVNode(\"v-if\", true)])) : !$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _cache[44] || (_cache[44] = [_createElementVNode(\"p\", null, \"No pending orders at the moment.\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Popup Notification Sent \"), $data.notificationSent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_cache[45] || (_cache[45] = _createElementVNode(\"p\", null, \"Notification Sent!\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = $event => $data.notificationSent = false),\n    class: \"close-popup-btn\"\n  }, \"Close\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Menu Editor Popup Modal \"), $data.showMenuEditor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_cache[47] || (_cache[47] = _createElementVNode(\"h2\", null, \"Menu Editor\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[14] || (_cache[14] = (...args) => $options.toggleMenuEditor && $options.toggleMenuEditor(...args)),\n    class: \"close-modal-btn\"\n  }, _cache[46] || (_cache[46] = [_createElementVNode(\"i\", {\n    class: \"fa-solid fa-times\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_28, [_createVNode(_component_ItemEditor)])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Stock Management Modal \"), $data.showStockManager ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[49] || (_cache[49] = _createElementVNode(\"h2\", null, \"Stock Management\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[15] || (_cache[15] = (...args) => $options.toggleStockManager && $options.toggleStockManager(...args)),\n    class: \"close-modal-btn\"\n  }, _cache[48] || (_cache[48] = [_createElementVNode(\"i\", {\n    class: \"fa-solid fa-times\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_32, [_createCommentVNode(\" Search Bar \"), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[16] || (_cache[16] = $event => $data.stockSearchQuery = $event),\n    placeholder: \"Search items...\",\n    class: \"search-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.stockSearchQuery]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[17] || (_cache[17] = $event => $data.selectedCategory = $event),\n    class: \"category-filter\"\n  }, [_cache[50] || (_cache[50] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Categories\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.uniqueCategories, category => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: category,\n      value: category\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_35);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedCategory]])])]), _createCommentVNode(\" Stock Items Table \"), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"table\", _hoisted_37, [_cache[51] || (_cache[51] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Item Name\"), _createElementVNode(\"th\", null, \"Category\"), _createElementVNode(\"th\", null, \"Current Stock\"), _createElementVNode(\"th\", null, \"Status\"), _createElementVNode(\"th\", null, \"Actions\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredStockItems, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.quantity >= 999999 ? 'Unlimited' : item.quantity), 1 /* TEXT */), _createElementVNode(\"td\", {\n      class: _normalizeClass($options.getStockStatusClass(item))\n    }, _toDisplayString($options.getStockStatus(item)), 3 /* TEXT, CLASS */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.openStockUpdateModal(item),\n      class: \"update-stock-btn\"\n    }, \" Update Stock \", 8 /* PROPS */, _hoisted_38)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Stock Update Modal \"), $data.showStockUpdateModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_39, [_createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"h3\", null, \"Update Stock: \" + _toDisplayString($data.selectedItem?.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"label\", null, \"Current Stock: \" + _toDisplayString($data.selectedItem?.quantity >= 999999 ? 'Unlimited' : $data.selectedItem?.quantity), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_43, [_cache[53] || (_cache[53] = _createElementVNode(\"label\", null, \"Action:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[18] || (_cache[18] = $event => $data.stockUpdateAction = $event)\n  }, _cache[52] || (_cache[52] = [_createStaticVNode(\"<option value=\\\"add\\\" data-v-d80a1124>Add Stock</option><option value=\\\"subtract\\\" data-v-d80a1124>Remove Stock</option><option value=\\\"set\\\" data-v-d80a1124>Set Stock</option><option value=\\\"disabled\\\" data-v-d80a1124>Disabled (Out of Stock)</option><option value=\\\"enabled\\\" data-v-d80a1124>Enabled (Unlimited Orders)</option>\", 5)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.stockUpdateAction]])]), _createElementVNode(\"div\", _hoisted_44, [_cache[54] || (_cache[54] = _createElementVNode(\"label\", null, \"Quantity:\", -1 /* HOISTED */)), $data.stockUpdateAction !== 'disabled' && $data.stockUpdateAction !== 'enabled' ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 0,\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[19] || (_cache[19] = $event => $data.stockUpdateQuantity = $event),\n    min: \"0\",\n    max: $data.stockUpdateAction === 'subtract' ? $data.selectedItem?.quantity : 999999\n  }, null, 8 /* PROPS */, _hoisted_45)), [[_vModelText, $data.stockUpdateQuantity, void 0, {\n    number: true\n  }]]) : $data.stockUpdateAction === 'disabled' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_46, \" Item will be marked as out of stock and cannot be ordered. \")) : $data.stockUpdateAction === 'enabled' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_47, \" Item will be available for unlimited orders regardless of quantity. \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_48, [_cache[55] || (_cache[55] = _createElementVNode(\"label\", null, \"Reason:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[20] || (_cache[20] = $event => $data.stockUpdateReason = $event),\n    placeholder: \"Enter reason for update\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.stockUpdateReason]])]), _createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"button\", {\n    onClick: _cache[21] || (_cache[21] = (...args) => $options.submitStockUpdate && $options.submitStockUpdate(...args)),\n    class: \"confirm-btn\"\n  }, \"Update Stock\"), _createElementVNode(\"button\", {\n    onClick: _cache[22] || (_cache[22] = (...args) => $options.closeStockUpdateModal && $options.closeStockUpdateModal(...args)),\n    class: \"cancel-btn\"\n  }, \"Cancel\")])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Decline Modal \"), $data.showDeclineModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_50, [_createElementVNode(\"div\", _hoisted_51, [_createElementVNode(\"div\", _hoisted_52, [_cache[56] || (_cache[56] = _createElementVNode(\"h3\", null, \"Order Adjustment\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[23] || (_cache[23] = (...args) => $options.closeDeclineModal && $options.closeDeclineModal(...args)),\n    class: \"close-modal-btn\"\n  }, \"✕\")]), _createElementVNode(\"div\", _hoisted_53, [_createElementVNode(\"p\", null, [_cache[57] || (_cache[57] = _createElementVNode(\"strong\", null, \"Order ID:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedOrder?.id), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[58] || (_cache[58] = _createElementVNode(\"strong\", null, \"Customer:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedOrder?.customer_name), 1 /* TEXT */)]), _createCommentVNode(\" Customized Message \"), _createElementVNode(\"div\", _hoisted_54, [_cache[59] || (_cache[59] = _createElementVNode(\"label\", null, \"Message to Customer:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[24] || (_cache[24] = $event => $data.customDeclineMessage = $event),\n    placeholder: \"Enter a message explaining the changes...\",\n    rows: \"3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.customDeclineMessage]])]), _createCommentVNode(\" Edit Item Quantities \"), _createElementVNode(\"div\", _hoisted_55, [_cache[61] || (_cache[61] = _createElementVNode(\"label\", null, \"Adjust Item Quantities:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_56, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.editableItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"item-adjust-row\"\n    }, [_createElementVNode(\"span\", _hoisted_57, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_58, [_createElementVNode(\"button\", {\n      onClick: $event => $options.decrementQuantity(index),\n      disabled: item.quantity <= 0\n    }, \"-\", 8 /* PROPS */, _hoisted_59), _withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": $event => item.quantity = $event,\n      min: \"0\"\n    }, null, 8 /* PROPS */, _hoisted_60), [[_vModelText, item.quantity, void 0, {\n      number: true\n    }]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.incrementQuantity(index)\n    }, \"+\", 8 /* PROPS */, _hoisted_61)]), _createElementVNode(\"span\", _hoisted_62, \"₱\" + _toDisplayString((item.price * item.quantity).toFixed(2)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"p\", _hoisted_63, [_cache[60] || (_cache[60] = _createElementVNode(\"strong\", null, \"Adjusted Total:\", -1 /* HOISTED */)), _createTextVNode(\" ₱\" + _toDisplayString($options.calculateAdjustedTotal()), 1 /* TEXT */)])]), _createCommentVNode(\" Action Buttons \"), _createElementVNode(\"div\", _hoisted_64, [_createElementVNode(\"button\", {\n    onClick: _cache[25] || (_cache[25] = (...args) => $options.sendForApproval && $options.sendForApproval(...args)),\n    class: \"send-approval-btn\",\n    disabled: $data.isUpdating\n  }, [$data.isUpdating ? (_openBlock(), _createElementBlock(\"span\", _hoisted_66, _cache[62] || (_cache[62] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Updating... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_67, \"Send for Approval\"))], 8 /* PROPS */, _hoisted_65), _createElementVNode(\"button\", {\n    onClick: _cache[26] || (_cache[26] = (...args) => $options.confirmDecline && $options.confirmDecline(...args)),\n    class: \"confirm-decline-btn\",\n    disabled: $data.isUpdating\n  }, [$data.isUpdating ? (_openBlock(), _createElementBlock(\"span\", _hoisted_69, _cache[63] || (_cache[63] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Declining... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_70, \"Declined\"))], 8 /* PROPS */, _hoisted_68)])])])])) : _createCommentVNode(\"v-if\", true)])], 2 /* CLASS */)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","onClick","_cache","args","$options","toggleSidebar","$data","isSidebarOpen","_hoisted_2","_normalizeClass","_withModifiers","_createTextVNode","_hoisted_3","goToOrderRecord","toggleMenuEditor","toggleStockManager","toggleChangePassword","logout","_hoisted_4","toggleCafeStatus","isCafeOpen","_toDisplayString","_hoisted_5","_hoisted_6","_hoisted_7","notificationVisible","notificationClass","notificationMessage","_hoisted_8","type","$event","searchQuery","placeholder","isLoading","_hoisted_9","filteredOrders","length","_hoisted_10","_hoisted_11","_Fragment","_renderList","order","activeDeclineOrderId","id","isPendingApproval","_hoisted_13","customer_name","status","timeAgo","created_at","_hoisted_14","items","item","name","price","quantity","_hoisted_15","calculateOrderTotal","_hoisted_16","showCompletionConfirmation","orderReadyStatus","disabled","_hoisted_17","sendOrderReadyNotification","_hoisted_18","openDeclineDialog","_hoisted_19","_hoisted_12","confirmCompleteOrderId","_hoisted_20","_hoisted_21","_hoisted_22","confirmCompletion","cancelCompletion","_hoisted_23","notificationSent","_hoisted_24","showMenuEditor","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_createVNode","_component_ItemEditor","showStockManager","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","stockSearchQuery","selectedCategory","value","uniqueCategories","category","_hoisted_35","_hoisted_36","_hoisted_37","filteredStockItems","getStockStatusClass","getStockStatus","openStockUpdateModal","_hoisted_38","showStockUpdateModal","_hoisted_39","_hoisted_40","selectedItem","_hoisted_41","_hoisted_42","_hoisted_43","stockUpdateAction","_createStaticVNode","_hoisted_44","stockUpdateQuantity","min","max","_hoisted_45","number","_hoisted_46","_hoisted_47","_hoisted_48","stockUpdateReason","_hoisted_49","submitStockUpdate","closeStockUpdateModal","showDeclineModal","_hoisted_50","_hoisted_51","_hoisted_52","closeDeclineModal","_hoisted_53","selectedOrder","_hoisted_54","customDeclineMessage","rows","_hoisted_55","_hoisted_56","editableItems","index","_hoisted_57","_hoisted_58","decrementQuantity","_hoisted_59","_hoisted_60","incrementQuantity","_hoisted_61","_hoisted_62","toFixed","_hoisted_63","calculateAdjustedTotal","_hoisted_64","sendForApproval","isUpdating","_hoisted_66","_hoisted_67","_hoisted_65","confirmDecline","_hoisted_69","_hoisted_70","_hoisted_68"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\admin\\NotificationsPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"notifications-page\">\r\n    <!-- Sidebar Toggle Button (For Mobile) -->\r\n    <button class=\"menu-button\" @click=\"toggleSidebar\">\r\n      <div class=\"menu-icon-container\">\r\n        <i class=\"fa fa-bars\"></i>\r\n      </div>\r\n    </button>\r\n\r\n    <div v-if=\"isSidebarOpen\" class=\"overlay\"></div>\r\n    \r\n    <!-- Sidebar -->\r\n    <div :class=\"['sidebar', { 'open': isSidebarOpen }]\" @click.stop>\r\n      <button class=\"close-sidebar\" @click=\"toggleSidebar\">\r\n        <i class=\"fa fa-times\"></i>\r\n      </button>\r\n      \r\n      <!-- Admin Profile Section -->\r\n      <div class=\"user-profile-section\">\r\n        <h3><i class=\"fa fa-user-circle\"></i> Admin Dashboard</h3>\r\n      </div>\r\n\r\n      <hr class=\"utility-divider\">\r\n\r\n      <!-- Utility Buttons -->\r\n      <div class=\"utility-section\">\r\n        <button @click=\"goToOrderRecord\" class=\"utility-button\">\r\n          <i class=\"fa fa-history\"></i>\r\n          <span>View Order Record</span>\r\n        </button>\r\n\r\n        <button @click=\"toggleMenuEditor\" class=\"utility-button\">\r\n          <i class=\"fa fa-utensils\"></i>\r\n          <span>Menu Editor</span>\r\n        </button>\r\n\r\n        <button @click=\"toggleStockManager\" class=\"utility-button\">\r\n          <i class=\"fa fa-boxes\"></i>\r\n          <span>Stock Management</span>\r\n        </button>\r\n\r\n        <button @click=\"toggleChangePassword\" class=\"utility-button\">\r\n          <i class=\"fa fa-key\"></i>\r\n          <span>Change Password</span>\r\n        </button>\r\n\r\n        <button @click=\"logout\" class=\"utility-button logout\">\r\n          <i class=\"fa fa-sign-out\"></i>\r\n          <span>Logout</span>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Cafe Status Section -->\r\n      <div class=\"cafe-status-section\">\r\n        <button @click=\"toggleCafeStatus\" :class=\"{'open-btn': isCafeOpen, 'closed-btn': !isCafeOpen}\" class=\"cafe-toggle-btn\">\r\n          <i :class=\"isCafeOpen ? 'fa fa-check-circle' : 'fa fa-times-circle'\"></i>\r\n          {{ isCafeOpen ? 'Set Cafe Closed' : 'Set Cafe Open' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div :class=\"['content', { 'shifted': isSidebarOpen }]\">\r\n      <!-- Add the top bar with pink gradient at the very top -->\r\n      <div class=\"top-bar\">\r\n        <div class=\"centered-content\">\r\n          <!-- Add sidebar button to the top bar -->\r\n          <button class=\"menu-button-header\" @click=\"toggleSidebar\">\r\n            <div class=\"menu-icon-container\">\r\n              <i class=\"fa fa-bars\"></i>\r\n            </div>\r\n          </button>\r\n          <div class=\"logo-container\">\r\n            <div class=\"cafe-title\">Cafe Preorder Admin Dashboard</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"content-below-top-bar\">\r\n        <div v-if=\"notificationVisible\" :class=\"['notification-popup', notificationClass]\">\r\n          <p>{{ notificationMessage }}</p>\r\n        </div>\r\n\r\n        <!-- Search Bar -->\r\n        <div class=\"search-bar\">\r\n          <input \r\n            type=\"text\" \r\n            v-model=\"searchQuery\" \r\n            placeholder=\"Search orders by ID, customer name...\" \r\n            class=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div v-if=\"isLoading\" class=\"loading\">Loading...</div>\r\n\r\n        <div v-if=\"filteredOrders.length && !isLoading\" class=\"orders-container\">\r\n          <h2>Pending Orders</h2>\r\n          <div class=\"orders-list\">\r\n            <div class=\"order-item\" \r\n              v-for=\"order in filteredOrders\" \r\n              :key=\"order.id\" \r\n              :data-order-id=\"order.id\"\r\n              :class=\"{\r\n                'order-declined-state': activeDeclineOrderId === order.id,\r\n                'order-pending-approval': order.isPendingApproval\r\n              }\">\r\n              <div class=\"order-details\">\r\n                <h3>Order ID: {{ order.id }}</h3>\r\n                <p><strong>Customer:</strong> {{ order.customer_name }}</p>\r\n                <p><strong>Status:</strong> {{ order.status }}{{ order.isPendingApproval ? ' (Pending Approval)' : '' }}</p>\r\n                <p><strong>Time Order: </strong> {{ timeAgo(order.created_at) }}</p> <!-- Time Ago Display -->\r\n\r\n                <div class=\"items-section\">\r\n                  <strong>Items:</strong>\r\n                  <ul>\r\n                    <li v-for=\"item in order.items\" :key=\"item.name\">\r\n                      {{ item.name }} - ₱{{ item.price }} x {{ item.quantity }}\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <!-- Total Amount below items -->\r\n                <div class=\"order-total\">\r\n                  <p><strong>Total Amount: ₱{{ calculateOrderTotal(order.items) }}</strong></p>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"order-actions\">\r\n                <!-- Mark as Completed Buttons -->\r\n                <button \r\n                  @click=\"showCompletionConfirmation(order.id)\" \r\n                  class=\"mark-completed-btn small-btn\"\r\n                  :disabled=\"!orderReadyStatus[order.id]\"\r\n                  :class=\"{ 'disabled': !orderReadyStatus[order.id] }\"\r\n                >\r\n                  Mark as Completed\r\n                </button>\r\n\r\n                <!-- Order Ready button -->\r\n                <button \r\n                  @click=\"sendOrderReadyNotification(order.id, order.customer_name, order.items)\" \r\n                  class=\"order-ready-btn small-btn\"\r\n                >\r\n                  Order Ready  🔔\r\n                </button>\r\n\r\n                <!-- Decline button -->\r\n                <button @click=\"openDeclineDialog(order)\" class=\"decline-btn\">\r\n                  Decline\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Completion Confirmation Popup -->\r\n          <div v-if=\"confirmCompleteOrderId\" class=\"completion-confirmation-popup\">\r\n            <div class=\"completion-confirmation-content\">\r\n              <h3>Confirm Completion</h3>\r\n              <p>Are you sure Order ID: {{ confirmCompleteOrderId }} is completed?</p>\r\n              <div class=\"confirmation-buttons\">\r\n                <button @click=\"confirmCompletion\" class=\"confirm-yes-btn\">Yes</button>\r\n                <button @click=\"cancelCompletion\" class=\"confirm-no-btn\">No</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div v-else-if=\"!isLoading\" class=\"no-orders\">\r\n          <p>No pending orders at the moment.</p>\r\n        </div>\r\n\r\n        <!-- Popup Notification Sent -->\r\n        <div v-if=\"notificationSent\" class=\"notification-sent-popup\">\r\n          <p>Notification Sent!</p>\r\n          <button @click=\"notificationSent = false\" class=\"close-popup-btn\">Close</button>\r\n        </div>\r\n\r\n        <!-- Menu Editor Popup Modal -->\r\n        <div v-if=\"showMenuEditor\" class=\"menu-editor-modal\">\r\n          <div class=\"menu-editor-content\">\r\n            <div class=\"menu-editor-header\">\r\n              <h2>Menu Editor</h2>\r\n              <button @click=\"toggleMenuEditor\" class=\"close-modal-btn\">\r\n                <i class=\"fa-solid fa-times\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"menu-editor-body\">\r\n              <ItemEditor />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Stock Management Modal -->\r\n        <div v-if=\"showStockManager\" class=\"stock-manager-modal\">\r\n          <div class=\"stock-manager-content\">\r\n            <div class=\"stock-manager-header\">\r\n              <h2>Stock Management</h2>\r\n              <button @click=\"toggleStockManager\" class=\"close-modal-btn\">\r\n                <i class=\"fa-solid fa-times\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"stock-manager-body\">\r\n              <!-- Search Bar -->\r\n              <div class=\"stock-search-bar\">\r\n                <div class=\"stock-filters\">\r\n                  <input \r\n                    type=\"text\" \r\n                    v-model=\"stockSearchQuery\" \r\n                    placeholder=\"Search items...\" \r\n                    class=\"search-input\"\r\n                  />\r\n                  <select v-model=\"selectedCategory\" class=\"category-filter\">\r\n                    <option value=\"\">All Categories</option>\r\n                    <option v-for=\"category in uniqueCategories\" :key=\"category\" :value=\"category\">\r\n                      {{ category }}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Stock Items Table -->\r\n              <div class=\"stock-table-container\">\r\n                <table class=\"stock-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Item Name</th>\r\n                      <th>Category</th>\r\n                      <th>Current Stock</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"item in filteredStockItems\" :key=\"item.id\">\r\n                      <td>{{ item.name }}</td>\r\n                      <td>{{ item.category }}</td>\r\n                      <td>{{ item.quantity >= 999999 ? 'Unlimited' : item.quantity }}</td>\r\n                      <td :class=\"getStockStatusClass(item)\">{{ getStockStatus(item) }}</td>\r\n                      <td>\r\n                        <button @click=\"openStockUpdateModal(item)\" class=\"update-stock-btn\">\r\n                          Update Stock\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Stock Update Modal -->\r\n        <div v-if=\"showStockUpdateModal\" class=\"stock-update-modal\">\r\n          <div class=\"stock-update-content\">\r\n            <h3>Update Stock: {{ selectedItem?.name }}</h3>\r\n            <div class=\"stock-update-form\">\r\n              <div class=\"form-group\">\r\n                <label>Current Stock: {{ selectedItem?.quantity >= 999999 ? 'Unlimited' : selectedItem?.quantity }}</label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Action:</label>\r\n                <select v-model=\"stockUpdateAction\">\r\n                  <option value=\"add\">Add Stock</option>\r\n                  <option value=\"subtract\">Remove Stock</option>\r\n                  <option value=\"set\">Set Stock</option>\r\n                  <option value=\"disabled\">Disabled (Out of Stock)</option>\r\n                  <option value=\"enabled\">Enabled (Unlimited Orders)</option>\r\n                </select>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Quantity:</label>\r\n                <input \r\n                  v-if=\"stockUpdateAction !== 'disabled' && stockUpdateAction !== 'enabled'\"\r\n                  type=\"number\" \r\n                  v-model.number=\"stockUpdateQuantity\" \r\n                  min=\"0\"\r\n                  :max=\"stockUpdateAction === 'subtract' ? selectedItem?.quantity : 999999\"\r\n                />\r\n                <span v-else-if=\"stockUpdateAction === 'disabled'\">\r\n                  Item will be marked as out of stock and cannot be ordered.\r\n                </span>\r\n                <span v-else-if=\"stockUpdateAction === 'enabled'\">\r\n                  Item will be available for unlimited orders regardless of quantity.\r\n                </span>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Reason:</label>\r\n                <input type=\"text\" v-model=\"stockUpdateReason\" placeholder=\"Enter reason for update\"/>\r\n              </div>\r\n              <div class=\"update-buttons\">\r\n                <button @click=\"submitStockUpdate\" class=\"confirm-btn\">Update Stock</button>\r\n                <button @click=\"closeStockUpdateModal\" class=\"cancel-btn\">Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Decline Modal -->\r\n        <div v-if=\"showDeclineModal\" class=\"decline-modal-overlay\">\r\n          <div class=\"decline-modal-content\">\r\n            <div class=\"decline-modal-header\">\r\n              <h3>Order Adjustment</h3>\r\n              <button @click=\"closeDeclineModal\" class=\"close-modal-btn\">✕</button>\r\n      </div>\r\n            <div class=\"decline-modal-body\">\r\n              <p><strong>Order ID:</strong> {{ selectedOrder?.id }}</p>\r\n              <p><strong>Customer:</strong> {{ selectedOrder?.customer_name }}</p>\r\n              \r\n              <!-- Customized Message -->\r\n              <div class=\"form-group\">\r\n                <label>Message to Customer:</label>\r\n                <textarea \r\n                  v-model=\"customDeclineMessage\" \r\n                  placeholder=\"Enter a message explaining the changes...\" \r\n                  rows=\"3\"\r\n                ></textarea>\r\n              </div>\r\n              \r\n              <!-- Edit Item Quantities -->\r\n              <div class=\"form-group\">\r\n                <label>Adjust Item Quantities:</label>\r\n                <div class=\"items-adjustment\">\r\n                  <div v-for=\"(item, index) in editableItems\" :key=\"index\" class=\"item-adjust-row\">\r\n                    <span class=\"item-name\">{{ item.name }}</span>\r\n                    <div class=\"quantity-controls\">\r\n                      <button @click=\"decrementQuantity(index)\" :disabled=\"item.quantity <= 0\">-</button>\r\n                      <input type=\"number\" v-model.number=\"item.quantity\" min=\"0\">\r\n                      <button @click=\"incrementQuantity(index)\">+</button>\r\n                    </div>\r\n                    <span class=\"item-price\">₱{{ (item.price * item.quantity).toFixed(2) }}</span>\r\n                  </div>\r\n                </div>\r\n                <p class=\"adjusted-total\"><strong>Adjusted Total:</strong> ₱{{ calculateAdjustedTotal() }}</p>\r\n              </div>\r\n              \r\n              <!-- Action Buttons -->\r\n              <div class=\"decline-modal-actions\">\r\n                <button \r\n                  @click=\"sendForApproval\" \r\n                  class=\"send-approval-btn\"\r\n                  :disabled=\"isUpdating\"\r\n                >\r\n                  <span v-if=\"isUpdating\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i> Updating...\r\n                  </span>\r\n                  <span v-else>Send for Approval</span>\r\n                </button>\r\n                <button \r\n                  @click=\"confirmDecline\" \r\n                  class=\"confirm-decline-btn\"\r\n                  :disabled=\"isUpdating\"\r\n                >\r\n                  <span v-if=\"isUpdating\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i> Declining...\r\n                  </span>\r\n                  <span v-else>Declined</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ItemEditor from './ItemEditor.vue'\r\n\r\nexport default {\r\n  components: {\r\n    ItemEditor\r\n  },\r\n  data() {\r\n    return {\r\n      orders: [], // Store pending orders\r\n      isLoading: false, // For loading state\r\n      ws: null, // WebSocket connection\r\n      wsConnected: false,\r\n      activeDeclineOrderId: null, // Track the order for which decline message is being customized\r\n      customDeclineMessage: \"\", // Store the custom decline message\r\n      notificationSent: false, // To track if the notification has been sent\r\n      searchQuery: \"\", // To hold the search query input\r\n      isCafeOpen: true,\r\n      notificationMessage: \"\",\r\n      notificationClass: \"\", \r\n      notificationVisible: false,\r\n      showMenuEditor: false, // Control visibility of menu editor popup\r\n      isSidebarOpen: true, // Always open by default\r\n      orderReadyStatus: {}, // Track which orders are ready\r\n      confirmCompleteOrderId: null, // Track which order is being confirmed for completion\r\n      showStockManager: false,\r\n      showStockUpdateModal: false,\r\n      stockItems: [],\r\n      stockSearchQuery: '',\r\n      selectedItem: null,\r\n      stockUpdateAction: 'add',\r\n      stockUpdateQuantity: 0,\r\n      stockUpdateReason: '',\r\n      selectedCategory: '',\r\n      uniqueCategories: [],\r\n      // New properties for decline modal\r\n      showDeclineModal: false,\r\n      selectedOrder: null,\r\n      editableItems: [],\r\n      refreshInterval: null, // To store the interval ID for automatic refresh\r\n      isUpdating: false, // New property for loading state\r\n      pingInterval: null, // To store the interval ID for periodic ping\r\n      showChangePasswordModal: false,\r\n    };\r\n  },\r\n  computed: {\r\n    // Filter orders based on search query\r\n    filteredOrders() {\r\n      if (!this.searchQuery) {\r\n        return this.orders;\r\n      }\r\n      return this.orders.filter(order => {\r\n        const lowerCaseSearchQuery = this.searchQuery.toLowerCase();\r\n        return (\r\n          order.id.toString().includes(lowerCaseSearchQuery) || // Search by Order ID\r\n          order.customer_name.toLowerCase().includes(lowerCaseSearchQuery) // Search by Customer Name\r\n        );\r\n      });\r\n    },\r\n    filteredStockItems() {\r\n      return this.stockItems.filter(item => {\r\n        if (!item || !item.name) return false;\r\n        const matchesSearch = item.name.toLowerCase().includes((this.stockSearchQuery || '').toLowerCase());\r\n        const matchesCategory = !this.selectedCategory || item.category === this.selectedCategory;\r\n        return matchesSearch && matchesCategory;\r\n      });\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    toggleCafeStatus() {\r\n    this.isCafeOpen = !this.isCafeOpen; // Toggle the cafe status\r\n    localStorage.setItem('isCafeOpen', this.isCafeOpen); // Store cafe status\r\n\r\n    // Set the notification message and class based on the cafe status\r\n    if (this.isCafeOpen) {\r\n      this.notificationMessage = \"Cafe Beàta is now Open!\";\r\n      this.notificationClass = \"open-notification\"; // Set class for green when open\r\n    } else {\r\n      this.notificationMessage = \"Cafe Beàta is now Closed!\";\r\n      this.notificationClass = \"closed-notification\"; // Set class for red when closed\r\n    }\r\n\r\n    this.showNotification();  // Show the notification\r\n  },\r\n  \r\n   showNotification() {\r\n    // Show the notification and reset visibility after a timeout\r\n    this.notificationVisible = true;\r\n\r\n    setTimeout(() => {\r\n      this.notificationVisible = false;\r\n    }, 3000);  // Hide after 3 seconds\r\n  },\r\n\r\n\r\n    timeAgo(timestamp) {\r\n    // If timestamp is a string, ensure it's in ISO format by replacing space with \"T\"\r\n    if (typeof timestamp === \"string\") {\r\n      timestamp = timestamp.replace(\" \", \"T\"); // Convert to ISO format: \"YYYY-MM-DD HH:MM:SS\" -> \"YYYY-MM-DDTHH:MM:SS\"\r\n    }\r\n\r\n    const now = new Date();\r\n    const orderTime = new Date(timestamp); // Parse the timestamp\r\n\r\n    // Check if the timestamp is valid\r\n    if (isNaN(orderTime)) {\r\n      return \"Invalid time\"; // Return fallback message if timestamp is invalid\r\n    }\r\n\r\n    const differenceInSeconds = Math.floor((now - orderTime) / 1000);\r\n\r\n    if (differenceInSeconds < 60) {\r\n      return 'Just now';\r\n    } else if (differenceInSeconds < 3600) {\r\n      const minutes = Math.floor(differenceInSeconds / 60);\r\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n    } else if (differenceInSeconds < 86400) {\r\n      const hours = Math.floor(differenceInSeconds / 3600);\r\n      return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n    } else if (differenceInSeconds < 2592000) {\r\n      const days = Math.floor(differenceInSeconds / 86400);\r\n      return `${days} day${days > 1 ? 's' : ''} ago`;\r\n    } else if (differenceInSeconds < 31536000) {\r\n      const months = Math.floor(differenceInSeconds / 2592000);\r\n      return `${months} month${months > 1 ? 's' : ''} ago`;\r\n    } else {\r\n      const years = Math.floor(differenceInSeconds / 31536000);\r\n      return `${years} year${years > 1 ? 's' : ''} ago`;\r\n    }\r\n  },\r\n\r\n\r\n\r\n    // Method to format the order date in the required format\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      const hours = date.getHours();\r\n      const minutes = date.getMinutes().toString().padStart(2, '0');\r\n      const period = hours >= 12 ? 'PM' : 'AM';\r\n      const hour12 = (hours % 12 || 12).toString().padStart(2, '0');\r\n      \r\n      // Format: MM-DD-YYYY with highlighted time\r\n      const formattedDate = `${month}-${day}-${year} <span class=\"highlighted-time\">${hour12}:${minutes} ${period}</span>`;\r\n      return formattedDate;\r\n    },\r\n\r\n    cancelDecline() {\r\n      this.activeDeclineOrderId = null; // Hide decline input\r\n      this.customDeclineMessage = \"\"; // Clear text\r\n    },\r\n\r\n    // Navigate to the Order Record page\r\n    goToOrderRecord() {\r\n      this.$router.push({ name: \"OrderRecord\" });  // Ensure this matches the name of the route\r\n    },\r\n\r\n    logout() {\r\n      this.$router.push({ name: \"Login\" });  // Redirect the user to the Login page (adjust the route as needed)\r\n    },\r\n\r\n    // Fetch orders only once at initial load\r\n    async fetchOrders() {\r\n      if (this.isLoading) return;\r\n      this.isLoading = true;\r\n      \r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:8000/orders\");\r\n        const data = await response.json();\r\n        if (data.orders && Array.isArray(data.orders)) {\r\n          // Filter pending orders and sort them by ID in ascending order\r\n          const pendingOrders = data.orders\r\n            .filter(order => order.status === \"pending\")\r\n            .sort((a, b) => {\r\n              // Convert order IDs to numbers for proper numerical sorting\r\n              const idA = parseInt(a.id);\r\n              const idB = parseInt(b.id);\r\n              return idA - idB; // Sort in ascending order (lower IDs first)\r\n            });\r\n          \r\n          console.log(`Fetched ${pendingOrders.length} pending orders`);\r\n          \r\n          // Important: Create a new array reference to ensure Vue reactivity\r\n          this.orders = [...pendingOrders];\r\n          \r\n          // Check if any of the fetched orders have ready notifications\r\n          // This ensures the \"Mark as Completed\" button is enabled for orders that are ready\r\n          this.orders.forEach(order => {\r\n            // If the order is already marked as ready in localStorage, keep that status\r\n            if (this.orderReadyStatus[order.id]) {\r\n              return;\r\n            }\r\n            \r\n            // Check if there's a notification for this order\r\n            const userNotificationsKey = `user_notifications_${order.customer_name}`;\r\n            const notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n            const hasReadyNotification = notifications.some(n => n.orderId === order.id);\r\n            \r\n            if (hasReadyNotification) {\r\n              this.orderReadyStatus[order.id] = true;\r\n            }\r\n          });\r\n          \r\n          // Update localStorage with any changes\r\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n          \r\n          // Force the UI to update\r\n          this.$forceUpdate();\r\n        } else {\r\n          console.error(\"Invalid data format\", data);\r\n          this.orders = [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching orders:\", error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    // Format ordered items for notification message\r\n    formatItems(items) {\r\n      if (!Array.isArray(items)) {\r\n        console.error(\"Invalid item format:\", items);\r\n        return \"Invalid item data\";\r\n      }\r\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\r\n    },\r\n\r\n    // Calculate the total price for a single order\r\n    calculateOrderTotal(items) {\r\n      if (!Array.isArray(items)) return \"₱0\";\r\n      return items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n    },\r\n\r\n    // Mark an order as completed and send notification\r\n    markAsCompleted(orderId, customerName, items) {\r\n      // Log for debugging\r\n      console.log(`Marking order ${orderId} as completed...`);\r\n      \r\n      // Ensure items is properly formatted\r\n      let processedItems = items;\r\n      if (typeof items === 'string') {\r\n        try {\r\n          processedItems = JSON.parse(items);\r\n        } catch (e) {\r\n          console.error(\"Failed to parse items:\", e);\r\n          alert(\"Error processing order items. Please try again.\");\r\n          return;\r\n        }\r\n      }\r\n      \r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ status: \"completed\" })\r\n      })\r\n        .then(response => {\r\n          // First check if the response is actually received\r\n          if (!response) {\r\n            throw new Error('No response received from server');\r\n          }\r\n          \r\n          // Then check if it's OK\r\n          if (!response.ok) {\r\n            return response.text().then(text => {\r\n              try {\r\n                // Try to parse as JSON\r\n                const data = JSON.parse(text);\r\n                throw new Error(data.detail || `Server error: ${response.status}`);\r\n              } catch (e) {\r\n                // If parsing fails, use the raw text\r\n                throw new Error(`Server error: ${response.status} - ${text || 'Unknown error'}`);\r\n              }\r\n            });\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"Order completed successfully:\", data);\r\n          \r\n          // Immediately remove from pending orders\r\n          this.orders = this.orders.filter(order => order.id !== orderId);\r\n\r\n          // Remove from orderReadyStatus\r\n          delete this.orderReadyStatus[orderId];\r\n          // Update localStorage\r\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n\r\n          // Calculate the total price\r\n          const total = processedItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n\r\n          // Prepare the notification with highlighted order details\r\n          const notification = {\r\n            orderId,\r\n            customerName,\r\n            message: `Your order is completed! ✔️ Thank you for choosing Café Beata. Enjoy your food and drinks! 🥰. <span class=\"highlighted-order-details\">Order details: ${this.formatItems(processedItems)}. Total: ₱${total}</span>`,\r\n            timestamp: new Date().toISOString(),\r\n            items: processedItems,\r\n            total,\r\n          };\r\n\r\n          // Save the notification in localStorage for the specific user\r\n          const userNotificationsKey = `user_notifications_${customerName}`;\r\n          let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n          notifications.push(notification);\r\n          localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n\r\n          // Send real-time notification via WebSocket if connected\r\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n            this.ws.send(JSON.stringify({\r\n              type: 'user_notification',\r\n              action: 'order_completed',\r\n              notification: notification,\r\n              target_user: customerName\r\n            }));\r\n          }\r\n\r\n          // Emit an event to notify other components\r\n          window.dispatchEvent(new Event(\"notificationUpdated\"));\r\n\r\n          alert(\"Order marked as completed!\");\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error marking order as completed:\", error);\r\n          alert(error.message || \"Error completing order. Please try again.\");\r\n          // Refresh orders to ensure UI is in sync\r\n          this.fetchOrders();\r\n        });\r\n    },\r\n\r\n    // Open the decline modal for a specific order\r\n    openDeclineDialog(order) {\r\n      this.activeDeclineOrderId = order.id;\r\n      this.selectedOrder = order;\r\n      this.customDeclineMessage = localStorage.getItem(`customDeclineMessage_${order.id}`) || \"We need to adjust your order due to availability issues.\";\r\n      \r\n      // Clone the items array to make it editable\r\n      this.editableItems = JSON.parse(JSON.stringify(order.items));\r\n      \r\n      // Show the modal\r\n      this.showDeclineModal = true;\r\n    },\r\n\r\n    // Close the decline modal\r\n    closeDeclineModal() {\r\n      this.showDeclineModal = false;\r\n      this.activeDeclineOrderId = null;\r\n      this.selectedOrder = null;\r\n    },\r\n\r\n    // Increment item quantity\r\n    incrementQuantity(index) {\r\n      this.editableItems[index].quantity++;\r\n    },\r\n\r\n    // Decrement item quantity\r\n    decrementQuantity(index) {\r\n      if (this.editableItems[index].quantity > 0) {\r\n        this.editableItems[index].quantity--;\r\n      }\r\n    },\r\n\r\n    // Calculate the total of adjusted items\r\n    calculateAdjustedTotal() {\r\n      return this.editableItems.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);\r\n    },\r\n\r\n    // Send order adjustment for customer approval\r\n    sendForApproval() {\r\n      if (!this.selectedOrder) return;\r\n      \r\n      const orderId = this.selectedOrder.id;\r\n      const customerName = this.selectedOrder.customer_name;\r\n      \r\n      // Calculate the total price\r\n      const total = this.calculateAdjustedTotal();\r\n      \r\n      // Format items for display\r\n      const formattedItems = this.formatItems(this.editableItems);\r\n      \r\n      // Build a more specific message about quantity adjustments\r\n      let adjustmentReasons = [];\r\n      this.editableItems.forEach((item) => {\r\n        const originalItem = this.selectedOrder.items.find(i => i.name === item.name);\r\n        if (originalItem && originalItem.quantity !== item.quantity) {\r\n          adjustmentReasons.push(`${item.name} adjusted from ${originalItem.quantity} to ${item.quantity} due to limited availability`);\r\n        }\r\n      });\r\n      \r\n      // Create the customized message with specific quantity adjustment reasons\r\n      const specificAdjustments = adjustmentReasons.length > 0 \r\n        ? `The following adjustments were made: ${adjustmentReasons.join('; ')}. ` \r\n        : '';\r\n        \r\n      // Prepare notification message with approval buttons\r\n      const message = `${this.customDeclineMessage} ${specificAdjustments}Please review the adjusted order: ${formattedItems}. Total: ₱${total}`;\r\n      \r\n      // Create adjustment notification with approval options\r\n      const notification = {\r\n        orderId,\r\n        customerName,\r\n        message,\r\n        timestamp: new Date().toISOString(),\r\n        items: this.editableItems,\r\n        total,\r\n        requiresApproval: true,  // Flag to indicate this needs user approval\r\n        originalItems: this.selectedOrder.items  // Store original items for reference\r\n      };\r\n      \r\n      // Set loading state\r\n      this.isUpdating = true;\r\n      \r\n      // First update the order in the database with the adjusted quantities\r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          items: this.editableItems,\r\n          status: \"pending\",  // Keep status as pending\r\n          isPendingApproval: true // Add flag for pending approval\r\n        })\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          return response.text().then(text => {\r\n            console.error(`Error status: ${response.status}, details: ${text}`);\r\n            throw new Error(`Failed to update order (${response.status}): ${text}`);\r\n          });\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Order items updated in database successfully\", data);\r\n        \r\n        // Now save to user's notifications\r\n        const userNotificationsKey = `user_notifications_${customerName}`;\r\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n        notifications.push(notification);\r\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n        \r\n        // Send WebSocket notification if connected\r\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n          this.ws.send(JSON.stringify({\r\n            type: 'user_notification',\r\n            action: 'order_adjustment',  // Set specific action type for adjustment requests\r\n            notification: notification,\r\n            target_user: customerName\r\n          }));\r\n        }\r\n        \r\n        // Update the order in the UI immediately to show adjusted quantities\r\n        const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n        if (orderIndex !== -1) {\r\n          // Create a copy with adjusted items\r\n          const updatedOrder = {\r\n            ...this.orders[orderIndex],\r\n            items: this.editableItems,\r\n            isPendingApproval: true // Add flag for styling\r\n          };\r\n          \r\n          // Update the order in the list - using Vue 3 array mutation\r\n          this.orders = [\r\n            ...this.orders.slice(0, orderIndex),\r\n            updatedOrder,\r\n            ...this.orders.slice(orderIndex + 1)\r\n          ];\r\n        }\r\n        \r\n        // Show confirmation\r\n        this.notificationMessage = \"Adjustment request sent to customer for approval!\";\r\n        this.notificationClass = \"success-notification\";\r\n        this.showNotification();\r\n        \r\n        // Close the modal and reset loading state\r\n        this.isUpdating = false;\r\n        this.closeDeclineModal();\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error updating order items:\", error);\r\n        \r\n        // Reset loading state but keep modal open for retry\r\n        this.isUpdating = false;\r\n        \r\n        // Show error notification\r\n        this.notificationMessage = `Error: ${error.message}`;\r\n        this.notificationClass = \"error-notification\";\r\n        this.showNotification();\r\n        \r\n        // Ask user if they want to retry via modal or notification\r\n        if (confirm(`Failed to update order: ${error.message}. Do you want to retry?`)) {\r\n          // Retry the update\r\n          this.sendForApproval();\r\n        }\r\n      });\r\n    },\r\n\r\n    // Decline the order directly\r\n    confirmDecline() {\r\n      if (!this.selectedOrder) return;\r\n      \r\n      // Show loading indicator\r\n      this.isUpdating = true;\r\n      \r\n      const orderId = this.selectedOrder.id;\r\n      const customerName = this.selectedOrder.customer_name;\r\n      const items = this.selectedOrder.items;\r\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\r\n      \r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ status: \"declined\" })\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        // Remove from pending orders immediately\r\n        this.orders = this.orders.filter(order => order.id !== orderId);\r\n        \r\n        // Remove from orderReadyStatus if it exists\r\n        if (this.orderReadyStatus[orderId]) {\r\n          delete this.orderReadyStatus[orderId];\r\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n        }\r\n        \r\n        // Calculate total\r\n        const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n        \r\n        // Prepare notification\r\n        const notification = {\r\n          orderId,\r\n          customerName,\r\n          message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\r\n          timestamp: new Date().toISOString(),\r\n          items, \r\n          total,\r\n        };\r\n        \r\n        // Save notification to localStorage\r\n        const userNotificationsKey = `user_notifications_${customerName}`;\r\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n        notifications.push(notification);\r\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n        \r\n        // Send direct WebSocket notification for real-time updates\r\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n          console.log('Sending WebSocket notification for declined order:', orderId);\r\n          \r\n          // First send the standard notification\r\n          this.ws.send(JSON.stringify({\r\n            type: 'user_notification',\r\n            action: 'order_declined',\r\n            notification: notification,\r\n            target_user: customerName\r\n          }));\r\n          \r\n          // Then send a special order_declined type message for real-time notification\r\n          this.ws.send(JSON.stringify({\r\n            type: 'order_declined',\r\n            order_id: orderId,\r\n            customer_name: customerName,\r\n            reason: message,\r\n            timestamp: new Date().toISOString()\r\n          }));\r\n        }\r\n        \r\n        // Reset loading state\r\n        this.isUpdating = false;\r\n        \r\n        // Close the modal\r\n        this.closeDeclineModal();\r\n        \r\n        // Show success message\r\n        this.notificationMessage = `Order #${orderId} has been declined`;\r\n        this.notificationClass = \"closed-notification\";\r\n        this.showNotification();\r\n        \r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error declining order:\", error);\r\n        this.isUpdating = false;\r\n        alert(\"Error declining order. Please try again.\");\r\n      });\r\n    },\r\n\r\n    // Original decline order function - unchanged\r\n    declineOrder(orderId, customerName, items) {\r\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\r\n\r\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ status: \"declined\" }) // Properly formatted JSON\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(() => {\r\n          // Immediately remove from pending orders\r\n          this.orders = this.orders.filter(order => order.id !== orderId);\r\n\r\n          // Remove from orderReadyStatus if it exists\r\n          if (this.orderReadyStatus[orderId]) {\r\n            delete this.orderReadyStatus[orderId];\r\n            // Update localStorage\r\n            localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n          }\r\n\r\n          // Calculate the total price\r\n          const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n\r\n          // Prepare the notification with the custom message and order details\r\n          const notification = {\r\n            orderId,\r\n            customerName,\r\n            message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\r\n            timestamp: new Date().toISOString(),\r\n            items,  // Include items in the notification\r\n            total,  // Include total in the notification\r\n          };\r\n\r\n          // Save the notification in localStorage for the specific user\r\n          const userNotificationsKey = `user_notifications_${customerName}`;\r\n          let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n          notifications.push(notification);\r\n          localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n\r\n          // Send direct WebSocket notification for real-time updates\r\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n            console.log('Sending WebSocket notification for declined order:', orderId);\r\n            \r\n            // First send the standard notification\r\n            this.ws.send(JSON.stringify({\r\n              type: 'user_notification',\r\n              action: 'order_declined',\r\n              notification: notification,\r\n              target_user: customerName\r\n            }));\r\n            \r\n            // Then send a special order_declined type message for real-time notification\r\n            this.ws.send(JSON.stringify({\r\n              type: 'order_declined',\r\n              order_id: orderId,\r\n              customer_name: customerName,\r\n              reason: message,\r\n              timestamp: new Date().toISOString()\r\n            }));\r\n          }\r\n\r\n          // Emit an event to notify other components (optional)\r\n          window.dispatchEvent(new Event(\"orderDeclined\"));\r\n\r\n          // Show success message\r\n          this.notificationMessage = `Order #${orderId} has been declined`;\r\n          this.notificationClass = \"closed-notification\";\r\n          this.showNotification();\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error declining order:\", error);\r\n          this.isUpdating = false;\r\n          alert(\"Error declining order. Please try again.\");\r\n        });\r\n    },\r\n\r\n    // Save the decline message to localStorage whenever it's updated\r\n    updateDeclineMessage() {\r\n      if (this.activeDeclineOrderId !== null) {\r\n        localStorage.setItem(`customDeclineMessage_${this.activeDeclineOrderId}`, this.customDeclineMessage);\r\n      }\r\n    },\r\n\r\n    // New method to handle the \"Order Ready\" button click and show pop-up notification\r\n    sendOrderReadyNotification(orderId, customerName, items) {\r\n      const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\r\n\r\n      const notification = {\r\n        orderId,\r\n        customerName,\r\n        message: `Your order is now ready! Proceed to the cashier for payment and pickup. ☺️ Order details: ${this.formatItems(items)}. Total: ₱${total}`,\r\n        timestamp: new Date().toISOString(),\r\n        items,\r\n        total,\r\n      };\r\n\r\n      // Save the notification in localStorage for the specific user\r\n      const userNotificationsKey = `user_notifications_${customerName}`;\r\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\r\n      \r\n      // Add the notification without replacing existing ones\r\n      notifications.push(notification);\r\n      \r\n      // Sort notifications by timestamp (newest first)\r\n      notifications.sort((a, b) => {\r\n        const dateA = new Date(a.timestamp);\r\n        const dateB = new Date(b.timestamp);\r\n        return dateB - dateA;\r\n      });\r\n      \r\n      localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\r\n\r\n      // Set order as ready using direct assignment\r\n      this.orderReadyStatus[orderId] = true;\r\n      // Force reactivity update\r\n      this.orderReadyStatus = { ...this.orderReadyStatus };\r\n      \r\n      // Save orderReadyStatus to localStorage\r\n      localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n\r\n      // Send real-time notification via WebSocket if connected\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n        this.ws.send(JSON.stringify({\r\n          type: 'user_notification',\r\n          action: 'order_ready',\r\n          notification: notification,\r\n          target_user: customerName\r\n        }));\r\n      }\r\n\r\n      // Show success notification to admin\r\n      this.notificationSent = true;\r\n      setTimeout(() => {\r\n        this.notificationSent = false;\r\n      }, 3000);\r\n    },\r\n\r\n    // Toggle menu editor popup visibility\r\n    toggleMenuEditor() {\r\n      this.showMenuEditor = !this.showMenuEditor;\r\n      \r\n      // When opening the modal, prevent scrolling on the body\r\n      if (this.showMenuEditor) {\r\n        document.body.style.overflow = 'hidden';\r\n      } else {\r\n        document.body.style.overflow = '';\r\n      }\r\n    },\r\n\r\n    // Toggle sidebar visibility\r\n    toggleSidebar() {\r\n      this.isSidebarOpen = !this.isSidebarOpen;\r\n      // When opening the sidebar, prevent scrolling on the body\r\n      if (this.isSidebarOpen) {\r\n        document.body.style.overflow = 'hidden';\r\n      } else {\r\n        document.body.style.overflow = '';\r\n      }\r\n    },\r\n\r\n    // Close sidebar - only called when X button is clicked\r\n    closeSidebar() {\r\n      this.isSidebarOpen = false;\r\n      document.body.style.overflow = '';\r\n    },\r\n\r\n    // Handle clicks outside sidebar - removed to prevent auto-closing when clicking outside\r\n    handleOutsideClick() {\r\n      // Do nothing - sidebar should stay open\r\n    },\r\n\r\n    // Add new methods for completion confirmation\r\n    showCompletionConfirmation(orderId) {\r\n      this.confirmCompleteOrderId = orderId;\r\n    },\r\n\r\n    confirmCompletion() {\r\n      const order = this.orders.find(o => o.id === this.confirmCompleteOrderId);\r\n      if (order) {\r\n        this.markAsCompleted(order.id, order.customer_name, order.items);\r\n      }\r\n      this.confirmCompleteOrderId = null;\r\n    },\r\n\r\n    cancelCompletion() {\r\n      this.confirmCompleteOrderId = null;\r\n    },\r\n\r\n    toggleStockManager() {\r\n      this.showStockManager = !this.showStockManager;\r\n      if (this.showStockManager) {\r\n        this.fetchStockItems();\r\n      }\r\n    },\r\n\r\n    async fetchStockItems() {\r\n      try {\r\n        const response = await fetch('http://localhost:8000/api/stocks');\r\n        const data = await response.json();\r\n        console.log('Fetched stock data:', data); // Debug log\r\n        \r\n        if (data.success && Array.isArray(data.items)) {\r\n          // Map the items to include name and category from item_name\r\n          this.stockItems = data.items.map(item => ({\r\n            id: item.item_id, // Use item_id from the API response\r\n            name: item.item_name,\r\n            category: item.category,\r\n            quantity: item.quantity,\r\n            min_stock_level: item.min_stock_level\r\n          }));\r\n          \r\n          // Update unique categories\r\n          this.uniqueCategories = [...new Set(this.stockItems.map(item => item.category))];\r\n          console.log('Processed stock items:', this.stockItems); // Debug log\r\n        } else {\r\n          console.error('Invalid data format received:', data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching stock items:', error);\r\n      }\r\n    },\r\n\r\n    getStockStatus(item) {\r\n      if (item.quantity === 0) return 'Disabled (Out of Stock)';\r\n      if (item.quantity >= 999999) return 'Enabled (Unlimited)';\r\n      if (item.quantity <= item.min_stock_level) return 'Low Stock';\r\n      return 'In Stock';\r\n    },\r\n\r\n    getStockStatusClass(item) {\r\n      if (item.quantity === 0) return 'status-disabled';\r\n      if (item.quantity >= 999999) return 'status-enabled';\r\n      if (item.quantity <= item.min_stock_level) return 'status-low';\r\n      return 'status-ok';\r\n    },\r\n\r\n    openStockUpdateModal(item) {\r\n      console.log('Opening modal for item:', item); // Debug log\r\n      this.selectedItem = item;\r\n      this.showStockUpdateModal = true;\r\n      this.stockUpdateQuantity = 0;\r\n      this.stockUpdateAction = 'add';\r\n      this.stockUpdateReason = '';\r\n    },\r\n\r\n    closeStockUpdateModal() {\r\n      this.showStockUpdateModal = false;\r\n      this.selectedItem = null;\r\n      this.stockUpdateQuantity = 0;\r\n      this.stockUpdateReason = '';\r\n    },\r\n\r\n    async submitStockUpdate() {\r\n      // Validate required fields\r\n      if (!this.selectedItem || !this.selectedItem.id) {\r\n        alert('No item selected');\r\n        return;\r\n      }\r\n\r\n      if (!this.stockUpdateAction) {\r\n        alert('Please select an action');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        let requestBody = {};\r\n        \r\n        // Handle different action types\r\n        if (this.stockUpdateAction === 'disabled') {\r\n          // For disabled, set quantity to 0 and use 'set' action\r\n          requestBody = {\r\n            action: 'set',\r\n            quantity: 0,\r\n            reason: this.stockUpdateReason || 'Disabled - Out of Stock'\r\n          };\r\n        } else if (this.stockUpdateAction === 'enabled') {\r\n          // For enabled, set a special value to indicate unlimited\r\n          requestBody = {\r\n            action: 'set',\r\n            quantity: 999999, // Very large number to represent unlimited\r\n            reason: this.stockUpdateReason || 'Enabled - Unlimited Orders'\r\n          };\r\n        } else {\r\n          // For regular actions (add, subtract, set)\r\n          if (!this.stockUpdateQuantity || this.stockUpdateQuantity <= 0) {\r\n            alert('Please enter a valid quantity (greater than 0)');\r\n            return;\r\n          }\r\n\r\n          // Additional validation for subtract action\r\n          if (this.stockUpdateAction === 'subtract' && this.stockUpdateQuantity > this.selectedItem.quantity) {\r\n            alert('Cannot remove more than current stock');\r\n            return;\r\n          }\r\n          \r\n          requestBody = {\r\n            action: this.stockUpdateAction,\r\n            quantity: parseInt(this.stockUpdateQuantity),\r\n            reason: this.stockUpdateReason || 'Stock update'\r\n          };\r\n        }\r\n\r\n        console.log('Sending request:', requestBody);\r\n\r\n        const response = await fetch(`http://localhost:8000/api/stocks/${this.selectedItem.id}/update`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestBody)\r\n        });\r\n\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(data.detail || 'Failed to update stock');\r\n        }\r\n\r\n        if (data.success) {\r\n          alert('Stock updated successfully!');\r\n          this.closeStockUpdateModal();\r\n          await this.fetchStockItems(); // Refresh the stock list\r\n        } else {\r\n          throw new Error(data.message || 'Failed to update stock');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating stock:', error);\r\n        alert(error.message || 'Failed to update stock. Please try again.');\r\n      }\r\n    },\r\n\r\n    initWebSocket() {\r\n      // Use the same host as the API\r\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\r\n      \r\n      // Close existing connection if it exists\r\n      if (this.ws) {\r\n        try {\r\n          this.ws.close();\r\n        } catch (e) {\r\n          console.error(\"Error closing existing WebSocket:\", e);\r\n        }\r\n      }\r\n      \r\n      console.log('Initializing WebSocket connection...');\r\n      this.ws = new WebSocket(wsUrl);\r\n      \r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket connected');\r\n        this.wsConnected = true;\r\n        \r\n        // Set up a periodic ping to keep the connection alive\r\n        if (this.pingInterval) clearInterval(this.pingInterval);\r\n        this.pingInterval = setInterval(() => {\r\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n            this.ws.send(JSON.stringify({ type: 'ping' }));\r\n          }\r\n        }, 30000); // ping every 30 seconds\r\n      };\r\n      \r\n      this.ws.onmessage = async (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('WebSocket message received:', data);\r\n\r\n          if (data.type === 'new_order') {\r\n            // Handle new order\r\n            if (data.order.status === 'pending') {\r\n              // Add the new order to the orders array\r\n              this.orders.push(data.order);\r\n              \r\n              // Re-sort the orders array by ID in ascending order\r\n              this.orders.sort((a, b) => {\r\n                const idA = parseInt(a.id);\r\n                const idB = parseInt(b.id);\r\n                return idA - idB; // Sort in ascending order (lower IDs first)\r\n              });\r\n            }\r\n          } else if (data.type === 'order_status_update') {\r\n            // Handle order status update\r\n            if (data.status !== 'pending') {\r\n              this.orders = this.orders.filter(order => order.id !== data.order_id);\r\n              \r\n              // Remove from orderReadyStatus if it exists\r\n              if (this.orderReadyStatus[data.order_id]) {\r\n                delete this.orderReadyStatus[data.order_id];\r\n                // Update localStorage\r\n                localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\r\n              }\r\n            }\r\n          } else if (data.type === 'admin_notification') {\r\n            // Handle customer responses to order adjustments\r\n            if (data.action === 'adjustment_response') {\r\n              // Process the customer's response to an order adjustment\r\n              const notification = data.notification;\r\n              const orderId = notification.orderId;\r\n              \r\n              if (notification.message.includes('APPROVED')) {\r\n                // Find the order and update it with adjusted items\r\n                const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n                if (orderIndex !== -1) {\r\n                  // Update the order with the adjusted items and remove pending approval flag\r\n                  const updatedOrder = {\r\n                    ...this.orders[orderIndex],\r\n                    items: notification.items,\r\n                    isPendingApproval: false // Remove the pending approval flag\r\n                  };\r\n                  \r\n                  // Update using Vue 3 reactivity \r\n                  this.orders = [\r\n                    ...this.orders.slice(0, orderIndex),\r\n                    updatedOrder,\r\n                    ...this.orders.slice(orderIndex + 1)\r\n                  ];\r\n                  \r\n                  // Show success notification\r\n                  this.notificationMessage = `Customer has approved order adjustments for Order #${orderId}`;\r\n                  this.notificationClass = \"open-notification\";\r\n                  this.showNotification();\r\n                }\r\n              } else if (notification.message.includes('DECLINED')) {\r\n                // Remove the order from the list if customer declined\r\n                this.orders = this.orders.filter(o => o.id !== orderId);\r\n                \r\n                // Show declined notification\r\n                this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\r\n                this.notificationClass = \"closed-notification\";\r\n                this.showNotification();\r\n              }\r\n              \r\n              // Mark the notification as processed\r\n              notification.processed = true;\r\n              \r\n              // Update the notification in localStorage\r\n              const adminNotificationsKey = 'user_notifications_Admin';\r\n              let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\r\n              \r\n              // Find and update the processed notification\r\n              const notificationIndex = adminNotifications.findIndex(n => \r\n                n.isAdminNotification && n.orderId === orderId && !n.processed\r\n              );\r\n              \r\n              if (notificationIndex !== -1) {\r\n                adminNotifications[notificationIndex].processed = true;\r\n                localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\r\n              }\r\n            }\r\n          } else if (data.type === 'customer_approval') {\r\n            // Direct customer approval handling for real-time updates\r\n            const { orderId, approved } = data;\r\n            \r\n            if (approved) {\r\n              console.log(`CRITICAL FIX: Customer approved order #${orderId} - handling the single-order case specially`);\r\n              \r\n              // Check if this is the single-order case (the problematic case)\r\n              const isSingleOrder = this.orders.length === 1;\r\n              \r\n              // Always try direct DOM manipulation first\r\n              try {\r\n                const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\r\n                if (orderElement) {\r\n                  console.log(\"Found order element in DOM, applying direct DOM updates\");\r\n                  \r\n                  // Remove the pending approval class and add all styling inline\r\n                  orderElement.classList.remove('order-pending-approval');\r\n                  orderElement.style.backgroundColor = \"#ffffff\";\r\n                  orderElement.style.border = \"2px solid #ddd\";\r\n                  orderElement.style.boxShadow = \"0 2px 5px rgba(0, 0, 0, 0.1)\";\r\n                  \r\n                  // Hide the PENDING APPROVAL label\r\n                  const style = document.createElement('style');\r\n                  style.id = `fix-order-${orderId}`;\r\n                  style.textContent = `\r\n                    .order-item[data-order-id=\"${orderId}\"]::before {\r\n                      display: none !important;\r\n                    }\r\n                    .order-item[data-order-id=\"${orderId}\"] h3 {\r\n                      color: #333 !important;\r\n                    }\r\n                    .order-item[data-order-id=\"${orderId}\"] .order-total {\r\n                      color: #333 !important;\r\n                    }\r\n                  `;\r\n                  document.head.appendChild(style);\r\n                  \r\n                  // Update the status text\r\n                  const statusParagraphs = orderElement.querySelectorAll('p');\r\n                  for (const paragraph of statusParagraphs) {\r\n                    if (paragraph.innerHTML.includes('Status:')) {\r\n                      paragraph.innerHTML = '<strong>Status:</strong> pending';\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n                \r\n                // For the single-order case, recreate the entire orders container\r\n                if (isSingleOrder) {\r\n                  console.log(\"Single order detected - using special handling\");\r\n                  \r\n                  // 1. Get the order container\r\n                  const ordersContainer = document.querySelector('.orders-container');\r\n                  if (!ordersContainer) {\r\n                    console.error(\"Orders container not found\");\r\n                    return;\r\n                  }\r\n                  \r\n                  // 2. Find the order in our data\r\n                  const order = this.orders.find(o => o.id === orderId);\r\n                  if (!order) {\r\n                    console.error(\"Order not found in data\");\r\n                    return;\r\n                  }\r\n                  \r\n                  // 3. Create an updated version of the order without pending approval\r\n                  const updatedOrder = { ...order, isPendingApproval: false };\r\n                  \r\n                  // 4. Replace the entire orders list HTML\r\n                  const ordersList = ordersContainer.querySelector('.orders-list');\r\n                  if (!ordersList) {\r\n                    console.error(\"Orders list not found\");\r\n                    return;\r\n                  }\r\n                  \r\n                  // Create a new order item element \r\n                  const newOrderItemHTML = `\r\n                    <div class=\"order-item\" data-order-id=\"${updatedOrder.id}\">\r\n                      <div class=\"order-details\">\r\n                        <h3>Order ID: ${updatedOrder.id}</h3>\r\n                        <p><strong>Customer:</strong> ${updatedOrder.customer_name}</p>\r\n                        <p><strong>Status:</strong> ${updatedOrder.status}</p>\r\n                        <p><strong>Time Order:</strong> ${this.timeAgo(updatedOrder.created_at)}</p>\r\n                        \r\n                        <div class=\"items-section\">\r\n                          <strong>Items:</strong>\r\n                          <ul>\r\n                            ${updatedOrder.items.map(item => \r\n                              `<li>${item.name} - ₱${item.price} x ${item.quantity}</li>`\r\n                            ).join('')}\r\n                          </ul>\r\n                        </div>\r\n                        \r\n                        <div class=\"order-total\">\r\n                          <p><strong>Total Amount: ₱${this.calculateOrderTotal(updatedOrder.items)}</strong></p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div class=\"order-actions\">\r\n                        <button \r\n                          onclick=\"document.dispatchEvent(new CustomEvent('completion-confirmation', {detail: {orderId: ${updatedOrder.id}}}))\"\r\n                          class=\"mark-completed-btn small-btn ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\"\r\n                          ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\r\n                        >\r\n                          Mark as Completed\r\n                        </button>\r\n                        \r\n                        <button \r\n                          onclick=\"document.dispatchEvent(new CustomEvent('order-ready', {detail: {orderId: ${updatedOrder.id}, customerName: '${updatedOrder.customer_name}'}}))\"\r\n                          class=\"order-ready-btn small-btn\"\r\n                        >\r\n                          Order Ready 🔔\r\n                        </button>\r\n                        \r\n                        <button \r\n                          onclick=\"document.dispatchEvent(new CustomEvent('decline-dialog', {detail: {orderId: ${updatedOrder.id}}}))\"\r\n                          class=\"decline-btn\"\r\n                        >\r\n                          Decline\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  `;\r\n                  \r\n                  // Replace the content\r\n                  ordersList.innerHTML = newOrderItemHTML;\r\n                  \r\n                  // Setup event listeners for our custom events\r\n                  if (!this._customListenersAdded) {\r\n                    document.addEventListener('completion-confirmation', (e) => {\r\n                      this.showCompletionConfirmation(e.detail.orderId);\r\n                    });\r\n                    \r\n                    document.addEventListener('order-ready', (e) => {\r\n                      this.sendOrderReadyNotification(e.detail.orderId, e.detail.customerName, updatedOrder.items);\r\n                    });\r\n                    \r\n                    document.addEventListener('decline-dialog', (e) => {\r\n                      // Find the order again since we need the full object\r\n                      const order = this.orders.find(o => o.id === e.detail.orderId);\r\n                      if (order) {\r\n                        this.openDeclineDialog(order);\r\n                      }\r\n                    });\r\n                    \r\n                    this._customListenersAdded = true;\r\n                  }\r\n                  \r\n                  // Also update our Vue data model\r\n                  this.orders = [updatedOrder];\r\n                }\r\n              } catch (error) {\r\n                console.error(\"Error during direct DOM manipulation:\", error);\r\n              }\r\n              \r\n              // Always show notification to admin\r\n              this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\r\n              this.notificationClass = \"open-notification\";\r\n              this.showNotification();\r\n              \r\n              // Update the database in the background\r\n              fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\r\n                method: \"PUT\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                  status: \"pending\",\r\n                  isPendingApproval: false\r\n                })\r\n              })\r\n              .then(response => response.json())\r\n              .then(data => {\r\n                console.log(\"Database updated to reflect customer approval:\", data);\r\n                \r\n                // Always fetch all orders as a fallback\r\n                setTimeout(() => {\r\n                  this.fetchPendingOrders();\r\n                }, 1000);\r\n              })\r\n              .catch(err => {\r\n                console.error(\"Error updating database after customer approval:\", err);\r\n                \r\n                // Force reload as last resort for error cases\r\n                if (isSingleOrder) {\r\n                  setTimeout(() => location.reload(), 1000);\r\n                }\r\n              });\r\n            } else {\r\n              // If declined, handle in Vue since that part seems to work\r\n              this.orders = this.orders.filter(o => o.id !== orderId);\r\n              \r\n              // Show notification about the decline\r\n              this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\r\n              this.notificationClass = \"closed-notification\";\r\n              this.showNotification();\r\n            }\r\n          } else if (data.type === 'stock_update') {\r\n            // Handle stock update\r\n            const stockItem = this.stockItems.find(item => item.id === data.item_id);\r\n            if (stockItem) {\r\n              stockItem.quantity = data.new_quantity;\r\n              stockItem.min_stock_level = data.min_stock_level;\r\n              \r\n              // Update unique categories if needed\r\n              if (!this.uniqueCategories.includes(data.category)) {\r\n                this.uniqueCategories.push(data.category);\r\n              }\r\n            }\r\n            // Refresh stock items to ensure all data is up to date\r\n            await this.fetchStockItems();\r\n          } else if (data.type === 'menu_update') {\r\n            // Handle menu updates (new items, edited items, or deleted items)\r\n            await this.fetchStockItems(); // Refresh stock items when menu changes\r\n          } else if (data.type === 'category_update') {\r\n            // Handle category updates\r\n            await this.fetchStockItems(); // Refresh stock items when categories change\r\n            \r\n            // Update unique categories list\r\n            if (data.action === 'add' && data.category && data.category.name) {\r\n              if (!this.uniqueCategories.includes(data.category.name)) {\r\n                this.uniqueCategories.push(data.category.name);\r\n              }\r\n            } else if (data.action === 'update' && data.category) {\r\n              // Replace old category name with new one\r\n              const index = this.uniqueCategories.indexOf(data.category.old_name);\r\n              if (index !== -1) {\r\n                this.uniqueCategories[index] = data.category.name;\r\n              } else if (!this.uniqueCategories.includes(data.category.name)) {\r\n                this.uniqueCategories.push(data.category.name);\r\n              }\r\n              \r\n              // Update selected category if it was renamed\r\n              if (this.selectedCategory === data.category.old_name) {\r\n                this.selectedCategory = data.category.name;\r\n              }\r\n            } else if (data.action === 'delete' && data.category_name) {\r\n              // Remove deleted category\r\n              this.uniqueCategories = this.uniqueCategories.filter(cat => cat !== data.category_name);\r\n              \r\n              // Reset selected category if it was deleted\r\n              if (this.selectedCategory === data.category_name) {\r\n                this.selectedCategory = '';\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing WebSocket message:', error);\r\n        }\r\n      };\r\n      \r\n      this.ws.onclose = () => {\r\n        console.log('WebSocket disconnected');\r\n        this.wsConnected = false;\r\n        // Try to reconnect after 5 seconds\r\n        setTimeout(() => {\r\n          this.initWebSocket();\r\n        }, 5000);\r\n      };\r\n      \r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.wsConnected = false;\r\n      };\r\n    },\r\n\r\n    // Handle localStorage changes for admin notifications\r\n    handleStorageEvent(event) {\r\n      // Check if the storage event is for admin notifications\r\n      if (event.key === 'user_notifications_Admin') {\r\n        // Process new admin notifications\r\n        this.processAdminNotifications();\r\n      }\r\n    },\r\n    \r\n    // Process admin notifications from localStorage\r\n    processAdminNotifications() {\r\n      // Get admin notifications \r\n      const adminNotificationsKey = 'user_notifications_Admin';\r\n      const adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\r\n      \r\n      // Check for unprocessed customer response notifications\r\n      const unprocessedNotifications = adminNotifications.filter(n => \r\n        n.isAdminNotification && \r\n        (n.message.includes('APPROVED') || n.message.includes('DECLINED')) && \r\n        !n.processed\r\n      );\r\n      \r\n      // Process each notification\r\n      unprocessedNotifications.forEach(notification => {\r\n        const orderId = notification.orderId;\r\n        \r\n        if (notification.message.includes('APPROVED')) {\r\n          // If customer approved adjustments\r\n          // Find the order and update it\r\n          const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n          \r\n          if (orderIndex !== -1) {\r\n            // Update the order with adjusted items\r\n            this.orders[orderIndex].items = notification.items;\r\n            \r\n            // Mark the notification as processed\r\n            notification.processed = true;\r\n          }\r\n        } else if (notification.message.includes('DECLINED')) {\r\n          // If customer declined, remove the order\r\n          this.orders = this.orders.filter(o => o.id !== orderId);\r\n          \r\n          // Mark the notification as processed\r\n          notification.processed = true;\r\n        }\r\n      });\r\n      \r\n      // Update the processed notifications in localStorage\r\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\r\n      \r\n      // Show notification to admin about the response\r\n      if (unprocessedNotifications.length > 0) {\r\n        const lastNotification = unprocessedNotifications[unprocessedNotifications.length - 1];\r\n        this.notificationMessage = lastNotification.message;\r\n        this.notificationClass = lastNotification.message.includes('APPROVED') ? \r\n          'open-notification' : 'closed-notification';\r\n        this.showNotification();\r\n      }\r\n    },\r\n    \r\n    // Fetch pending orders - wrapper for fetchOrders for consistency\r\n    fetchPendingOrders() {\r\n      this.fetchOrders();\r\n    },\r\n    \r\n    // Connect to WebSocket - renamed from initWebSocket for consistency\r\n    connectWebSocket() {\r\n      this.initWebSocket();\r\n    },\r\n\r\n    // Add this method to force refresh orders after WebSocket updates\r\n    forceRefreshOrder(orderId) {\r\n      console.log(`Forcing refresh for order #${orderId}, current orders count: ${this.orders.length}`);\r\n      \r\n      // Find the order that needs refreshing\r\n      const orderIndex = this.orders.findIndex(o => o.id === orderId);\r\n      \r\n      if (orderIndex !== -1) {\r\n        // Fetch the latest order data from the server to ensure it's up to date\r\n        fetch(`http://127.0.0.1:8000/orders/${orderId}`)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if (data) {\r\n              console.log('Fetched fresh order data for real-time update:', data);\r\n              \r\n              // Create a fresh order object with the latest data\r\n              const updatedOrder = {\r\n                ...data,\r\n                isPendingApproval: data.isPendingApproval || false // Ensure the flag is set correctly\r\n              };\r\n              \r\n              // Special handling for single order\r\n              if (this.orders.length === 1) {\r\n                this.orders = [updatedOrder];\r\n              } else {\r\n                // Replace the order in the array using Vue reactivity\r\n                this.orders = [\r\n                  ...this.orders.slice(0, orderIndex),\r\n                  updatedOrder,\r\n                  ...this.orders.slice(orderIndex + 1)\r\n                ];\r\n              }\r\n              \r\n              // Force the component to re-render\r\n              this.$forceUpdate();\r\n              \r\n              console.log('Order updated successfully in UI:', updatedOrder);\r\n              \r\n              // If order is approved but UI doesn't update, try refreshing all orders\r\n              if (!updatedOrder.isPendingApproval) {\r\n                setTimeout(() => {\r\n                  this.fetchPendingOrders();\r\n                }, 300);\r\n              }\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error refreshing order:', error);\r\n            // Fallback to refreshing all orders on error\r\n            this.fetchPendingOrders();\r\n          });\r\n      } else {\r\n        console.log(`Order #${orderId} not found in current orders, refreshing all orders`);\r\n        // If the order isn't found in the current array, refresh all orders\r\n        this.fetchPendingOrders();\r\n      }\r\n    },\r\n\r\n    // Add direct DOM manipulation method to fix pending approval status when reactivity fails\r\n    forceFixPendingUI(orderId) {\r\n      console.log(`CRITICAL FIX: Using direct DOM manipulation to fix UI for order #${orderId}`);\r\n      \r\n      try {\r\n        // Find the order element\r\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\r\n        if (!orderElement) {\r\n          console.log(\"Order element not found for direct fix\");\r\n          return false;\r\n        }\r\n        \r\n        // Remove the critical class that causes the red border\r\n        orderElement.classList.remove('order-pending-approval');\r\n        \r\n        // Add a success indicator class\r\n        orderElement.classList.add('order-approved-success');\r\n        \r\n        // Find and update status text\r\n        const statusParagraphs = orderElement.querySelectorAll('p');\r\n        for (const paragraph of statusParagraphs) {\r\n          if (paragraph.textContent.includes(\"Status:\")) {\r\n            paragraph.innerHTML = '<strong>Status:</strong> pending';\r\n            console.log('Updated status text');\r\n          }\r\n        }\r\n        \r\n        // Remove the \"PENDING APPROVAL\" label\r\n        // Create a specific style for this order element\r\n        const styleId = `order-${orderId}-fix`;\r\n        let styleElement = document.getElementById(styleId);\r\n        \r\n        if (!styleElement) {\r\n          styleElement = document.createElement('style');\r\n          styleElement.id = styleId;\r\n          document.head.appendChild(styleElement);\r\n        }\r\n        \r\n        styleElement.textContent = `\r\n          .order-item[data-order-id=\"${orderId}\"]::before {\r\n            display: none !important;\r\n          }\r\n          .order-item[data-order-id=\"${orderId}\"].order-pending-approval {\r\n            background-color: #ffffff !important;\r\n            border: 2px solid #ddd !important;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;\r\n          }\r\n          .order-item[data-order-id=\"${orderId}\"] h3 {\r\n            color: #333 !important;\r\n          }\r\n          .order-item[data-order-id=\"${orderId}\"] .order-total {\r\n            color: #333 !important;\r\n          }\r\n          .order-approved-success {\r\n            animation: successPulse 1s;\r\n          }\r\n          @keyframes successPulse {\r\n            0% { background-color: #e6ffe6; }\r\n            50% { background-color: #ccffcc; }\r\n            100% { background-color: #ffffff; }\r\n          }\r\n        `;\r\n        \r\n        console.log(\"Direct DOM manipulation complete - critical CSS override applied\");\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Error during direct DOM manipulation:\", error);\r\n        return false;\r\n      }\r\n    },\r\n\r\n    // Completely bypass Vue for this critical update\r\n    handleApprovalBypassVue(orderId) {\r\n      // Force a direct manipulation of the DOM \r\n      const fixed = this.forceFixPendingUI(orderId);\r\n      \r\n      // If direct manipulation succeeded, set a flag to prevent further attempts\r\n      if (fixed) {\r\n        // Store fixed orders in localStorage to avoid repeated fixes\r\n        const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\r\n        if (!fixedOrders.includes(orderId)) {\r\n          fixedOrders.push(orderId);\r\n          localStorage.setItem('fixedApprovedOrders', JSON.stringify(fixedOrders));\r\n        }\r\n        \r\n        // Show feedback to admin\r\n        this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\r\n        this.notificationClass = \"open-notification\";\r\n        this.showNotification();\r\n      }\r\n      \r\n      // Force refresh orders after a short delay\r\n      setTimeout(() => {\r\n        this.fetchPendingOrders();\r\n      }, 1000);\r\n    },\r\n\r\n    toggleChangePassword() {\r\n      this.showChangePasswordModal = !this.showChangePasswordModal;\r\n      if (this.isSidebarOpen && window.innerWidth <= 768) {\r\n        this.toggleSidebar();\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchPendingOrders();\r\n    // Set up automatic refresh every 60 seconds\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchPendingOrders();\r\n    }, 60000);\r\n    \r\n    // Check localStorage for cafe status\r\n    const storedCafeStatus = localStorage.getItem('isCafeOpen');\r\n    if (storedCafeStatus !== null) {\r\n      this.isCafeOpen = storedCafeStatus === 'true';\r\n    }\r\n    \r\n    // Load orderReadyStatus from localStorage if available\r\n    const savedOrderReadyStatus = localStorage.getItem('orderReadyStatus');\r\n    if (savedOrderReadyStatus) {\r\n      this.orderReadyStatus = JSON.parse(savedOrderReadyStatus);\r\n    }\r\n    \r\n    // Event listener for customer approval/decline responses\r\n    window.addEventListener('storage', this.handleStorageEvent);\r\n    \r\n    // Connect to WebSocket\r\n    this.connectWebSocket();\r\n    \r\n    // Add a global document event listener for a custom event we'll dispatch on customer approval\r\n    document.addEventListener('customer-approval', (event) => {\r\n      if (event.detail && event.detail.orderId) {\r\n        console.log('Got customer-approval event at document level:', event.detail);\r\n        this.handleApprovalBypassVue(event.detail.orderId);\r\n      }\r\n    });\r\n    \r\n    // Dispatch a custom approval event if we have any approvals stored in localStorage\r\n    // This helps sync UI state on page load\r\n    const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\r\n    fixedOrders.forEach(orderId => {\r\n      setTimeout(() => {\r\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"].order-pending-approval`);\r\n        if (orderElement) {\r\n          console.log(`Found previously fixed order #${orderId} still showing pending, re-fixing`);\r\n          this.forceFixPendingUI(orderId);\r\n        }\r\n      }, 1000);\r\n    });\r\n  },\r\n\r\n  beforeUnmount() {\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    \r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n    }\r\n    \r\n    if (this.ws) {\r\n      this.ws.close();\r\n    }\r\n    \r\n    // Remove event listeners\r\n    window.removeEventListener('storage', this.handleStorageEvent);\r\n    document.removeEventListener('customer-approval', this.handleApprovalBypassVue);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Base styles for all screen sizes */\r\n.notifications-page {\r\n  height: 100vh;\r\n  display: flex;\r\n  background-color: #ffffff;\r\n}\r\n\r\n/* Top Bar Styles to match dashboard */\r\n.top-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  background-image: linear-gradient(to right, #E54F70, #ed9598);\r\n  padding: 0 15px;\r\n  height: 60px;\r\n  width: 100%;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 100;\r\n}\r\n\r\n.content.shifted .top-bar {\r\n  left: 300px; /* Adjust left position when sidebar is open */\r\n  width: calc(100% - 300px); /* Adjust width when sidebar is open */\r\n}\r\n\r\n.content-below-top-bar {\r\n  margin-top: 70px; /* Add margin to account for the fixed top bar */\r\n  padding: 10px 20px;\r\n}\r\n\r\n.centered-content {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding: 0 0 0 5px; /* Reduce left padding to move button closer to edge */\r\n  height: 100%;\r\n}\r\n\r\n.logo-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.cafe-title {\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* Menu Button */\r\n.menu-button {\r\n  position: fixed;\r\n  top: 15px;\r\n  left: 15px;\r\n  z-index: 300;\r\n  background: #d12f7a;\r\n  color: white;\r\n  padding: 12px 15px;\r\n  font-size: 20px;\r\n  border: none;\r\n  border-radius: 12px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  display: none; /* Hide the floating button */\r\n}\r\n\r\n.menu-button:hover {\r\n  background: #b82d67;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.menu-icon-container {\r\n  position: relative;\r\n  display: inline-block;\r\n  font-size: 24px;\r\n}\r\n\r\n/* Sidebar */\r\n.sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: -300px;\r\n  height: 100vh;\r\n  width: 300px;\r\n  background: #f5f5f5;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  z-index: 1000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 0;\r\n  box-shadow: 4px 0 15px rgba(0, 0, 0, 0.1);\r\n  color: #333;\r\n}\r\n\r\n.sidebar.open {\r\n  left: 0;\r\n}\r\n\r\n.close-sidebar {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 15px;\r\n  background: rgba(209, 47, 122, 0.1);\r\n  border: none;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  color: #d12f7a;\r\n  padding: 8px 12px;\r\n  border-radius: 50%;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.close-sidebar:hover {\r\n  background: rgba(209, 47, 122, 0.2);\r\n  transform: rotate(90deg);\r\n}\r\n\r\n/* User Profile Section */\r\n.user-profile-section {\r\n  padding: 30px 20px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  background: rgba(209, 47, 122, 0.1);\r\n  border-radius: 15px;\r\n  margin: 0 15px 20px;\r\n}\r\n\r\n.user-profile-section h3 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n  font-size: 28px;\r\n  font-weight: 600;\r\n  text-shadow: none;\r\n}\r\n\r\n/* Utility Section */\r\n.utility-section {\r\n  padding: 15px;\r\n  margin: 0 15px;\r\n  background: white;\r\n  border-radius: 15px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.utility-button {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 14px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #333;\r\n  font-size: 16px;\r\n  text-decoration: none;\r\n  transition: all 0.3s ease;\r\n  border-radius: 10px;\r\n  margin-bottom: 8px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.utility-button:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.utility-button:hover {\r\n  background: rgba(209, 47, 122, 0.1);\r\n  transform: translateX(5px);\r\n}\r\n\r\n.utility-button i {\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #d12f7a;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  color: white;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.utility-button:hover i {\r\n  transform: rotate(10deg);\r\n}\r\n\r\n.utility-button span {\r\n  font-weight: 500;\r\n}\r\n\r\n.utility-button.logout {\r\n  background: rgba(244, 67, 54, 0.1);\r\n  color: #f44336;\r\n  margin-top: 8px;\r\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.utility-button.logout i {\r\n  background: #f44336;\r\n}\r\n\r\n.utility-button.logout:hover {\r\n  background: rgba(244, 67, 54, 0.15);\r\n}\r\n\r\n/* Cafe Status Section */\r\n.cafe-status-section {\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.cafe-toggle-btn {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n  border: 2px solid #d12f7a;\r\n  cursor: pointer;\r\n  border-radius: 30px;\r\n  transition: all 0.3s ease;\r\n  font-weight: 600;\r\n  width: 100%;\r\n  background: white;\r\n  color: #d12f7a;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.cafe-toggle-btn::before {\r\n  content: '🏪';\r\n  font-size: 20px;\r\n}\r\n\r\n.cafe-toggle-btn:hover {\r\n  background: rgba(209, 47, 122, 0.1);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.cafe-toggle-btn.open-btn {\r\n  border-color: #4CAF50;\r\n  color: #4CAF50;\r\n}\r\n\r\n.cafe-toggle-btn.open-btn::before {\r\n  content: '✅';\r\n}\r\n\r\n.cafe-toggle-btn.closed-btn {\r\n  border-color: #f44336;\r\n  color: #f44336;\r\n}\r\n\r\n.cafe-toggle-btn.closed-btn::before {\r\n  content: '🚫';\r\n}\r\n\r\n/* Utility Divider */\r\n.utility-divider {\r\n  border: none;\r\n  height: 1px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  margin: 15px;\r\n  border-radius: 1px;\r\n}\r\n\r\n/* Main Content Area */\r\n.content {\r\n  flex: 1;\r\n  margin-left: 0;\r\n  padding: 20px;\r\n  transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.content.shifted {\r\n  margin-left: 300px;\r\n}\r\n\r\n/* Overlay */\r\n.overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  backdrop-filter: blur(4px);\r\n  z-index: 999;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.overlay.visible {\r\n  opacity: 1;\r\n}\r\n\r\n/* Search Bar */\r\n.search-bar {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 20px auto;\r\n  width: 90%;\r\n  max-width: 400px;\r\n  background-color: transparent;\r\n  border-radius: 30px;\r\n  border: 2px solid #d12f7a;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  font-size: 16px;\r\n  border: none;\r\n  outline: none;\r\n  background-color: transparent;\r\n  color: #333;\r\n  border-radius: 30px;\r\n}\r\n\r\n/* Orders Container */\r\n.orders-container {\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.orders-container h2 {\r\n  text-align: center;\r\n  color: #d12f7a;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.orders-list {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  gap: 20px;\r\n  width: 100%;\r\n}\r\n\r\n/* Order Item */\r\n.order-item {\r\n  background-color: #f8d2e4;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: auto;\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n\r\n.order-item:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.order-details h3 {\r\n  color: #d12f7a;\r\n  margin-top: 0;\r\n}\r\n\r\n.order-details p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.items-section {\r\n  margin-top: 15px; \r\n  flex-grow: 1; /* Allow the items section to expand and adapt */\r\n}\r\n\r\n.order-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  margin-top: 15px;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding-left: 20px;\r\n  margin: 0;\r\n}\r\n\r\n.order-total {\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  color: #d12f7a;\r\n  text-align: center; /* Ensure it aligns nicely with the rest of the content */\r\n}\r\n\r\n/* Button styles */\r\nbutton.mark-completed-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\nbutton.mark-completed-btn:disabled,\r\nbutton.mark-completed-btn.disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\nbutton.mark-completed-btn:not(:disabled):hover {\r\n  background-color: #b82d67;\r\n}\r\n\r\n.order-ready-btn {\r\n  background-color: #4caf50; /* Green background for success */\r\n  color: white; /* White text */\r\n  padding: 8px 10px;\r\n  font-size: 14px;\r\n  border: none;\r\n  border-radius: 5px; /* Rounded corners */\r\n  cursor: pointer;\r\n  width: 100%;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\n.order-ready-btn:hover {\r\n  background-color: #45a049; /* Slightly darker green when hovered */\r\n  transform: translateY(-2px); /* Slight upward movement on hover */\r\n}\r\n\r\n.order-ready-btn:active {\r\n  background-color: #388e3c; /* Even darker green when clicked */\r\n  transform: translateY(0); /* Reset the movement after click */\r\n}\r\n\r\nbutton.decline-btn {\r\n  background-color: #f5a5a5;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\nbutton.decline-btn:hover {\r\n  background-color: #f17b7b;\r\n}\r\n\r\n/* Notification styles */\r\n.notification-popup,\r\n.notification-sent-popup {\r\n  position: fixed;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 15px 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\r\n  font-size: 18px;\r\n  min-width: 200px;\r\n  max-width: 90%;\r\n  z-index: 1000;\r\n  transition: opacity 0.3s ease, transform 0.3s ease;\r\n  opacity: 1;\r\n  text-align: center;\r\n}\r\n\r\n.notification-sent-popup {\r\n  background-color: rgb(82, 13, 45);\r\n  color: white;\r\n}\r\n\r\n.notification-popup.hide {\r\n  opacity: 0;\r\n  transform: translateX(-50%) translateY(-20px);\r\n}\r\n\r\n.notification-popup button,\r\n.notification-sent-popup button {\r\n  background-color: #fff;\r\n  color: #007bff;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.notification-popup button:hover,\r\n.notification-sent-popup button:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.notification-popup.open-notification {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.notification-popup.closed-notification {\r\n  background-color: red;\r\n  color: white;\r\n}\r\n\r\n.highlighted-order-details {\r\n  display: inline-block;\r\n  background-color: #f8d2e4;\r\n  color: #d12f7a;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  border: 2px solid #d12f7a;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.highlighted-order-details::before {\r\n  content: \"——— \";\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #d12f7a;\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  color: #d12f7a;\r\n  font-size: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.no-orders {\r\n  text-align: center;\r\n  margin: 30px 0;\r\n}\r\n\r\n.highlighted-time {\r\n  color: #d12f7a;\r\n  font-weight: bold;\r\n}\r\n\r\n.dark-mode .highlighted-time {\r\n  color: #f8d2e4;\r\n}\r\n\r\n.section-divider {\r\n  border-top: 1px solid #ddd;\r\n  margin: 30px 0;\r\n}\r\n\r\n/* Media Queries for Responsive Design */\r\n@media (max-width: 768px) {\r\n  .header {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .header-buttons {\r\n    order: 3;\r\n    width: 100%;\r\n    justify-content: center;\r\n  }\r\n  \r\n  h1 {\r\n    order: 1;\r\n    width: 100%;\r\n  }\r\n  \r\n  .order-record-button {\r\n    order: 2;\r\n    width: 100%;\r\n    max-width: 200px;\r\n  }\r\n  \r\n  .logout-button {\r\n    order: 4;\r\n    width: 100%;\r\n    max-width: 200px;\r\n  }\r\n  \r\n  .orders-list {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .notifications-page {\r\n    padding: 10px;\r\n  }\r\n  \r\n  .cafe-toggle-btn {\r\n    width: 180px;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .notification-popup,\r\n  .notification-sent-popup {\r\n    font-size: 16px;\r\n    padding: 10px 20px;\r\n  }\r\n  \r\n  .order-item {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .decline-container {\r\n    padding: 10px;\r\n  }\r\n  \r\n  .decline-buttons {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .decline-submit-btn,\r\n  .decline-cancel-btn {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* Menu Editor Modal Styles */\r\n.menu-editor-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1001;\r\n  overflow-y: auto;\r\n}\r\n\r\n.menu-editor-content {\r\n  background-color: white;\r\n  width: 90%;\r\n  max-width: 800px;\r\n  max-height: 90vh;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.menu-editor-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  background-color: #f8d2e4;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.menu-editor-header h2 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n}\r\n\r\n.close-modal-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #d12f7a;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n}\r\n\r\n.close-modal-btn:hover {\r\n  color: #b82d67;\r\n}\r\n\r\n.menu-editor-body {\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  max-height: calc(90vh - 70px); /* Subtract header height */\r\n}\r\n\r\n/* Media query adjustments for the modal */\r\n@media (max-width: 768px) {\r\n  .menu-editor-content {\r\n    width: 95%;\r\n    max-height: 95vh;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .menu-editor-header {\r\n    padding: 10px 15px;\r\n  }\r\n  \r\n  .menu-editor-body {\r\n    padding: 15px;\r\n  }\r\n}\r\n\r\n/* Completion Confirmation Popup Styles */\r\n.completion-confirmation-popup {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1002;\r\n}\r\n\r\n.completion-confirmation-content {\r\n  background-color: white;\r\n  padding: 25px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  text-align: center;\r\n  max-width: 400px;\r\n  width: 90%;\r\n}\r\n\r\n.completion-confirmation-content h3 {\r\n  color: #d12f7a;\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  font-size: 1.5em;\r\n}\r\n\r\n.completion-confirmation-content p {\r\n  margin-bottom: 20px;\r\n  font-size: 1.1em;\r\n  color: #333;\r\n}\r\n\r\n.confirmation-buttons {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 15px;\r\n}\r\n\r\n.confirm-yes-btn,\r\n.confirm-no-btn {\r\n  padding: 10px 25px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1.1em;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.confirm-yes-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n}\r\n\r\n.confirm-yes-btn:hover {\r\n  background-color: #b82d67;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.confirm-no-btn {\r\n  background-color: #f5a5a5;\r\n  color: white;\r\n}\r\n\r\n.confirm-no-btn:hover {\r\n  background-color: #f17b7b;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* Media query adjustments for the confirmation popup */\r\n@media (max-width: 480px) {\r\n  .completion-confirmation-content {\r\n    padding: 20px;\r\n    width: 85%;\r\n  }\r\n\r\n  .confirmation-buttons {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  .confirm-yes-btn,\r\n  .confirm-no-btn {\r\n    width: 100%;\r\n    padding: 12px;\r\n  }\r\n}\r\n\r\n/* Stock Management Modal Styles */\r\n.stock-manager-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1001;\r\n}\r\n\r\n.stock-manager-content {\r\n  background-color: white;\r\n  width: 90%;\r\n  max-width: 1000px;\r\n  max-height: 90vh;\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.stock-manager-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  background-color: #f8d2e4;\r\n  border-top-left-radius: 10px;\r\n  border-top-right-radius: 10px;\r\n}\r\n\r\n.stock-manager-header h2 {\r\n  color: #d12f7a;\r\n  margin: 0;\r\n}\r\n\r\n.stock-manager-body {\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.stock-search-bar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stock-table-container {\r\n  overflow-x: auto;\r\n}\r\n\r\n.stock-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\n.stock-table th,\r\n.stock-table td {\r\n  padding: 12px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.stock-table th {\r\n  background-color: #f8d2e4;\r\n  color: #d12f7a;\r\n}\r\n\r\n.status-out {\r\n  color: #f44336;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-low {\r\n  color: #ff9800;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-ok {\r\n  color: #4caf50;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-disabled {\r\n  color: #9e9e9e;\r\n  font-weight: bold;\r\n}\r\n\r\n.status-enabled {\r\n  color: #2196f3;\r\n  font-weight: bold;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.update-stock-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 2px 4px rgba(209, 47, 122, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.update-stock-btn::before {\r\n  content: '📦';\r\n  font-size: 16px;\r\n}\r\n\r\n.update-stock-btn:hover {\r\n  background-color: #b82d67;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(209, 47, 122, 0.3);\r\n}\r\n\r\n.update-stock-btn:active {\r\n  transform: translateY(0);\r\n  box-shadow: 0 2px 4px rgba(209, 47, 122, 0.2);\r\n}\r\n\r\n.stock-update-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1002;\r\n}\r\n\r\n.stock-update-content {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  width: 90%;\r\n  max-width: 400px;\r\n}\r\n\r\n.stock-update-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.form-group label {\r\n  font-weight: bold;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.update-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n}\r\n\r\n.confirm-btn,\r\n.cancel-btn {\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.confirm-btn {\r\n  background-color: #d12f7a;\r\n  color: white;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f5a5a5;\r\n  color: white;\r\n}\r\n\r\n.low-stock {\r\n  color: #ff9800;\r\n  font-weight: bold;\r\n}\r\n\r\n.out-of-stock {\r\n  color: #f44336;\r\n  font-weight: bold;\r\n}\r\n\r\n.stock-filters {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 15px;\r\n  width: 100%;\r\n}\r\n\r\n.category-filter {\r\n  padding: 8px 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  min-width: 150px;\r\n  background-color: white;\r\n  cursor: pointer;\r\n}\r\n\r\n.category-filter:hover {\r\n  border-color: #d12f7a;\r\n}\r\n\r\n.dark-mode .category-filter {\r\n  background-color: #333;\r\n  color: white;\r\n  border-color: #555;\r\n}\r\n\r\n.dark-mode .category-filter:hover {\r\n  border-color: #f8c6d0;\r\n}\r\n\r\n/* Add styles for the new header menu button */\r\n.menu-button-header {\r\n  background: #d12f7a;\r\n  color: white;\r\n  padding: 8px 12px;\r\n  font-size: 18px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease-in-out;\r\n  margin-right: 15px;\r\n  margin-left: 0; /* Ensure no left margin */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.menu-button-header:hover {\r\n  background: #b82d67;\r\n}\r\n\r\n/* New styles for decline modal and order highlighting */\r\n.order-declined-state {\r\n  background-color: #ffe6e6 !important;\r\n  border: 2px solid #ff0000 !important;\r\n}\r\n\r\n.order-pending-approval {\r\n  background-color: #ffe6e6 !important;\r\n  border: 2px solid #ff0000 !important;\r\n  box-shadow: 0 4px 10px rgba(255, 0, 0, 0.2) !important;\r\n  position: relative;\r\n  transition: all 0.5s ease-in-out;\r\n}\r\n\r\n.order-pending-approval::before {\r\n  content: 'PENDING APPROVAL';\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: #ff0000;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  padding: 4px 8px;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.order-pending-approval h3 {\r\n  color: #ff0000 !important;\r\n}\r\n\r\n.order-pending-approval .order-details p {\r\n  color: #333 !important;\r\n}\r\n\r\n.order-pending-approval .order-total {\r\n  color: #ff0000 !important;\r\n  font-weight: bold;\r\n}\r\n\r\n.decline-modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.decline-modal-content {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  max-width: 600px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.decline-modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  border-bottom: 1px solid #eee;\r\n  background-color: #f8d2e4;\r\n}\r\n\r\n.decline-modal-header h3 {\r\n  margin: 0;\r\n  color: #d12f7a;\r\n}\r\n\r\n.decline-modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.form-group textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  resize: vertical;\r\n}\r\n\r\n.items-adjustment {\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  border: 1px solid #eee;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.item-adjust-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.item-adjust-row:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.item-name {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.quantity-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 10px;\r\n}\r\n\r\n.quantity-controls button {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid #ddd;\r\n  background-color: #f0f0f0;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.quantity-controls button:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.quantity-controls input {\r\n  width: 50px;\r\n  text-align: center;\r\n  margin: 0 5px;\r\n  padding: 5px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.item-price {\r\n  min-width: 80px;\r\n  text-align: right;\r\n  font-weight: bold;\r\n}\r\n\r\n.adjusted-total {\r\n  text-align: right;\r\n  font-size: 16px;\r\n  margin-top: 10px;\r\n  color: #d12f7a;\r\n}\r\n\r\n.decline-modal-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 20px;\r\n}\r\n\r\n.send-approval-btn {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.confirm-decline-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Animation for order approval transition */\r\n@keyframes orderApproved {\r\n  0% {\r\n    background-color: #ffe6e6;\r\n    border-color: #ff0000;\r\n    box-shadow: 0 4px 10px rgba(255, 0, 0, 0.2);\r\n  }\r\n  50% {\r\n    background-color: #e6ffe6;\r\n    border-color: #4caf50;\r\n    box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3);\r\n  }\r\n  100% {\r\n    background-color: white;\r\n    border-color: #ddd;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n}\r\n\r\n.order-approved-animation {\r\n  animation: orderApproved 1.5s ease-in-out forwards;\r\n}\r\n\r\n/* Add the success animation styles */\r\n@keyframes successPulse {\r\n  0% { background-color: #fff; }\r\n  25% { background-color: #e6ffe6; }\r\n  50% { background-color: #ccffcc; }\r\n  75% { background-color: #e6ffe6; }\r\n  100% { background-color: #fff; }\r\n}\r\n\r\n.order-approved-success {\r\n  animation: successPulse 2s ease;\r\n  border: 2px solid #4CAF50 !important;\r\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3) !important;\r\n}\r\n\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;EAS8BD,KAAK,EAAC;;;EAgBzBA,KAAK,EAAC;AAAiB;;EA4BvBA,KAAK,EAAC;AAAqB;;EAW3BA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAkB;;EAa1BA,KAAK,EAAC;AAAuB;;EAM3BA,KAAK,EAAC;AAAY;;EApF/BC,GAAA;EA6F8BD,KAAK,EAAC;;;EA7FpCC,GAAA;EA+FwDD,KAAK,EAAC;;;EAE/CA,KAAK,EAAC;AAAa;oBAjGlC;;EA0GmBA,KAAK,EAAC;AAAe;;EAMnBA,KAAK,EAAC;AAAe;;EAUrBA,KAAK,EAAC;AAAa;;EAKrBA,KAAK,EAAC;AAAe;oBA/HxC;oBAAA;oBAAA;;EAAAC,GAAA;EA2J6CD,KAAK,EAAC;;;EAClCA,KAAK,EAAC;AAAiC;;EAGrCA,KAAK,EAAC;AAAsB;;EA/J/CC,GAAA;EAuKoCD,KAAK,EAAC;;;EAvK1CC,GAAA;EA4KqCD,KAAK,EAAC;;;EA5K3CC,GAAA;EAkLmCD,KAAK,EAAC;;;EAC1BA,KAAK,EAAC;AAAqB;;EACzBA,KAAK,EAAC;AAAoB;;EAM1BA,KAAK,EAAC;AAAkB;;EA1LzCC,GAAA;EAiMqCD,KAAK,EAAC;;;EAC5BA,KAAK,EAAC;AAAuB;;EAC3BA,KAAK,EAAC;AAAsB;;EAM5BA,KAAK,EAAC;AAAoB;;EAExBA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAe;oBA5M1C;;EA6NmBA,KAAK,EAAC;AAAuB;;EACzBA,KAAK,EAAC;AAAa;oBA9N1C;;EAAAC,GAAA;EA4PyCD,KAAK,EAAC;;;EAChCA,KAAK,EAAC;AAAsB;;EAE1BA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAY;;EAGlBA,KAAK,EAAC;AAAY;;EAUlBA,KAAK,EAAC;AAAY;oBA7QrC;;EAAAC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EA6RmBD,KAAK,EAAC;AAAY;;EAIlBA,KAAK,EAAC;AAAgB;;EAjSzCC,GAAA;EA0SqCD,KAAK,EAAC;;;EAC5BA,KAAK,EAAC;AAAuB;;EAC3BA,KAAK,EAAC;AAAsB;;EAI5BA,KAAK,EAAC;AAAoB;;EAKxBA,KAAK,EAAC;AAAY;;EAUlBA,KAAK,EAAC;AAAY;;EAEhBA,KAAK,EAAC;AAAkB;;EAEnBA,KAAK,EAAC;AAAW;;EAClBA,KAAK,EAAC;AAAmB;oBApUlD;oBAAA;oBAAA;;EAyU0BA,KAAK,EAAC;AAAY;;EAGzBA,KAAK,EAAC;AAAgB;;EAItBA,KAAK,EAAC;AAAuB;oBAhVhD;;EAAAC,GAAA;AAAA;;EAAAA,GAAA;AAAA;oBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CA0WM,OA1WNC,UA0WM,GAzWJC,mBAAA,wCAA2C,EAC3CC,mBAAA,CAIS;IAJDL,KAAK,EAAC,aAAa;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;kCAC/CH,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAqB,IAC9BK,mBAAA,CAA0B;IAAvBL,KAAK,EAAC;EAAY,G,wBAIdW,KAAA,CAAAC,aAAa,I,cAAxBV,mBAAA,CAAgD,OAAhDW,UAAgD,KATpDT,mBAAA,gBAWIA,mBAAA,aAAgB,EAChBC,mBAAA,CA+CM;IA/CAL,KAAK,EAZfc,eAAA;MAAA,QAYuCH,KAAA,CAAAC;IAAa;IAAMN,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAZ/DQ,cAAA,CAYyD,QAAW;MAC9DV,mBAAA,CAES;IAFDL,KAAK,EAAC,eAAe;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;kCACjDH,mBAAA,CAA2B;IAAxBL,KAAK,EAAC;EAAa,2B,IAGxBI,mBAAA,2BAA8B,E,4BAC9BC,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAsB,IAC/BK,mBAAA,CAA0D,aAAtDA,mBAAA,CAAiC;IAA9BL,KAAK,EAAC;EAAmB,IAnBxCgB,gBAAA,CAmB6C,kBAAgB,E,oDAGvDX,mBAAA,CAA4B;IAAxBL,KAAK,EAAC;EAAiB,6BAE3BI,mBAAA,qBAAwB,EACxBC,mBAAA,CAyBM,OAzBNY,UAyBM,GAxBJZ,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAS,eAAA,IAAAT,QAAA,CAAAS,eAAA,IAAAV,IAAA,CAAe;IAAER,KAAK,EAAC;kCACrCK,mBAAA,CAA6B;IAA1BL,KAAK,EAAC;EAAe,4BACxBK,mBAAA,CAA8B,cAAxB,mBAAiB,oB,IAGzBA,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAU,gBAAA,IAAAV,QAAA,CAAAU,gBAAA,IAAAX,IAAA,CAAgB;IAAER,KAAK,EAAC;kCACtCK,mBAAA,CAA8B;IAA3BL,KAAK,EAAC;EAAgB,4BACzBK,mBAAA,CAAwB,cAAlB,aAAW,oB,IAGnBA,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAW,kBAAA,IAAAX,QAAA,CAAAW,kBAAA,IAAAZ,IAAA,CAAkB;IAAER,KAAK,EAAC;kCACxCK,mBAAA,CAA2B;IAAxBL,KAAK,EAAC;EAAa,4BACtBK,mBAAA,CAA6B,cAAvB,kBAAgB,oB,IAGxBA,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAY,oBAAA,IAAAZ,QAAA,CAAAY,oBAAA,IAAAb,IAAA,CAAoB;IAAER,KAAK,EAAC;kCAC1CK,mBAAA,CAAyB;IAAtBL,KAAK,EAAC;EAAW,4BACpBK,mBAAA,CAA4B,cAAtB,iBAAe,oB,IAGvBA,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAa,MAAA,IAAAb,QAAA,CAAAa,MAAA,IAAAd,IAAA,CAAM;IAAER,KAAK,EAAC;kCAC5BK,mBAAA,CAA8B;IAA3BL,KAAK,EAAC;EAAgB,4BACzBK,mBAAA,CAAmB,cAAb,QAAM,oB,MAIhBD,mBAAA,yBAA4B,EAC5BC,mBAAA,CAKM,OALNkB,UAKM,GAJJlB,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAe,gBAAA,IAAAf,QAAA,CAAAe,gBAAA,IAAAhB,IAAA,CAAgB;IAAGR,KAAK,EAtDhDc,eAAA;MAAA,YAsD+DH,KAAA,CAAAc,UAAU;MAAA,eAAiBd,KAAA,CAAAc;IAAU,GAAS,iBAAiB;MACpHpB,mBAAA,CAAyE;IAArEL,KAAK,EAvDnBc,eAAA,CAuDqBH,KAAA,CAAAc,UAAU;2BAvD/BT,gBAAA,CAuDmF,GACzE,GAAAU,gBAAA,CAAGf,KAAA,CAAAc,UAAU,uD,qCAKnBrB,mBAAA,kBAAqB,EACrBC,mBAAA,CA4SM;IA5SAL,KAAK,EA9Dfc,eAAA;MAAA,WA8D0CH,KAAA,CAAAC;IAAa;MACjDR,mBAAA,wDAA2D,EAC3DC,mBAAA,CAYM,OAZNsB,UAYM,GAXJtB,mBAAA,CAUM,OAVNuB,UAUM,GATJxB,mBAAA,uCAA0C,EAC1CC,mBAAA,CAIS;IAJDL,KAAK,EAAC,oBAAoB;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;kCACtDH,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAqB,IAC9BK,mBAAA,CAA0B;IAAvBL,KAAK,EAAC;EAAY,G,oDAGzBK,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAgB,IACzBK,mBAAA,CAA2D;IAAtDL,KAAK,EAAC;EAAY,GAAC,+BAA6B,E,0BAK3DK,mBAAA,CA2RM,OA3RNwB,UA2RM,GA1ROlB,KAAA,CAAAmB,mBAAmB,I,cAA9B5B,mBAAA,CAEM;IAjFdD,GAAA;IA+EyCD,KAAK,EA/E9Cc,eAAA,wBA+EuEH,KAAA,CAAAoB,iBAAiB;MAC9E1B,mBAAA,CAAgC,WAAAqB,gBAAA,CAA1Bf,KAAA,CAAAqB,mBAAmB,iB,oBAhFnC5B,mBAAA,gBAmFQA,mBAAA,gBAAmB,EACnBC,mBAAA,CAOM,OAPN4B,UAOM,G,gBANJ5B,mBAAA,CAKE;IAJA6B,IAAI,EAAC,MAAM;IAtFvB,uBAAA3B,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IAuFqBxB,KAAA,CAAAyB,WAAW,GAAAD,MAAA;IACpBE,WAAW,EAAC,uCAAuC;IACnDrC,KAAK,EAAC;iDAFGW,KAAA,CAAAyB,WAAW,E,KAMbzB,KAAA,CAAA2B,SAAS,I,cAApBpC,mBAAA,CAAsD,OAAtDqC,UAAsD,EAAhB,YAAU,KA7FxDnC,mBAAA,gBA+FmBK,QAAA,CAAA+B,cAAc,CAACC,MAAM,KAAK9B,KAAA,CAAA2B,SAAS,I,cAA9CpC,mBAAA,CAsEM,OAtENwC,WAsEM,G,4BArEJrC,mBAAA,CAAuB,YAAnB,gBAAc,sBAClBA,mBAAA,CAuDM,OAvDNsC,WAuDM,I,kBAtDJzC,mBAAA,CAqDM0C,SAAA,QAvJlBC,WAAA,CAmG8BpC,QAAA,CAAA+B,cAAc,EAAvBM,KAAK;yBADd5C,mBAAA,CAqDM;MArDDF,KAAK,EAlGtBc,eAAA,EAkGuB,YAAY;gCAI8BH,KAAA,CAAAoC,oBAAoB,KAAKD,KAAK,CAACE,EAAE;kCAA6CF,KAAK,CAACG;;MAFtIhD,GAAG,EAAE6C,KAAK,CAACE,EAAE;MACb,eAAa,EAAEF,KAAK,CAACE;QAKtB3C,mBAAA,CAmBM,OAnBN6C,WAmBM,GAlBJ7C,mBAAA,CAAiC,YAA7B,YAAU,GAAAqB,gBAAA,CAAGoB,KAAK,CAACE,EAAE,kBACzB3C,mBAAA,CAA2D,Y,4BAAxDA,mBAAA,CAA0B,gBAAlB,WAAS,sBA5GpCW,gBAAA,CA4G6C,GAAC,GAAAU,gBAAA,CAAGoB,KAAK,CAACK,aAAa,iB,GACpD9C,mBAAA,CAA4G,Y,4BAAzGA,mBAAA,CAAwB,gBAAhB,SAAO,sBA7GlCW,gBAAA,CA6G2C,GAAC,GAAAU,gBAAA,CAAGoB,KAAK,CAACM,MAAM,IAAA1B,gBAAA,CAAMoB,KAAK,CAACG,iBAAiB,8C,GACxE5C,mBAAA,CAAoE,Y,4BAAjEA,mBAAA,CAA6B,gBAArB,cAAY,sBA9GvCW,gBAAA,CA8GgD,GAAC,GAAAU,gBAAA,CAAGjB,QAAA,CAAA4C,OAAO,CAACP,KAAK,CAACQ,UAAU,kB,GAASlD,mBAAA,sBAAyB,EAE9FC,mBAAA,CAOM,OAPNkD,WAOM,G,4BANJlD,mBAAA,CAAuB,gBAAf,QAAM,sBACdA,mBAAA,CAIK,c,kBAHHH,mBAAA,CAEK0C,SAAA,QArHzBC,WAAA,CAmHuCC,KAAK,CAACU,KAAK,EAAnBC,IAAI;2BAAfvD,mBAAA,CAEK;QAF4BD,GAAG,EAAEwD,IAAI,CAACC;0BACtCD,IAAI,CAACC,IAAI,IAAG,MAAI,GAAAhC,gBAAA,CAAG+B,IAAI,CAACE,KAAK,IAAG,KAAG,GAAAjC,gBAAA,CAAG+B,IAAI,CAACG,QAAQ;wCAK5DxD,mBAAA,8BAAiC,EACjCC,mBAAA,CAEM,OAFNwD,WAEM,GADJxD,mBAAA,CAA6E,YAA1EA,mBAAA,CAAsE,gBAA9D,iBAAe,GAAAqB,gBAAA,CAAGjB,QAAA,CAAAqD,mBAAmB,CAAChB,KAAK,CAACU,KAAK,kB,OAIhEnD,mBAAA,CAuBM,OAvBN0D,WAuBM,GAtBJ3D,mBAAA,+BAAkC,EAClCC,mBAAA,CAOS;MANNC,OAAK,EAAA6B,MAAA,IAAE1B,QAAA,CAAAuD,0BAA0B,CAAClB,KAAK,CAACE,EAAE;MAC3ChD,KAAK,EAnIvBc,eAAA,EAmIwB,8BAA8B;QAAA,aAEbH,KAAA,CAAAsD,gBAAgB,CAACnB,KAAK,CAACE,EAAE;MAAA;MAD/CkB,QAAQ,GAAGvD,KAAA,CAAAsD,gBAAgB,CAACnB,KAAK,CAACE,EAAE;OAEtC,qBAED,yBAxIhBmB,WAAA,GA0IgB/D,mBAAA,wBAA2B,EAC3BC,mBAAA,CAKS;MAJNC,OAAK,EAAA6B,MAAA,IAAE1B,QAAA,CAAA2D,0BAA0B,CAACtB,KAAK,CAACE,EAAE,EAAEF,KAAK,CAACK,aAAa,EAAEL,KAAK,CAACU,KAAK;MAC7ExD,KAAK,EAAC;OACP,kBAED,iBAhJhBqE,WAAA,GAkJgBjE,mBAAA,oBAAuB,EACvBC,mBAAA,CAES;MAFAC,OAAK,EAAA6B,MAAA,IAAE1B,QAAA,CAAA6D,iBAAiB,CAACxB,KAAK;MAAG9C,KAAK,EAAC;OAAc,WAE9D,iBArJhBuE,WAAA,E,2BAAAC,WAAA;oCA0JUpE,mBAAA,mCAAsC,EAC3BO,KAAA,CAAA8D,sBAAsB,I,cAAjCvE,mBAAA,CASM,OATNwE,WASM,GARJrE,mBAAA,CAOM,OAPNsE,WAOM,G,4BANJtE,mBAAA,CAA2B,YAAvB,oBAAkB,sBACtBA,mBAAA,CAAwE,WAArE,yBAAuB,GAAAqB,gBAAA,CAAGf,KAAA,CAAA8D,sBAAsB,IAAG,gBAAc,iBACpEpE,mBAAA,CAGM,OAHNuE,WAGM,GAFJvE,mBAAA,CAAuE;IAA9DC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAoE,iBAAA,IAAApE,QAAA,CAAAoE,iBAAA,IAAArE,IAAA,CAAiB;IAAER,KAAK,EAAC;KAAkB,KAAG,GAC9DK,mBAAA,CAAoE;IAA3DC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAqE,gBAAA,IAAArE,QAAA,CAAAqE,gBAAA,IAAAtE,IAAA,CAAgB;IAAER,KAAK,EAAC;KAAiB,IAAE,E,SAjK3EI,mBAAA,e,MAuKyBO,KAAA,CAAA2B,SAAS,I,cAA1BpC,mBAAA,CAEM,OAFN6E,WAEM,EAAAxE,MAAA,SAAAA,MAAA,QADJF,mBAAA,CAAuC,WAApC,kCAAgC,oB,MAxK7CD,mBAAA,gBA2KQA,mBAAA,6BAAgC,EACrBO,KAAA,CAAAqE,gBAAgB,I,cAA3B9E,mBAAA,CAGM,OAHN+E,WAGM,G,4BAFJ5E,mBAAA,CAAyB,WAAtB,oBAAkB,sBACrBA,mBAAA,CAAgF;IAAvEC,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IAAExB,KAAA,CAAAqE,gBAAgB;IAAUhF,KAAK,EAAC;KAAkB,OAAK,E,KA9KjFI,mBAAA,gBAiLQA,mBAAA,6BAAgC,EACrBO,KAAA,CAAAuE,cAAc,I,cAAzBhF,mBAAA,CAYM,OAZNiF,WAYM,GAXJ9E,mBAAA,CAUM,OAVN+E,WAUM,GATJ/E,mBAAA,CAKM,OALNgF,WAKM,G,4BAJJhF,mBAAA,CAAoB,YAAhB,aAAW,sBACfA,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAU,gBAAA,IAAAV,QAAA,CAAAU,gBAAA,IAAAX,IAAA,CAAgB;IAAER,KAAK,EAAC;kCACtCK,mBAAA,CAAiC;IAA9BL,KAAK,EAAC;EAAmB,2B,MAGhCK,mBAAA,CAEM,OAFNiF,WAEM,GADJC,YAAA,CAAcC,qBAAA,E,SA3L5BpF,mBAAA,gBAgMQA,mBAAA,4BAA+B,EACpBO,KAAA,CAAA8E,gBAAgB,I,cAA3BvF,mBAAA,CAwDM,OAxDNwF,WAwDM,GAvDJrF,mBAAA,CAsDM,OAtDNsF,WAsDM,GArDJtF,mBAAA,CAKM,OALNuF,WAKM,G,4BAJJvF,mBAAA,CAAyB,YAArB,kBAAgB,sBACpBA,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAW,kBAAA,IAAAX,QAAA,CAAAW,kBAAA,IAAAZ,IAAA,CAAkB;IAAER,KAAK,EAAC;kCACxCK,mBAAA,CAAiC;IAA9BL,KAAK,EAAC;EAAmB,2B,MAGhCK,mBAAA,CA8CM,OA9CNwF,WA8CM,GA7CJzF,mBAAA,gBAAmB,EACnBC,mBAAA,CAeM,OAfNyF,WAeM,GAdJzF,mBAAA,CAaM,OAbN0F,WAaM,G,gBAZJ1F,mBAAA,CAKE;IAJA6B,IAAI,EAAC,MAAM;IA9M/B,uBAAA3B,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IA+M6BxB,KAAA,CAAAqF,gBAAgB,GAAA7D,MAAA;IACzBE,WAAW,EAAC,iBAAiB;IAC7BrC,KAAK,EAAC;iDAFGW,KAAA,CAAAqF,gBAAgB,E,mBAI3B3F,mBAAA,CAKS;IAxN3B,uBAAAE,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IAmNmCxB,KAAA,CAAAsF,gBAAgB,GAAA9D,MAAA;IAAEnC,KAAK,EAAC;kCACvCK,mBAAA,CAAwC;IAAhC6F,KAAK,EAAC;EAAE,GAAC,gBAAc,uB,kBAC/BhG,mBAAA,CAES0C,SAAA,QAvN7BC,WAAA,CAqN+ClC,KAAA,CAAAwF,gBAAgB,EAA5BC,QAAQ;yBAAvBlG,mBAAA,CAES;MAFqCD,GAAG,EAAEmG,QAAQ;MAAGF,KAAK,EAAEE;wBAChEA,QAAQ,wBAtNjCC,WAAA;2EAmNmC1F,KAAA,CAAAsF,gBAAgB,E,OASrC7F,mBAAA,uBAA0B,EAC1BC,mBAAA,CAyBM,OAzBNiG,WAyBM,GAxBJjG,mBAAA,CAuBQ,SAvBRkG,WAuBQ,G,4BAtBNlG,mBAAA,CAQQ,gBAPNA,mBAAA,CAMK,aALHA,mBAAA,CAAkB,YAAd,WAAS,GACbA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAsB,YAAlB,eAAa,GACjBA,mBAAA,CAAe,YAAX,QAAM,GACVA,mBAAA,CAAgB,YAAZ,SAAO,E,wBAGfA,mBAAA,CAYQ,iB,kBAXNH,mBAAA,CAUK0C,SAAA,QAnPzBC,WAAA,CAyOuCpC,QAAA,CAAA+F,kBAAkB,EAA1B/C,IAAI;yBAAfvD,mBAAA,CAUK;MAVmCD,GAAG,EAAEwD,IAAI,CAACT;QAChD3C,mBAAA,CAAwB,YAAAqB,gBAAA,CAAjB+B,IAAI,CAACC,IAAI,kBAChBrD,mBAAA,CAA4B,YAAAqB,gBAAA,CAArB+B,IAAI,CAAC2C,QAAQ,kBACpB/F,mBAAA,CAAoE,YAAAqB,gBAAA,CAA7D+B,IAAI,CAACG,QAAQ,2BAA2BH,IAAI,CAACG,QAAQ,kBAC5DvD,mBAAA,CAAsE;MAAjEL,KAAK,EA7OhCc,eAAA,CA6OkCL,QAAA,CAAAgG,mBAAmB,CAAChD,IAAI;wBAAMhD,QAAA,CAAAiG,cAAc,CAACjD,IAAI,0BAC7DpD,mBAAA,CAIK,aAHHA,mBAAA,CAES;MAFAC,OAAK,EAAA6B,MAAA,IAAE1B,QAAA,CAAAkG,oBAAoB,CAAClD,IAAI;MAAGzD,KAAK,EAAC;OAAmB,gBAErE,iBAjPxB4G,WAAA,E;gDAAAxG,mBAAA,gBA2PQA,mBAAA,wBAA2B,EAChBO,KAAA,CAAAkG,oBAAoB,I,cAA/B3G,mBAAA,CA2CM,OA3CN4G,WA2CM,GA1CJzG,mBAAA,CAyCM,OAzCN0G,WAyCM,GAxCJ1G,mBAAA,CAA+C,YAA3C,gBAAc,GAAAqB,gBAAA,CAAGf,KAAA,CAAAqG,YAAY,EAAEtD,IAAI,kBACvCrD,mBAAA,CAsCM,OAtCN4G,WAsCM,GArCJ5G,mBAAA,CAEM,OAFN6G,WAEM,GADJ7G,mBAAA,CAA2G,eAApG,iBAAe,GAAAqB,gBAAA,CAAGf,KAAA,CAAAqG,YAAY,EAAEpD,QAAQ,2BAA2BjD,KAAA,CAAAqG,YAAY,EAAEpD,QAAQ,iB,GAElGvD,mBAAA,CASM,OATN8G,WASM,G,4BARJ9G,mBAAA,CAAsB,eAAf,SAAO,sB,gBACdA,mBAAA,CAMS;IA3QzB,uBAAAE,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IAqQiCxB,KAAA,CAAAyG,iBAAiB,GAAAjF,MAAA;kCArQlDkF,kBAAA,gV,2CAqQiC1G,KAAA,CAAAyG,iBAAiB,E,KAQpC/G,mBAAA,CAeM,OAfNiH,WAeM,G,4BAdJjH,mBAAA,CAAwB,eAAjB,WAAS,sBAERM,KAAA,CAAAyG,iBAAiB,mBAAmBzG,KAAA,CAAAyG,iBAAiB,iB,+BAD7DlH,mBAAA,CAME;IArRlBD,GAAA;IAiRkBiC,IAAI,EAAC,QAAQ;IAjR/B,uBAAA3B,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IAkRkCxB,KAAA,CAAA4G,mBAAmB,GAAApF,MAAA;IACnCqF,GAAG,EAAC,GAAG;IACNC,GAAG,EAAE9G,KAAA,CAAAyG,iBAAiB,kBAAkBzG,KAAA,CAAAqG,YAAY,EAAEpD,QAAQ;0BApRjF8D,WAAA,K,cAkRkC/G,KAAA,CAAA4G,mBAAmB,E;IAA3BI,MAAM,EAAd;EAAoC,E,KAIrBhH,KAAA,CAAAyG,iBAAiB,mB,cAAlClH,mBAAA,CAEO,QAxRvB0H,WAAA,EAsRmE,8DAEnD,KACiBjH,KAAA,CAAAyG,iBAAiB,kB,cAAlClH,mBAAA,CAEO,QA3RvB2H,WAAA,EAyRkE,uEAElD,KA3RhBzH,mBAAA,e,GA6RcC,mBAAA,CAGM,OAHNyH,WAGM,G,4BAFJzH,mBAAA,CAAsB,eAAf,SAAO,sB,gBACdA,mBAAA,CAAsF;IAA/E6B,IAAI,EAAC,MAAM;IA/RlC,uBAAA3B,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IA+R4CxB,KAAA,CAAAoH,iBAAiB,GAAA5F,MAAA;IAAEE,WAAW,EAAC;iDAA/B1B,KAAA,CAAAoH,iBAAiB,E,KAE/C1H,mBAAA,CAGM,OAHN2H,WAGM,GAFJ3H,mBAAA,CAA4E;IAAnEC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAwH,iBAAA,IAAAxH,QAAA,CAAAwH,iBAAA,IAAAzH,IAAA,CAAiB;IAAER,KAAK,EAAC;KAAc,cAAY,GACnEK,mBAAA,CAAyE;IAAhEC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAyH,qBAAA,IAAAzH,QAAA,CAAAyH,qBAAA,IAAA1H,IAAA,CAAqB;IAAER,KAAK,EAAC;KAAa,QAAM,E,WAnShFI,mBAAA,gBAySQA,mBAAA,mBAAsB,EACXO,KAAA,CAAAwH,gBAAgB,I,cAA3BjI,mBAAA,CA8DM,OA9DNkI,WA8DM,GA7DJ/H,mBAAA,CA4DM,OA5DNgI,WA4DM,GA3DJhI,mBAAA,CAGA,OAHAiI,WAGA,G,4BAFEjI,mBAAA,CAAyB,YAArB,kBAAgB,sBACpBA,mBAAA,CAAqE;IAA5DC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAA8H,iBAAA,IAAA9H,QAAA,CAAA8H,iBAAA,IAAA/H,IAAA,CAAiB;IAAER,KAAK,EAAC;KAAkB,GAAC,E,GAE9DK,mBAAA,CAsDM,OAtDNmI,WAsDM,GArDJnI,mBAAA,CAAyD,Y,4BAAtDA,mBAAA,CAA0B,gBAAlB,WAAS,sBAjTlCW,gBAAA,CAiT2C,GAAC,GAAAU,gBAAA,CAAGf,KAAA,CAAA8H,aAAa,EAAEzF,EAAE,iB,GAClD3C,mBAAA,CAAoE,Y,4BAAjEA,mBAAA,CAA0B,gBAAlB,WAAS,sBAlTlCW,gBAAA,CAkT2C,GAAC,GAAAU,gBAAA,CAAGf,KAAA,CAAA8H,aAAa,EAAEtF,aAAa,iB,GAE7D/C,mBAAA,wBAA2B,EAC3BC,mBAAA,CAOM,OAPNqI,WAOM,G,4BANJrI,mBAAA,CAAmC,eAA5B,sBAAoB,sB,gBAC3BA,mBAAA,CAIY;IA3T5B,uBAAAE,MAAA,SAAAA,MAAA,OAAA4B,MAAA,IAwT2BxB,KAAA,CAAAgI,oBAAoB,GAAAxG,MAAA;IAC7BE,WAAW,EAAC,2CAA2C;IACvDuG,IAAI,EAAC;iDAFIjI,KAAA,CAAAgI,oBAAoB,E,KAMjCvI,mBAAA,0BAA6B,EAC7BC,mBAAA,CAcM,OAdNwI,WAcM,G,4BAbJxI,mBAAA,CAAsC,eAA/B,yBAAuB,sBAC9BA,mBAAA,CAUM,OAVNyI,WAUM,I,kBATJ5I,mBAAA,CAQM0C,SAAA,QA1UxBC,WAAA,CAkU+ClC,KAAA,CAAAoI,aAAa,EAlU5D,CAkU+BtF,IAAI,EAAEuF,KAAK;yBAAxB9I,mBAAA,CAQM;MARuCD,GAAG,EAAE+I,KAAK;MAAEhJ,KAAK,EAAC;QAC7DK,mBAAA,CAA8C,QAA9C4I,WAA8C,EAAAvH,gBAAA,CAAnB+B,IAAI,CAACC,IAAI,kBACpCrD,mBAAA,CAIM,OAJN6I,WAIM,GAHJ7I,mBAAA,CAAmF;MAA1EC,OAAK,EAAA6B,MAAA,IAAE1B,QAAA,CAAA0I,iBAAiB,CAACH,KAAK;MAAI9E,QAAQ,EAAET,IAAI,CAACG,QAAQ;OAAO,GAAC,iBArUhGwF,WAAA,G,gBAsUsB/I,mBAAA,CAA4D;MAArD6B,IAAI,EAAC,QAAQ;MAtU1C,uBAAAC,MAAA,IAsU2DsB,IAAI,CAACG,QAAQ,GAAAzB,MAAA;MAAEqF,GAAG,EAAC;4BAtU9E6B,WAAA,I,cAsU2D5F,IAAI,CAACG,QAAQ,E;MAArB+D,MAAM,EAAd;IAA8B,E,IACnDtH,mBAAA,CAAoD;MAA3CC,OAAK,EAAA6B,MAAA,IAAE1B,QAAA,CAAA6I,iBAAiB,CAACN,KAAK;OAAG,GAAC,iBAvUjEO,WAAA,E,GAyUoBlJ,mBAAA,CAA8E,QAA9EmJ,WAA8E,EAArD,GAAC,GAAA9H,gBAAA,EAAI+B,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE6F,OAAO,oB;oCAGrEpJ,mBAAA,CAA8F,KAA9FqJ,WAA8F,G,4BAApErJ,mBAAA,CAAgC,gBAAxB,iBAAe,sBA5UjEW,gBAAA,CA4U0E,IAAE,GAAAU,gBAAA,CAAGjB,QAAA,CAAAkJ,sBAAsB,mB,KAGvFvJ,mBAAA,oBAAuB,EACvBC,mBAAA,CAqBM,OArBNuJ,WAqBM,GApBJvJ,mBAAA,CASS;IARNC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAoJ,eAAA,IAAApJ,QAAA,CAAAoJ,eAAA,IAAArJ,IAAA,CAAe;IACvBR,KAAK,EAAC,mBAAmB;IACxBkE,QAAQ,EAAEvD,KAAA,CAAAmJ;MAECnJ,KAAA,CAAAmJ,UAAU,I,cAAtB5J,mBAAA,CAEO,QAxVzB6J,WAAA,EAAAxJ,MAAA,SAAAA,MAAA,QAuVoBF,mBAAA,CAAsC;IAAnCL,KAAK,EAAC;EAAwB,4BAvVrDgB,gBAAA,CAuV0D,eACxC,E,qBACAd,mBAAA,CAAqC,QAzVvD8J,WAAA,EAyV+B,mBAAiB,G,iBAzVhDC,WAAA,GA2VgB5J,mBAAA,CASS;IARNC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,QAAA,CAAAyJ,cAAA,IAAAzJ,QAAA,CAAAyJ,cAAA,IAAA1J,IAAA,CAAc;IACtBR,KAAK,EAAC,qBAAqB;IAC1BkE,QAAQ,EAAEvD,KAAA,CAAAmJ;MAECnJ,KAAA,CAAAmJ,UAAU,I,cAAtB5J,mBAAA,CAEO,QAlWzBiK,WAAA,EAAA5J,MAAA,SAAAA,MAAA,QAiWoBF,mBAAA,CAAsC;IAAnCL,KAAK,EAAC;EAAwB,4BAjWrDgB,gBAAA,CAiW0D,gBACxC,E,qBACAd,mBAAA,CAA4B,QAnW9CkK,WAAA,EAmW+B,UAAQ,G,iBAnWvCC,WAAA,E,WAAAjK,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}