{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, withModifiers as _withModifiers, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelSelect as _vModelSelect, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notifications-page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"overlay\"\n};\nconst _hoisted_3 = {\n  class: \"utility-section\"\n};\nconst _hoisted_4 = {\n  class: \"cafe-status-section\"\n};\nconst _hoisted_5 = {\n  class: \"top-bar\"\n};\nconst _hoisted_6 = {\n  class: \"centered-content\"\n};\nconst _hoisted_7 = {\n  class: \"content-below-top-bar\"\n};\nconst _hoisted_8 = {\n  class: \"search-bar\"\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"loading\"\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"orders-container\"\n};\nconst _hoisted_11 = {\n  class: \"orders-list\"\n};\nconst _hoisted_12 = [\"data-order-id\"];\nconst _hoisted_13 = {\n  class: \"order-details\"\n};\nconst _hoisted_14 = {\n  class: \"items-section\"\n};\nconst _hoisted_15 = {\n  class: \"order-total\"\n};\nconst _hoisted_16 = {\n  class: \"order-actions\"\n};\nconst _hoisted_17 = [\"onClick\", \"disabled\"];\nconst _hoisted_18 = [\"onClick\"];\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = {\n  key: 0,\n  class: \"completion-confirmation-popup\"\n};\nconst _hoisted_21 = {\n  class: \"completion-confirmation-content\"\n};\nconst _hoisted_22 = {\n  class: \"confirmation-buttons\"\n};\nconst _hoisted_23 = {\n  key: 3,\n  class: \"no-orders\"\n};\nconst _hoisted_24 = {\n  key: 4,\n  class: \"notification-sent-popup\"\n};\nconst _hoisted_25 = {\n  key: 5,\n  class: \"menu-editor-modal\"\n};\nconst _hoisted_26 = {\n  class: \"menu-editor-content\"\n};\nconst _hoisted_27 = {\n  class: \"menu-editor-header\"\n};\nconst _hoisted_28 = {\n  class: \"menu-editor-body\"\n};\nconst _hoisted_29 = {\n  key: 6,\n  class: \"stock-manager-modal\"\n};\nconst _hoisted_30 = {\n  class: \"stock-manager-content\"\n};\nconst _hoisted_31 = {\n  class: \"stock-manager-header\"\n};\nconst _hoisted_32 = {\n  class: \"stock-manager-body\"\n};\nconst _hoisted_33 = {\n  class: \"stock-search-bar\"\n};\nconst _hoisted_34 = {\n  class: \"stock-filters\"\n};\nconst _hoisted_35 = [\"value\"];\nconst _hoisted_36 = {\n  class: \"stock-table-container\"\n};\nconst _hoisted_37 = {\n  class: \"stock-table\"\n};\nconst _hoisted_38 = [\"onClick\"];\nconst _hoisted_39 = {\n  key: 7,\n  class: \"stock-update-modal\"\n};\nconst _hoisted_40 = {\n  class: \"stock-update-content\"\n};\nconst _hoisted_41 = {\n  class: \"stock-update-form\"\n};\nconst _hoisted_42 = {\n  class: \"form-group\"\n};\nconst _hoisted_43 = {\n  class: \"form-group\"\n};\nconst _hoisted_44 = {\n  class: \"form-group\"\n};\nconst _hoisted_45 = [\"max\"];\nconst _hoisted_46 = {\n  key: 1\n};\nconst _hoisted_47 = {\n  key: 2\n};\nconst _hoisted_48 = {\n  class: \"form-group\"\n};\nconst _hoisted_49 = {\n  class: \"update-buttons\"\n};\nconst _hoisted_50 = {\n  key: 8,\n  class: \"decline-modal-overlay\"\n};\nconst _hoisted_51 = {\n  class: \"decline-modal-content\"\n};\nconst _hoisted_52 = {\n  class: \"decline-modal-header\"\n};\nconst _hoisted_53 = {\n  class: \"decline-modal-body\"\n};\nconst _hoisted_54 = {\n  class: \"form-group\"\n};\nconst _hoisted_55 = {\n  class: \"form-group\"\n};\nconst _hoisted_56 = {\n  class: \"items-adjustment\"\n};\nconst _hoisted_57 = {\n  class: \"item-name\"\n};\nconst _hoisted_58 = {\n  class: \"quantity-controls\"\n};\nconst _hoisted_59 = [\"onClick\", \"disabled\"];\nconst _hoisted_60 = [\"onUpdate:modelValue\"];\nconst _hoisted_61 = [\"onClick\"];\nconst _hoisted_62 = {\n  class: \"item-price\"\n};\nconst _hoisted_63 = {\n  class: \"adjusted-total\"\n};\nconst _hoisted_64 = {\n  class: \"decline-modal-actions\"\n};\nconst _hoisted_65 = [\"disabled\"];\nconst _hoisted_66 = {\n  key: 0\n};\nconst _hoisted_67 = {\n  key: 1\n};\nconst _hoisted_68 = [\"disabled\"];\nconst _hoisted_69 = {\n  key: 0\n};\nconst _hoisted_70 = {\n  key: 1\n};\nconst _hoisted_71 = {\n  key: 0,\n  class: \"settings-modal\"\n};\nconst _hoisted_72 = {\n  class: \"settings-content\"\n};\nconst _hoisted_73 = {\n  class: \"settings-header\"\n};\nconst _hoisted_74 = {\n  class: \"settings-body\"\n};\nconst _hoisted_75 = {\n  class: \"settings-section\"\n};\nconst _hoisted_76 = {\n  class: \"form-group\"\n};\nconst _hoisted_77 = {\n  class: \"form-group\"\n};\nconst _hoisted_78 = {\n  class: \"form-group\"\n};\nconst _hoisted_79 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_80 = {\n  key: 1,\n  class: \"success-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ItemEditor = _resolveComponent(\"ItemEditor\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Sidebar Toggle Button (For Mobile) \"), _createElementVNode(\"button\", {\n    class: \"menu-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleSidebar && $options.toggleSidebar(...args))\n  }, _cache[32] || (_cache[32] = [_createElementVNode(\"div\", {\n    class: \"menu-icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fa fa-bars\"\n  })], -1 /* HOISTED */)])), $data.isSidebarOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Sidebar \"), _createElementVNode(\"div\", {\n    class: _normalizeClass(['sidebar', {\n      'open': $data.isSidebarOpen\n    }]),\n    onClick: _cache[8] || (_cache[8] = _withModifiers(() => {}, [\"stop\"]))\n  }, [_createElementVNode(\"button\", {\n    class: \"close-sidebar\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleSidebar && $options.toggleSidebar(...args))\n  }, _cache[33] || (_cache[33] = [_createElementVNode(\"i\", {\n    class: \"fa fa-times\"\n  }, null, -1 /* HOISTED */)])), _createCommentVNode(\" Admin Profile Section \"), _cache[39] || (_cache[39] = _createElementVNode(\"div\", {\n    class: \"user-profile-section\"\n  }, [_createElementVNode(\"h3\", null, [_createElementVNode(\"i\", {\n    class: \"fa fa-user-circle\"\n  }), _createTextVNode(\" Admin Dashboard\")])], -1 /* HOISTED */)), _cache[40] || (_cache[40] = _createElementVNode(\"hr\", {\n    class: \"utility-divider\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Utility Buttons \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.goToOrderRecord && $options.goToOrderRecord(...args)),\n    class: \"utility-button\"\n  }, _cache[34] || (_cache[34] = [_createElementVNode(\"i\", {\n    class: \"fa fa-history\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"View Order Record\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.toggleMenuEditor && $options.toggleMenuEditor(...args)),\n    class: \"utility-button\"\n  }, _cache[35] || (_cache[35] = [_createElementVNode(\"i\", {\n    class: \"fa fa-utensils\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Menu Editor\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleStockManager && $options.toggleStockManager(...args)),\n    class: \"utility-button\"\n  }, _cache[36] || (_cache[36] = [_createElementVNode(\"i\", {\n    class: \"fa fa-boxes\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Stock Management\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.toggleSettings && $options.toggleSettings(...args)),\n    class: \"utility-button\"\n  }, _cache[37] || (_cache[37] = [_createElementVNode(\"i\", {\n    class: \"fa fa-cog\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Settings\", -1 /* HOISTED */)])), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.logout && $options.logout(...args)),\n    class: \"utility-button logout\"\n  }, _cache[38] || (_cache[38] = [_createElementVNode(\"i\", {\n    class: \"fa fa-sign-out\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Logout\", -1 /* HOISTED */)]))]), _createCommentVNode(\" Cafe Status Section \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.toggleCafeStatus && $options.toggleCafeStatus(...args)),\n    class: _normalizeClass([{\n      'open-btn': $data.isCafeOpen,\n      'closed-btn': !$data.isCafeOpen\n    }, \"cafe-toggle-btn\"])\n  }, [_createElementVNode(\"i\", {\n    class: _normalizeClass($data.isCafeOpen ? 'fa fa-check-circle' : 'fa fa-times-circle')\n  }, null, 2 /* CLASS */), _createTextVNode(\" \" + _toDisplayString($data.isCafeOpen ? 'Set Cafe Closed' : 'Set Cafe Open'), 1 /* TEXT */)], 2 /* CLASS */)])], 2 /* CLASS */), _createCommentVNode(\" Main Content \"), _createElementVNode(\"div\", {\n    class: _normalizeClass(['content', {\n      'shifted': $data.isSidebarOpen\n    }])\n  }, [_createCommentVNode(\" Add the top bar with pink gradient at the very top \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" Add sidebar button to the top bar \"), _createElementVNode(\"button\", {\n    class: \"menu-button-header\",\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.toggleSidebar && $options.toggleSidebar(...args))\n  }, _cache[41] || (_cache[41] = [_createElementVNode(\"div\", {\n    class: \"menu-icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fa fa-bars\"\n  })], -1 /* HOISTED */)])), _cache[42] || (_cache[42] = _createElementVNode(\"div\", {\n    class: \"logo-container\"\n  }, [_createElementVNode(\"div\", {\n    class: \"cafe-title\"\n  }, \"Cafe Preorder Admin Dashboard\")], -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_7, [$data.notificationVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass(['notification-popup', $data.notificationClass])\n  }, [_createElementVNode(\"p\", null, _toDisplayString($data.notificationMessage), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Search Bar \"), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $data.searchQuery = $event),\n    placeholder: \"Search orders by ID, customer name...\",\n    class: \"search-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]])]), $data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \"Loading...\")) : _createCommentVNode(\"v-if\", true), $options.filteredOrders.length && !$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_cache[48] || (_cache[48] = _createElementVNode(\"h2\", null, \"Pending Orders\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredOrders, order => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"order-item\", {\n        'order-declined-state': $data.activeDeclineOrderId === order.id,\n        'order-pending-approval': order.isPendingApproval\n      }]),\n      key: order.id,\n      \"data-order-id\": order.id\n    }, [_createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"h3\", null, \"Order ID: \" + _toDisplayString(order.id), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[43] || (_cache[43] = _createElementVNode(\"strong\", null, \"Customer:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(order.customer_name), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[44] || (_cache[44] = _createElementVNode(\"strong\", null, \"Status:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(order.status) + _toDisplayString(order.isPendingApproval ? ' (Pending Approval)' : ''), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[45] || (_cache[45] = _createElementVNode(\"strong\", null, \"Time Order: \", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($options.timeAgo(order.created_at)), 1 /* TEXT */)]), _createCommentVNode(\" Time Ago Display \"), _createElementVNode(\"div\", _hoisted_14, [_cache[46] || (_cache[46] = _createElementVNode(\"strong\", null, \"Items:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(order.items, item => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: item.name\n      }, _toDisplayString(item.name) + \" - ₱\" + _toDisplayString(item.price) + \" x \" + _toDisplayString(item.quantity), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Total Amount below items \"), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, \"Total Amount: ₱\" + _toDisplayString($options.calculateOrderTotal(order.items)), 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_16, [_createCommentVNode(\" Mark as Completed Buttons \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.showCompletionConfirmation(order.id),\n      class: _normalizeClass([\"mark-completed-btn small-btn\", {\n        'disabled': !$data.orderReadyStatus[order.id]\n      }]),\n      disabled: !$data.orderReadyStatus[order.id]\n    }, \" Mark as Completed \", 10 /* CLASS, PROPS */, _hoisted_17), _createCommentVNode(\" Order Ready button \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.sendOrderReadyNotification(order.id, order.customer_name, order.items),\n      class: \"order-ready-btn small-btn\"\n    }, \" Order Ready 🔔 \", 8 /* PROPS */, _hoisted_18), _createCommentVNode(\" Decline button \"), _createElementVNode(\"button\", {\n      onClick: $event => $options.openDeclineDialog(order),\n      class: \"decline-btn\"\n    }, \" Decline \", 8 /* PROPS */, _hoisted_19)])], 10 /* CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Completion Confirmation Popup \"), $data.confirmCompleteOrderId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_cache[47] || (_cache[47] = _createElementVNode(\"h3\", null, \"Confirm Completion\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"Are you sure Order ID: \" + _toDisplayString($data.confirmCompleteOrderId) + \" is completed?\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.confirmCompletion && $options.confirmCompletion(...args)),\n    class: \"confirm-yes-btn\"\n  }, \"Yes\"), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => $options.cancelCompletion && $options.cancelCompletion(...args)),\n    class: \"confirm-no-btn\"\n  }, \"No\")])])])) : _createCommentVNode(\"v-if\", true)])) : !$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _cache[49] || (_cache[49] = [_createElementVNode(\"p\", null, \"No pending orders at the moment.\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Popup Notification Sent \"), $data.notificationSent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_cache[50] || (_cache[50] = _createElementVNode(\"p\", null, \"Notification Sent!\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = $event => $data.notificationSent = false),\n    class: \"close-popup-btn\"\n  }, \"Close\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Menu Editor Popup Modal \"), $data.showMenuEditor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_cache[52] || (_cache[52] = _createElementVNode(\"h2\", null, \"Menu Editor\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[14] || (_cache[14] = (...args) => $options.toggleMenuEditor && $options.toggleMenuEditor(...args)),\n    class: \"close-modal-btn\"\n  }, _cache[51] || (_cache[51] = [_createElementVNode(\"i\", {\n    class: \"fa-solid fa-times\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_28, [_createVNode(_component_ItemEditor)])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Stock Management Modal \"), $data.showStockManager ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[54] || (_cache[54] = _createElementVNode(\"h2\", null, \"Stock Management\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[15] || (_cache[15] = (...args) => $options.toggleStockManager && $options.toggleStockManager(...args)),\n    class: \"close-modal-btn\"\n  }, _cache[53] || (_cache[53] = [_createElementVNode(\"i\", {\n    class: \"fa-solid fa-times\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_32, [_createCommentVNode(\" Search Bar \"), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[16] || (_cache[16] = $event => $data.stockSearchQuery = $event),\n    placeholder: \"Search items...\",\n    class: \"search-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.stockSearchQuery]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[17] || (_cache[17] = $event => $data.selectedCategory = $event),\n    class: \"category-filter\"\n  }, [_cache[55] || (_cache[55] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Categories\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.uniqueCategories, category => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: category,\n      value: category\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_35);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedCategory]])])]), _createCommentVNode(\" Stock Items Table \"), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"table\", _hoisted_37, [_cache[56] || (_cache[56] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Item Name\"), _createElementVNode(\"th\", null, \"Category\"), _createElementVNode(\"th\", null, \"Current Stock\"), _createElementVNode(\"th\", null, \"Status\"), _createElementVNode(\"th\", null, \"Actions\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredStockItems, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.quantity >= 999999 ? 'Unlimited' : item.quantity), 1 /* TEXT */), _createElementVNode(\"td\", {\n      class: _normalizeClass($options.getStockStatusClass(item))\n    }, _toDisplayString($options.getStockStatus(item)), 3 /* TEXT, CLASS */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.openStockUpdateModal(item),\n      class: \"update-stock-btn\"\n    }, \" Update Stock \", 8 /* PROPS */, _hoisted_38)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Stock Update Modal \"), $data.showStockUpdateModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_39, [_createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"h3\", null, \"Update Stock: \" + _toDisplayString($data.selectedItem?.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"label\", null, \"Current Stock: \" + _toDisplayString($data.selectedItem?.quantity >= 999999 ? 'Unlimited' : $data.selectedItem?.quantity), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_43, [_cache[58] || (_cache[58] = _createElementVNode(\"label\", null, \"Action:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[18] || (_cache[18] = $event => $data.stockUpdateAction = $event)\n  }, _cache[57] || (_cache[57] = [_createStaticVNode(\"<option value=\\\"add\\\" data-v-d80a1124>Add Stock</option><option value=\\\"subtract\\\" data-v-d80a1124>Remove Stock</option><option value=\\\"set\\\" data-v-d80a1124>Set Stock</option><option value=\\\"disabled\\\" data-v-d80a1124>Disabled (Out of Stock)</option><option value=\\\"enabled\\\" data-v-d80a1124>Enabled (Unlimited Orders)</option>\", 5)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.stockUpdateAction]])]), _createElementVNode(\"div\", _hoisted_44, [_cache[59] || (_cache[59] = _createElementVNode(\"label\", null, \"Quantity:\", -1 /* HOISTED */)), $data.stockUpdateAction !== 'disabled' && $data.stockUpdateAction !== 'enabled' ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 0,\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[19] || (_cache[19] = $event => $data.stockUpdateQuantity = $event),\n    min: \"0\",\n    max: $data.stockUpdateAction === 'subtract' ? $data.selectedItem?.quantity : 999999\n  }, null, 8 /* PROPS */, _hoisted_45)), [[_vModelText, $data.stockUpdateQuantity, void 0, {\n    number: true\n  }]]) : $data.stockUpdateAction === 'disabled' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_46, \" Item will be marked as out of stock and cannot be ordered. \")) : $data.stockUpdateAction === 'enabled' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_47, \" Item will be available for unlimited orders regardless of quantity. \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_48, [_cache[60] || (_cache[60] = _createElementVNode(\"label\", null, \"Reason:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[20] || (_cache[20] = $event => $data.stockUpdateReason = $event),\n    placeholder: \"Enter reason for update\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.stockUpdateReason]])]), _createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"button\", {\n    onClick: _cache[21] || (_cache[21] = (...args) => $options.submitStockUpdate && $options.submitStockUpdate(...args)),\n    class: \"confirm-btn\"\n  }, \"Update Stock\"), _createElementVNode(\"button\", {\n    onClick: _cache[22] || (_cache[22] = (...args) => $options.closeStockUpdateModal && $options.closeStockUpdateModal(...args)),\n    class: \"cancel-btn\"\n  }, \"Cancel\")])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Decline Modal \"), $data.showDeclineModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_50, [_createElementVNode(\"div\", _hoisted_51, [_createElementVNode(\"div\", _hoisted_52, [_cache[61] || (_cache[61] = _createElementVNode(\"h3\", null, \"Order Adjustment\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[23] || (_cache[23] = (...args) => $options.closeDeclineModal && $options.closeDeclineModal(...args)),\n    class: \"close-modal-btn\"\n  }, \"✕\")]), _createElementVNode(\"div\", _hoisted_53, [_createElementVNode(\"p\", null, [_cache[62] || (_cache[62] = _createElementVNode(\"strong\", null, \"Order ID:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedOrder?.id), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[63] || (_cache[63] = _createElementVNode(\"strong\", null, \"Customer:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedOrder?.customer_name), 1 /* TEXT */)]), _createCommentVNode(\" Customized Message \"), _createElementVNode(\"div\", _hoisted_54, [_cache[64] || (_cache[64] = _createElementVNode(\"label\", null, \"Message to Customer:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[24] || (_cache[24] = $event => $data.customDeclineMessage = $event),\n    placeholder: \"Enter a message explaining the changes...\",\n    rows: \"3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.customDeclineMessage]])]), _createCommentVNode(\" Edit Item Quantities \"), _createElementVNode(\"div\", _hoisted_55, [_cache[66] || (_cache[66] = _createElementVNode(\"label\", null, \"Adjust Item Quantities:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_56, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.editableItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"item-adjust-row\"\n    }, [_createElementVNode(\"span\", _hoisted_57, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_58, [_createElementVNode(\"button\", {\n      onClick: $event => $options.decrementQuantity(index),\n      disabled: item.quantity <= 0\n    }, \"-\", 8 /* PROPS */, _hoisted_59), _withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": $event => item.quantity = $event,\n      min: \"0\"\n    }, null, 8 /* PROPS */, _hoisted_60), [[_vModelText, item.quantity, void 0, {\n      number: true\n    }]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.incrementQuantity(index)\n    }, \"+\", 8 /* PROPS */, _hoisted_61)]), _createElementVNode(\"span\", _hoisted_62, \"₱\" + _toDisplayString((item.price * item.quantity).toFixed(2)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"p\", _hoisted_63, [_cache[65] || (_cache[65] = _createElementVNode(\"strong\", null, \"Adjusted Total:\", -1 /* HOISTED */)), _createTextVNode(\" ₱\" + _toDisplayString($options.calculateAdjustedTotal()), 1 /* TEXT */)])]), _createCommentVNode(\" Action Buttons \"), _createElementVNode(\"div\", _hoisted_64, [_createElementVNode(\"button\", {\n    onClick: _cache[25] || (_cache[25] = (...args) => $options.sendForApproval && $options.sendForApproval(...args)),\n    class: \"send-approval-btn\",\n    disabled: $data.isUpdating\n  }, [$data.isUpdating ? (_openBlock(), _createElementBlock(\"span\", _hoisted_66, _cache[67] || (_cache[67] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Updating... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_67, \"Send for Approval\"))], 8 /* PROPS */, _hoisted_65), _createElementVNode(\"button\", {\n    onClick: _cache[26] || (_cache[26] = (...args) => $options.confirmDecline && $options.confirmDecline(...args)),\n    class: \"confirm-decline-btn\",\n    disabled: $data.isUpdating\n  }, [$data.isUpdating ? (_openBlock(), _createElementBlock(\"span\", _hoisted_69, _cache[68] || (_cache[68] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Declining... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_70, \"Declined\"))], 8 /* PROPS */, _hoisted_68)])])])])) : _createCommentVNode(\"v-if\", true)])], 2 /* CLASS */)]), _createCommentVNode(\" Settings Modal \"), _ctx.showSettings ? (_openBlock(), _createElementBlock(\"div\", _hoisted_71, [_createElementVNode(\"div\", _hoisted_72, [_createElementVNode(\"div\", _hoisted_73, [_cache[70] || (_cache[70] = _createElementVNode(\"h2\", null, \"Settings\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[27] || (_cache[27] = (...args) => $options.toggleSettings && $options.toggleSettings(...args)),\n    class: \"close-modal-btn\"\n  }, _cache[69] || (_cache[69] = [_createElementVNode(\"i\", {\n    class: \"fa-solid fa-times\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_74, [_createElementVNode(\"div\", _hoisted_75, [_cache[75] || (_cache[75] = _createElementVNode(\"h3\", null, \"Change Password\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[31] || (_cache[31] = _withModifiers((...args) => $options.changeAdminPassword && $options.changeAdminPassword(...args), [\"prevent\"])),\n    class: \"password-form\"\n  }, [_createElementVNode(\"div\", _hoisted_76, [_cache[71] || (_cache[71] = _createElementVNode(\"label\", {\n    for: \"currentPassword\"\n  }, \"Current Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"currentPassword\",\n    \"onUpdate:modelValue\": _cache[28] || (_cache[28] = $event => $data.passwordForm.currentPassword = $event),\n    placeholder: \"Enter current password\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.passwordForm.currentPassword]])]), _createElementVNode(\"div\", _hoisted_77, [_cache[72] || (_cache[72] = _createElementVNode(\"label\", {\n    for: \"newPassword\"\n  }, \"New Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"newPassword\",\n    \"onUpdate:modelValue\": _cache[29] || (_cache[29] = $event => $data.passwordForm.newPassword = $event),\n    placeholder: \"Enter new password\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.passwordForm.newPassword]])]), _createElementVNode(\"div\", _hoisted_78, [_cache[73] || (_cache[73] = _createElementVNode(\"label\", {\n    for: \"confirmPassword\"\n  }, \"Confirm New Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"confirmPassword\",\n    \"onUpdate:modelValue\": _cache[30] || (_cache[30] = $event => $data.passwordForm.confirmPassword = $event),\n    placeholder: \"Confirm new password\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.passwordForm.confirmPassword]])]), $data.passwordForm.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_79, _toDisplayString($data.passwordForm.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.passwordForm.success ? (_openBlock(), _createElementBlock(\"div\", _hoisted_80, _toDisplayString($data.passwordForm.success), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _cache[74] || (_cache[74] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"change-password-btn\"\n  }, \"Change Password\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)])])])])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createCommentVNode","onClick","_cache","args","$options","toggleSidebar","$data","isSidebarOpen","_hoisted_2","_normalizeClass","_withModifiers","_createTextVNode","_hoisted_3","goToOrderRecord","toggleMenuEditor","toggleStockManager","toggleSettings","logout","_hoisted_4","toggleCafeStatus","isCafeOpen","_toDisplayString","_hoisted_5","_hoisted_6","_hoisted_7","notificationVisible","notificationClass","notificationMessage","_hoisted_8","type","$event","searchQuery","placeholder","isLoading","_hoisted_9","filteredOrders","length","_hoisted_10","_hoisted_11","_renderList","order","activeDeclineOrderId","id","isPendingApproval","_hoisted_13","customer_name","status","timeAgo","created_at","_hoisted_14","items","item","name","price","quantity","_hoisted_15","calculateOrderTotal","_hoisted_16","showCompletionConfirmation","orderReadyStatus","disabled","_hoisted_17","sendOrderReadyNotification","_hoisted_18","openDeclineDialog","_hoisted_19","_hoisted_12","confirmCompleteOrderId","_hoisted_20","_hoisted_21","_hoisted_22","confirmCompletion","cancelCompletion","_hoisted_23","notificationSent","_hoisted_24","showMenuEditor","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_createVNode","_component_ItemEditor","showStockManager","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","stockSearchQuery","selectedCategory","value","uniqueCategories","category","_hoisted_35","_hoisted_36","_hoisted_37","filteredStockItems","getStockStatusClass","getStockStatus","openStockUpdateModal","_hoisted_38","showStockUpdateModal","_hoisted_39","_hoisted_40","selectedItem","_hoisted_41","_hoisted_42","_hoisted_43","stockUpdateAction","_createStaticVNode","_hoisted_44","stockUpdateQuantity","min","max","_hoisted_45","number","_hoisted_46","_hoisted_47","_hoisted_48","stockUpdateReason","_hoisted_49","submitStockUpdate","closeStockUpdateModal","showDeclineModal","_hoisted_50","_hoisted_51","_hoisted_52","closeDeclineModal","_hoisted_53","selectedOrder","_hoisted_54","customDeclineMessage","rows","_hoisted_55","_hoisted_56","editableItems","index","_hoisted_57","_hoisted_58","decrementQuantity","_hoisted_59","_hoisted_60","incrementQuantity","_hoisted_61","_hoisted_62","toFixed","_hoisted_63","calculateAdjustedTotal","_hoisted_64","sendForApproval","isUpdating","_hoisted_66","_hoisted_67","_hoisted_65","confirmDecline","_hoisted_69","_hoisted_70","_hoisted_68","_ctx","showSettings","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","onSubmit","changeAdminPassword","_hoisted_76","for","passwordForm","currentPassword","required","_hoisted_77","newPassword","_hoisted_78","confirmPassword","error","_hoisted_79","success","_hoisted_80"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\admin\\NotificationsPage.vue"],"sourcesContent":["<template>\n  <div class=\"notifications-page\">\n    <!-- Sidebar Toggle Button (For Mobile) -->\n    <button class=\"menu-button\" @click=\"toggleSidebar\">\n      <div class=\"menu-icon-container\">\n        <i class=\"fa fa-bars\"></i>\n      </div>\n    </button>\n\n    <div v-if=\"isSidebarOpen\" class=\"overlay\"></div>\n    \n    <!-- Sidebar -->\n    <div :class=\"['sidebar', { 'open': isSidebarOpen }]\" @click.stop>\n      <button class=\"close-sidebar\" @click=\"toggleSidebar\">\n        <i class=\"fa fa-times\"></i>\n      </button>\n      \n      <!-- Admin Profile Section -->\n      <div class=\"user-profile-section\">\n        <h3><i class=\"fa fa-user-circle\"></i> Admin Dashboard</h3>\n      </div>\n\n      <hr class=\"utility-divider\">\n\n      <!-- Utility Buttons -->\n      <div class=\"utility-section\">\n        <button @click=\"goToOrderRecord\" class=\"utility-button\">\n          <i class=\"fa fa-history\"></i>\n          <span>View Order Record</span>\n        </button>\n\n        <button @click=\"toggleMenuEditor\" class=\"utility-button\">\n          <i class=\"fa fa-utensils\"></i>\n          <span>Menu Editor</span>\n        </button>\n\n        <button @click=\"toggleStockManager\" class=\"utility-button\">\n          <i class=\"fa fa-boxes\"></i>\n          <span>Stock Management</span>\n        </button>\n\n        <button @click=\"toggleSettings\" class=\"utility-button\">\n          <i class=\"fa fa-cog\"></i>\n          <span>Settings</span>\n        </button>\n\n        <button @click=\"logout\" class=\"utility-button logout\">\n          <i class=\"fa fa-sign-out\"></i>\n          <span>Logout</span>\n        </button>\n      </div>\n\n      <!-- Cafe Status Section -->\n      <div class=\"cafe-status-section\">\n        <button @click=\"toggleCafeStatus\" :class=\"{'open-btn': isCafeOpen, 'closed-btn': !isCafeOpen}\" class=\"cafe-toggle-btn\">\n          <i :class=\"isCafeOpen ? 'fa fa-check-circle' : 'fa fa-times-circle'\"></i>\n          {{ isCafeOpen ? 'Set Cafe Closed' : 'Set Cafe Open' }}\n        </button>\n      </div>\n    </div>\n\n    <!-- Main Content -->\n    <div :class=\"['content', { 'shifted': isSidebarOpen }]\">\n      <!-- Add the top bar with pink gradient at the very top -->\n      <div class=\"top-bar\">\n        <div class=\"centered-content\">\n          <!-- Add sidebar button to the top bar -->\n          <button class=\"menu-button-header\" @click=\"toggleSidebar\">\n            <div class=\"menu-icon-container\">\n              <i class=\"fa fa-bars\"></i>\n            </div>\n          </button>\n          <div class=\"logo-container\">\n            <div class=\"cafe-title\">Cafe Preorder Admin Dashboard</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"content-below-top-bar\">\n        <div v-if=\"notificationVisible\" :class=\"['notification-popup', notificationClass]\">\n          <p>{{ notificationMessage }}</p>\n        </div>\n\n        <!-- Search Bar -->\n        <div class=\"search-bar\">\n          <input \n            type=\"text\" \n            v-model=\"searchQuery\" \n            placeholder=\"Search orders by ID, customer name...\" \n            class=\"search-input\"\n          />\n        </div>\n\n        <div v-if=\"isLoading\" class=\"loading\">Loading...</div>\n\n        <div v-if=\"filteredOrders.length && !isLoading\" class=\"orders-container\">\n          <h2>Pending Orders</h2>\n          <div class=\"orders-list\">\n            <div class=\"order-item\" \n              v-for=\"order in filteredOrders\" \n              :key=\"order.id\" \n              :data-order-id=\"order.id\"\n              :class=\"{\n                'order-declined-state': activeDeclineOrderId === order.id,\n                'order-pending-approval': order.isPendingApproval\n              }\">\n              <div class=\"order-details\">\n                <h3>Order ID: {{ order.id }}</h3>\n                <p><strong>Customer:</strong> {{ order.customer_name }}</p>\n                <p><strong>Status:</strong> {{ order.status }}{{ order.isPendingApproval ? ' (Pending Approval)' : '' }}</p>\n                <p><strong>Time Order: </strong> {{ timeAgo(order.created_at) }}</p> <!-- Time Ago Display -->\n\n                <div class=\"items-section\">\n                  <strong>Items:</strong>\n                  <ul>\n                    <li v-for=\"item in order.items\" :key=\"item.name\">\n                      {{ item.name }} - ₱{{ item.price }} x {{ item.quantity }}\n                    </li>\n                  </ul>\n                </div>\n\n                <!-- Total Amount below items -->\n                <div class=\"order-total\">\n                  <p><strong>Total Amount: ₱{{ calculateOrderTotal(order.items) }}</strong></p>\n                </div>\n              </div>\n\n              <div class=\"order-actions\">\n                <!-- Mark as Completed Buttons -->\n                <button \n                  @click=\"showCompletionConfirmation(order.id)\" \n                  class=\"mark-completed-btn small-btn\"\n                  :disabled=\"!orderReadyStatus[order.id]\"\n                  :class=\"{ 'disabled': !orderReadyStatus[order.id] }\"\n                >\n                  Mark as Completed\n                </button>\n\n                <!-- Order Ready button -->\n                <button \n                  @click=\"sendOrderReadyNotification(order.id, order.customer_name, order.items)\" \n                  class=\"order-ready-btn small-btn\"\n                >\n                  Order Ready  🔔\n                </button>\n\n                <!-- Decline button -->\n                <button @click=\"openDeclineDialog(order)\" class=\"decline-btn\">\n                  Decline\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Completion Confirmation Popup -->\n          <div v-if=\"confirmCompleteOrderId\" class=\"completion-confirmation-popup\">\n            <div class=\"completion-confirmation-content\">\n              <h3>Confirm Completion</h3>\n              <p>Are you sure Order ID: {{ confirmCompleteOrderId }} is completed?</p>\n              <div class=\"confirmation-buttons\">\n                <button @click=\"confirmCompletion\" class=\"confirm-yes-btn\">Yes</button>\n                <button @click=\"cancelCompletion\" class=\"confirm-no-btn\">No</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div v-else-if=\"!isLoading\" class=\"no-orders\">\n          <p>No pending orders at the moment.</p>\n        </div>\n\n        <!-- Popup Notification Sent -->\n        <div v-if=\"notificationSent\" class=\"notification-sent-popup\">\n          <p>Notification Sent!</p>\n          <button @click=\"notificationSent = false\" class=\"close-popup-btn\">Close</button>\n        </div>\n\n        <!-- Menu Editor Popup Modal -->\n        <div v-if=\"showMenuEditor\" class=\"menu-editor-modal\">\n          <div class=\"menu-editor-content\">\n            <div class=\"menu-editor-header\">\n              <h2>Menu Editor</h2>\n              <button @click=\"toggleMenuEditor\" class=\"close-modal-btn\">\n                <i class=\"fa-solid fa-times\"></i>\n              </button>\n            </div>\n            <div class=\"menu-editor-body\">\n              <ItemEditor />\n            </div>\n          </div>\n        </div>\n\n        <!-- Stock Management Modal -->\n        <div v-if=\"showStockManager\" class=\"stock-manager-modal\">\n          <div class=\"stock-manager-content\">\n            <div class=\"stock-manager-header\">\n              <h2>Stock Management</h2>\n              <button @click=\"toggleStockManager\" class=\"close-modal-btn\">\n                <i class=\"fa-solid fa-times\"></i>\n              </button>\n            </div>\n            <div class=\"stock-manager-body\">\n              <!-- Search Bar -->\n              <div class=\"stock-search-bar\">\n                <div class=\"stock-filters\">\n                  <input \n                    type=\"text\" \n                    v-model=\"stockSearchQuery\" \n                    placeholder=\"Search items...\" \n                    class=\"search-input\"\n                  />\n                  <select v-model=\"selectedCategory\" class=\"category-filter\">\n                    <option value=\"\">All Categories</option>\n                    <option v-for=\"category in uniqueCategories\" :key=\"category\" :value=\"category\">\n                      {{ category }}\n                    </option>\n                  </select>\n                </div>\n              </div>\n\n              <!-- Stock Items Table -->\n              <div class=\"stock-table-container\">\n                <table class=\"stock-table\">\n                  <thead>\n                    <tr>\n                      <th>Item Name</th>\n                      <th>Category</th>\n                      <th>Current Stock</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr v-for=\"item in filteredStockItems\" :key=\"item.id\">\n                      <td>{{ item.name }}</td>\n                      <td>{{ item.category }}</td>\n                      <td>{{ item.quantity >= 999999 ? 'Unlimited' : item.quantity }}</td>\n                      <td :class=\"getStockStatusClass(item)\">{{ getStockStatus(item) }}</td>\n                      <td>\n                        <button @click=\"openStockUpdateModal(item)\" class=\"update-stock-btn\">\n                          Update Stock\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Stock Update Modal -->\n        <div v-if=\"showStockUpdateModal\" class=\"stock-update-modal\">\n          <div class=\"stock-update-content\">\n            <h3>Update Stock: {{ selectedItem?.name }}</h3>\n            <div class=\"stock-update-form\">\n              <div class=\"form-group\">\n                <label>Current Stock: {{ selectedItem?.quantity >= 999999 ? 'Unlimited' : selectedItem?.quantity }}</label>\n              </div>\n              <div class=\"form-group\">\n                <label>Action:</label>\n                <select v-model=\"stockUpdateAction\">\n                  <option value=\"add\">Add Stock</option>\n                  <option value=\"subtract\">Remove Stock</option>\n                  <option value=\"set\">Set Stock</option>\n                  <option value=\"disabled\">Disabled (Out of Stock)</option>\n                  <option value=\"enabled\">Enabled (Unlimited Orders)</option>\n                </select>\n              </div>\n              <div class=\"form-group\">\n                <label>Quantity:</label>\n                <input \n                  v-if=\"stockUpdateAction !== 'disabled' && stockUpdateAction !== 'enabled'\"\n                  type=\"number\" \n                  v-model.number=\"stockUpdateQuantity\" \n                  min=\"0\"\n                  :max=\"stockUpdateAction === 'subtract' ? selectedItem?.quantity : 999999\"\n                />\n                <span v-else-if=\"stockUpdateAction === 'disabled'\">\n                  Item will be marked as out of stock and cannot be ordered.\n                </span>\n                <span v-else-if=\"stockUpdateAction === 'enabled'\">\n                  Item will be available for unlimited orders regardless of quantity.\n                </span>\n              </div>\n              <div class=\"form-group\">\n                <label>Reason:</label>\n                <input type=\"text\" v-model=\"stockUpdateReason\" placeholder=\"Enter reason for update\"/>\n              </div>\n              <div class=\"update-buttons\">\n                <button @click=\"submitStockUpdate\" class=\"confirm-btn\">Update Stock</button>\n                <button @click=\"closeStockUpdateModal\" class=\"cancel-btn\">Cancel</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Decline Modal -->\n        <div v-if=\"showDeclineModal\" class=\"decline-modal-overlay\">\n          <div class=\"decline-modal-content\">\n            <div class=\"decline-modal-header\">\n              <h3>Order Adjustment</h3>\n              <button @click=\"closeDeclineModal\" class=\"close-modal-btn\">✕</button>\n      </div>\n            <div class=\"decline-modal-body\">\n              <p><strong>Order ID:</strong> {{ selectedOrder?.id }}</p>\n              <p><strong>Customer:</strong> {{ selectedOrder?.customer_name }}</p>\n              \n              <!-- Customized Message -->\n              <div class=\"form-group\">\n                <label>Message to Customer:</label>\n                <textarea \n                  v-model=\"customDeclineMessage\" \n                  placeholder=\"Enter a message explaining the changes...\" \n                  rows=\"3\"\n                ></textarea>\n              </div>\n              \n              <!-- Edit Item Quantities -->\n              <div class=\"form-group\">\n                <label>Adjust Item Quantities:</label>\n                <div class=\"items-adjustment\">\n                  <div v-for=\"(item, index) in editableItems\" :key=\"index\" class=\"item-adjust-row\">\n                    <span class=\"item-name\">{{ item.name }}</span>\n                    <div class=\"quantity-controls\">\n                      <button @click=\"decrementQuantity(index)\" :disabled=\"item.quantity <= 0\">-</button>\n                      <input type=\"number\" v-model.number=\"item.quantity\" min=\"0\">\n                      <button @click=\"incrementQuantity(index)\">+</button>\n                    </div>\n                    <span class=\"item-price\">₱{{ (item.price * item.quantity).toFixed(2) }}</span>\n                  </div>\n                </div>\n                <p class=\"adjusted-total\"><strong>Adjusted Total:</strong> ₱{{ calculateAdjustedTotal() }}</p>\n              </div>\n              \n              <!-- Action Buttons -->\n              <div class=\"decline-modal-actions\">\n                <button \n                  @click=\"sendForApproval\" \n                  class=\"send-approval-btn\"\n                  :disabled=\"isUpdating\"\n                >\n                  <span v-if=\"isUpdating\">\n                    <i class=\"fas fa-spinner fa-spin\"></i> Updating...\n                  </span>\n                  <span v-else>Send for Approval</span>\n                </button>\n                <button \n                  @click=\"confirmDecline\" \n                  class=\"confirm-decline-btn\"\n                  :disabled=\"isUpdating\"\n                >\n                  <span v-if=\"isUpdating\">\n                    <i class=\"fas fa-spinner fa-spin\"></i> Declining...\n                  </span>\n                  <span v-else>Declined</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Settings Modal -->\n  <div v-if=\"showSettings\" class=\"settings-modal\">\n    <div class=\"settings-content\">\n      <div class=\"settings-header\">\n        <h2>Settings</h2>\n        <button @click=\"toggleSettings\" class=\"close-modal-btn\">\n          <i class=\"fa-solid fa-times\"></i>\n        </button>\n      </div>\n      <div class=\"settings-body\">\n        <div class=\"settings-section\">\n          <h3>Change Password</h3>\n          <form @submit.prevent=\"changeAdminPassword\" class=\"password-form\">\n            <div class=\"form-group\">\n              <label for=\"currentPassword\">Current Password</label>\n              <input \n                type=\"password\" \n                id=\"currentPassword\" \n                v-model=\"passwordForm.currentPassword\"\n                placeholder=\"Enter current password\" \n                required\n              />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"newPassword\">New Password</label>\n              <input \n                type=\"password\" \n                id=\"newPassword\" \n                v-model=\"passwordForm.newPassword\"\n                placeholder=\"Enter new password\" \n                required\n              />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"confirmPassword\">Confirm New Password</label>\n              <input \n                type=\"password\" \n                id=\"confirmPassword\" \n                v-model=\"passwordForm.confirmPassword\"\n                placeholder=\"Confirm new password\" \n                required\n              />\n            </div>\n            <div v-if=\"passwordForm.error\" class=\"error-message\">\n              {{ passwordForm.error }}\n            </div>\n            <div v-if=\"passwordForm.success\" class=\"success-message\">\n              {{ passwordForm.success }}\n            </div>\n            <button type=\"submit\" class=\"change-password-btn\">Change Password</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ItemEditor from './ItemEditor.vue'\n\nexport default {\n  components: {\n    ItemEditor\n  },\n  data() {\n    return {\n      orders: [], // Store pending orders\n      isLoading: true, // For loading state\n      ws: null, // WebSocket connection\n      wsConnected: false,\n      activeDeclineOrderId: null, // Track the order for which decline message is being customized\n      customDeclineMessage: \"\", // Store the custom decline message\n      notificationSent: false, // To track if the notification has been sent\n      searchQuery: \"\", // To hold the search query input\n      isCafeOpen: true,\n      notificationMessage: \"\",\n      notificationClass: \"\", \n      notificationVisible: false,\n      showMenuEditor: false, // Control visibility of menu editor popup\n      isSidebarOpen: false,\n      orderReadyStatus: {}, // Track which orders are ready\n      confirmCompleteOrderId: null, // Track which order is being confirmed for completion\n      showStockManager: false,\n      showStockUpdateModal: false,\n      stockItems: [],\n      stockSearchQuery: '',\n      selectedItem: null,\n      stockUpdateAction: 'add',\n      stockUpdateQuantity: 0,\n      stockUpdateReason: '',\n      selectedCategory: '',\n      uniqueCategories: [],\n      // New properties for decline modal\n      showDeclineModal: false,\n      selectedOrder: null,\n      editableItems: [],\n      refreshInterval: null, // To store the interval ID for automatic refresh\n      isUpdating: false, // New property for loading state\n      pingInterval: null, // To store the interval ID for periodic ping\n      passwordForm: {\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n        error: '',\n        success: ''\n      },\n      currentPageSize: 10,\n      hasMoreOrders: false,\n    };\n  },\n  computed: {\n    // Filter orders based on search query\n    filteredOrders() {\n      if (!this.searchQuery) {\n        return this.orders;\n      }\n      return this.orders.filter(order => {\n        const lowerCaseSearchQuery = this.searchQuery.toLowerCase();\n        return (\n          order.id.toString().includes(lowerCaseSearchQuery) || // Search by Order ID\n          order.customer_name.toLowerCase().includes(lowerCaseSearchQuery) // Search by Customer Name\n        );\n      });\n    },\n    filteredStockItems() {\n      return this.stockItems.filter(item => {\n        if (!item || !item.name) return false;\n        const matchesSearch = item.name.toLowerCase().includes((this.stockSearchQuery || '').toLowerCase());\n        const matchesCategory = !this.selectedCategory || item.category === this.selectedCategory;\n        return matchesSearch && matchesCategory;\n      });\n    }\n  },\n\n  methods: {\n    toggleCafeStatus() {\n    this.isCafeOpen = !this.isCafeOpen; // Toggle the cafe status\n    localStorage.setItem('isCafeOpen', this.isCafeOpen); // Store cafe status\n\n    // Set the notification message and class based on the cafe status\n    if (this.isCafeOpen) {\n      this.notificationMessage = \"Cafe Beàta is now Open!\";\n      this.notificationClass = \"open-notification\"; // Set class for green when open\n    } else {\n      this.notificationMessage = \"Cafe Beàta is now Closed!\";\n      this.notificationClass = \"closed-notification\"; // Set class for red when closed\n    }\n\n    this.showNotification();  // Show the notification\n  },\n  \n   showNotification() {\n    // Show the notification and reset visibility after a timeout\n    this.notificationVisible = true;\n\n    setTimeout(() => {\n      this.notificationVisible = false;\n    }, 3000);  // Hide after 3 seconds\n  },\n\n\n    timeAgo(timestamp) {\n    // If timestamp is a string, ensure it's in ISO format by replacing space with \"T\"\n    if (typeof timestamp === \"string\") {\n      timestamp = timestamp.replace(\" \", \"T\"); // Convert to ISO format: \"YYYY-MM-DD HH:MM:SS\" -> \"YYYY-MM-DDTHH:MM:SS\"\n    }\n\n    const now = new Date();\n    const orderTime = new Date(timestamp); // Parse the timestamp\n\n    // Check if the timestamp is valid\n    if (isNaN(orderTime)) {\n      return \"Invalid time\"; // Return fallback message if timestamp is invalid\n    }\n\n    const differenceInSeconds = Math.floor((now - orderTime) / 1000);\n\n    if (differenceInSeconds < 60) {\n      return 'Just now';\n    } else if (differenceInSeconds < 3600) {\n      const minutes = Math.floor(differenceInSeconds / 60);\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n    } else if (differenceInSeconds < 86400) {\n      const hours = Math.floor(differenceInSeconds / 3600);\n      return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    } else if (differenceInSeconds < 2592000) {\n      const days = Math.floor(differenceInSeconds / 86400);\n      return `${days} day${days > 1 ? 's' : ''} ago`;\n    } else if (differenceInSeconds < 31536000) {\n      const months = Math.floor(differenceInSeconds / 2592000);\n      return `${months} month${months > 1 ? 's' : ''} ago`;\n    } else {\n      const years = Math.floor(differenceInSeconds / 31536000);\n      return `${years} year${years > 1 ? 's' : ''} ago`;\n    }\n  },\n\n\n\n    // Method to format the order date in the required format\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const year = date.getFullYear();\n      const hours = date.getHours();\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      const period = hours >= 12 ? 'PM' : 'AM';\n      const hour12 = (hours % 12 || 12).toString().padStart(2, '0');\n      \n      // Format: MM-DD-YYYY with highlighted time\n      const formattedDate = `${month}-${day}-${year} <span class=\"highlighted-time\">${hour12}:${minutes} ${period}</span>`;\n      return formattedDate;\n    },\n\n    cancelDecline() {\n      this.activeDeclineOrderId = null; // Hide decline input\n      this.customDeclineMessage = \"\"; // Clear text\n    },\n\n    // Navigate to the Order Record page\n    goToOrderRecord() {\n      this.$router.push({ name: \"OrderRecord\" });  // Ensure this matches the name of the route\n    },\n\n    logout() {\n      this.$router.push({ name: \"Login\" });  // Redirect the user to the Login page (adjust the route as needed)\n    },\n\n    // Fetch orders only once at initial load\n    async fetchOrders() {\n      if (this.isLoading) return;\n      this.isLoading = true;\n      \n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/orders\");\n        const data = await response.json();\n        if (data.orders && Array.isArray(data.orders)) {\n          // Filter pending orders and sort them by ID in ascending order\n          const pendingOrders = data.orders\n            .filter(order => order.status === \"pending\")\n            .sort((a, b) => {\n              // Convert order IDs to numbers for proper numerical sorting\n              const idA = parseInt(a.id);\n              const idB = parseInt(b.id);\n              return idA - idB; // Sort in ascending order (lower IDs first)\n            });\n          \n          console.log(`Fetched ${pendingOrders.length} pending orders`);\n          \n          // Important: Create a new array reference to ensure Vue reactivity\n          this.orders = [...pendingOrders];\n          \n          // Check if any of the fetched orders have ready notifications\n          // This ensures the \"Mark as Completed\" button is enabled for orders that are ready\n          this.orders.forEach(order => {\n            // If the order is already marked as ready in localStorage, keep that status\n            if (this.orderReadyStatus[order.id]) {\n              return;\n            }\n            \n            // Check if there's a notification for this order\n            const userNotificationsKey = `user_notifications_${order.customer_name}`;\n            const notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n            const hasReadyNotification = notifications.some(n => n.orderId === order.id);\n            \n            if (hasReadyNotification) {\n              this.orderReadyStatus[order.id] = true;\n            }\n          });\n          \n          // Update localStorage with any changes\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n          \n          // Force the UI to update\n          this.$forceUpdate();\n        } else {\n          console.error(\"Invalid data format\", data);\n          this.orders = [];\n        }\n      } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    // Format ordered items for notification message\n    formatItems(items) {\n      if (!Array.isArray(items)) {\n        console.error(\"Invalid item format:\", items);\n        return \"Invalid item data\";\n      }\n      return items.map(item => `${item.name} x${item.quantity}`).join(\", \");\n    },\n\n    // Calculate the total price for a single order\n    calculateOrderTotal(items) {\n      if (!Array.isArray(items)) return \"₱0\";\n      return items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n\n    // Mark an order as completed and send notification\n    markAsCompleted(orderId, customerName, items) {\n      // Log for debugging\n      console.log(`Marking order ${orderId} as completed...`);\n      \n      // Ensure items is properly formatted\n      let processedItems = items;\n      if (typeof items === 'string') {\n        try {\n          processedItems = JSON.parse(items);\n        } catch (e) {\n          console.error(\"Failed to parse items:\", e);\n          alert(\"Error processing order items. Please try again.\");\n          return;\n        }\n      }\n      \n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: \"completed\" })\n      })\n        .then(response => {\n          // First check if the response is actually received\n          if (!response) {\n            throw new Error('No response received from server');\n          }\n          \n          // Then check if it's OK\n          if (!response.ok) {\n            return response.text().then(text => {\n              try {\n                // Try to parse as JSON\n                const data = JSON.parse(text);\n                throw new Error(data.detail || `Server error: ${response.status}`);\n              } catch (e) {\n                // If parsing fails, use the raw text\n                throw new Error(`Server error: ${response.status} - ${text || 'Unknown error'}`);\n              }\n            });\n          }\n          return response.json();\n        })\n        .then((data) => {\n          console.log(\"Order completed successfully:\", data);\n          \n          // Immediately remove from pending orders\n          this.orders = this.orders.filter(order => order.id !== orderId);\n\n          // Remove from orderReadyStatus\n          delete this.orderReadyStatus[orderId];\n          // Update localStorage\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n\n          // Calculate the total price\n          const total = processedItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n\n          // Prepare the notification with highlighted order details\n          const notification = {\n            orderId,\n            customerName,\n            message: `Your order is completed! ✔️ Thank you for choosing Café Beata. Enjoy your food and drinks! 🥰. <span class=\"highlighted-order-details\">Order details: ${this.formatItems(processedItems)}. Total: ₱${total}</span>`,\n            timestamp: new Date().toISOString(),\n            items: processedItems,\n            total,\n          };\n\n          // Save the notification in localStorage for the specific user\n          const userNotificationsKey = `user_notifications_${customerName}`;\n          let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n          notifications.push(notification);\n          localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n          // Send real-time notification via WebSocket if connected\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n              type: 'user_notification',\n              action: 'order_completed',\n              notification: notification,\n              target_user: customerName\n            }));\n          }\n\n          // Emit an event to notify other components\n          window.dispatchEvent(new Event(\"notificationUpdated\"));\n\n          alert(\"Order marked as completed!\");\n        })\n        .catch(error => {\n          console.error(\"Error marking order as completed:\", error);\n          alert(error.message || \"Error completing order. Please try again.\");\n          // Refresh orders to ensure UI is in sync\n          this.fetchOrders();\n        });\n    },\n\n    // Open the decline modal for a specific order\n    openDeclineDialog(order) {\n      this.activeDeclineOrderId = order.id;\n      this.selectedOrder = order;\n      this.customDeclineMessage = localStorage.getItem(`customDeclineMessage_${order.id}`) || \"We need to adjust your order due to availability issues.\";\n      \n      // Clone the items array to make it editable\n      this.editableItems = JSON.parse(JSON.stringify(order.items));\n      \n      // Show the modal\n      this.showDeclineModal = true;\n    },\n\n    // Close the decline modal\n    closeDeclineModal() {\n      this.showDeclineModal = false;\n      this.activeDeclineOrderId = null;\n      this.selectedOrder = null;\n    },\n\n    // Increment item quantity\n    incrementQuantity(index) {\n      this.editableItems[index].quantity++;\n    },\n\n    // Decrement item quantity\n    decrementQuantity(index) {\n      if (this.editableItems[index].quantity > 0) {\n        this.editableItems[index].quantity--;\n      }\n    },\n\n    // Calculate the total of adjusted items\n    calculateAdjustedTotal() {\n      return this.editableItems.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);\n    },\n\n    // Send order adjustment for customer approval\n    sendForApproval() {\n      if (!this.selectedOrder) return;\n      \n      const orderId = this.selectedOrder.id;\n      const customerName = this.selectedOrder.customer_name;\n      \n      // Calculate the total price\n      const total = this.calculateAdjustedTotal();\n      \n      // Format items for display\n      const formattedItems = this.formatItems(this.editableItems);\n      \n      // Build a more specific message about quantity adjustments\n      let adjustmentReasons = [];\n      this.editableItems.forEach((item) => {\n        const originalItem = this.selectedOrder.items.find(i => i.name === item.name);\n        if (originalItem && originalItem.quantity !== item.quantity) {\n          adjustmentReasons.push(`${item.name} adjusted from ${originalItem.quantity} to ${item.quantity} due to limited availability`);\n        }\n      });\n      \n      // Create the customized message with specific quantity adjustment reasons\n      const specificAdjustments = adjustmentReasons.length > 0 \n        ? `The following adjustments were made: ${adjustmentReasons.join('; ')}. ` \n        : '';\n        \n      // Prepare notification message with approval buttons\n      const message = `${this.customDeclineMessage} ${specificAdjustments}Please review the adjusted order: ${formattedItems}. Total: ₱${total}`;\n      \n      // Create adjustment notification with approval options\n      const notification = {\n        orderId,\n        customerName,\n        message,\n        timestamp: new Date().toISOString(),\n        items: this.editableItems,\n        total,\n        requiresApproval: true,  // Flag to indicate this needs user approval\n        originalItems: this.selectedOrder.items  // Store original items for reference\n      };\n      \n      // Set loading state\n      this.isUpdating = true;\n      \n      // First update the order in the database with the adjusted quantities\n      fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          items: this.editableItems,\n          status: \"pending\",  // Keep status as pending\n          isPendingApproval: true // Add flag for pending approval\n        })\n      })\n      .then(response => {\n        if (!response.ok) {\n          return response.text().then(text => {\n            console.error(`Error status: ${response.status}, details: ${text}`);\n            throw new Error(`Failed to update order (${response.status}): ${text}`);\n          });\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Order items updated in database successfully\", data);\n        \n        // Now save to user's notifications\n        const userNotificationsKey = `user_notifications_${customerName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        \n        // Send WebSocket notification if connected\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'user_notification',\n            action: 'order_adjustment',  // Set specific action type for adjustment requests\n            notification: notification,\n            target_user: customerName\n          }));\n        }\n        \n        // Update the order in the UI immediately to show adjusted quantities\n        const orderIndex = this.orders.findIndex(o => o.id === orderId);\n        if (orderIndex !== -1) {\n          // Create a copy with adjusted items\n          const updatedOrder = {\n            ...this.orders[orderIndex],\n            items: this.editableItems,\n            isPendingApproval: true // Add flag for styling\n          };\n          \n          // Update the order in the list - using Vue 3 array mutation\n          this.orders = [\n            ...this.orders.slice(0, orderIndex),\n            updatedOrder,\n            ...this.orders.slice(orderIndex + 1)\n          ];\n        }\n        \n        // Show confirmation\n        this.notificationMessage = \"Adjustment request sent to customer for approval!\";\n        this.notificationClass = \"success-notification\";\n        this.showNotification();\n        \n        // Close the modal and reset loading state\n        this.isUpdating = false;\n        this.closeDeclineModal();\n      })\n      .catch(error => {\n        console.error(\"Error updating order items:\", error);\n        \n        // Reset loading state but keep modal open for retry\n        this.isUpdating = false;\n        \n        // Show error notification\n        this.notificationMessage = `Error: ${error.message}`;\n        this.notificationClass = \"error-notification\";\n        this.showNotification();\n        \n        // Ask user if they want to retry via modal or notification\n        if (confirm(`Failed to update order: ${error.message}. Do you want to retry?`)) {\n          // Retry the update\n          this.sendForApproval();\n        }\n      });\n    },\n\n    // Decline the order directly\n    confirmDecline() {\n      if (!this.selectedOrder) return;\n      \n      // Show loading indicator\n      this.isUpdating = true;\n      \n      const orderId = this.selectedOrder.id;\n      const customerName = this.selectedOrder.customer_name;\n      const items = this.selectedOrder.items;\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\n      \n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: \"declined\" })\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(() => {\n        // Remove from pending orders immediately\n        this.orders = this.orders.filter(order => order.id !== orderId);\n        \n        // Remove from orderReadyStatus if it exists\n        if (this.orderReadyStatus[orderId]) {\n          delete this.orderReadyStatus[orderId];\n          localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n        }\n        \n        // Calculate total\n        const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n        \n        // Prepare notification\n        const notification = {\n          orderId,\n          customerName,\n          message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\n          timestamp: new Date().toISOString(),\n          items, \n          total,\n        };\n        \n        // Save notification to localStorage\n        const userNotificationsKey = `user_notifications_${customerName}`;\n        let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n        \n        // Send direct WebSocket notification for real-time updates\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          console.log('Sending WebSocket notification for declined order:', orderId);\n          \n          // First send the standard notification\n          this.ws.send(JSON.stringify({\n            type: 'user_notification',\n            action: 'order_declined',\n            notification: notification,\n            target_user: customerName\n          }));\n          \n          // Then send a special order_declined type message for real-time notification\n          this.ws.send(JSON.stringify({\n            type: 'order_declined',\n            order_id: orderId,\n            customer_name: customerName,\n            reason: message,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        // Reset loading state\n        this.isUpdating = false;\n        \n        // Close the modal\n        this.closeDeclineModal();\n        \n        // Show success message\n        this.notificationMessage = `Order #${orderId} has been declined`;\n        this.notificationClass = \"closed-notification\";\n        this.showNotification();\n        \n      })\n      .catch(error => {\n        console.error(\"Error declining order:\", error);\n        this.isUpdating = false;\n        alert(\"Error declining order. Please try again.\");\n      });\n    },\n\n    // Original decline order function - unchanged\n    declineOrder(orderId, customerName, items) {\n      const message = this.customDeclineMessage || \"Unfortunately, this item is temporarily out of stock. We apologize for the inconvenience and appreciate your patience. 🙏\";\n\n      fetch(`http://127.0.0.1:8000/orders/${orderId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: \"declined\" }) // Properly formatted JSON\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return response.json();\n        })\n        .then(() => {\n          // Immediately remove from pending orders\n          this.orders = this.orders.filter(order => order.id !== orderId);\n\n          // Remove from orderReadyStatus if it exists\n          if (this.orderReadyStatus[orderId]) {\n            delete this.orderReadyStatus[orderId];\n            // Update localStorage\n            localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n          }\n\n          // Calculate the total price\n          const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n\n          // Prepare the notification with the custom message and order details\n          const notification = {\n            orderId,\n            customerName,\n            message: `${message} Order details: ${this.formatItems(items)}. Total: ₱${total}`,\n            timestamp: new Date().toISOString(),\n            items,  // Include items in the notification\n            total,  // Include total in the notification\n          };\n\n          // Save the notification in localStorage for the specific user\n          const userNotificationsKey = `user_notifications_${customerName}`;\n          let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n          notifications.push(notification);\n          localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n          // Send direct WebSocket notification for real-time updates\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            console.log('Sending WebSocket notification for declined order:', orderId);\n            \n            // First send the standard notification\n            this.ws.send(JSON.stringify({\n              type: 'user_notification',\n              action: 'order_declined',\n              notification: notification,\n              target_user: customerName\n            }));\n            \n            // Then send a special order_declined type message for real-time notification\n            this.ws.send(JSON.stringify({\n              type: 'order_declined',\n              order_id: orderId,\n              customer_name: customerName,\n              reason: message,\n              timestamp: new Date().toISOString()\n            }));\n          }\n\n          // Emit an event to notify other components (optional)\n          window.dispatchEvent(new Event(\"orderDeclined\"));\n\n          // Show success message\n          this.notificationMessage = `Order #${orderId} has been declined`;\n          this.notificationClass = \"closed-notification\";\n          this.showNotification();\n        })\n        .catch(error => {\n          console.error(\"Error declining order:\", error);\n          this.isUpdating = false;\n          alert(\"Error declining order. Please try again.\");\n        });\n    },\n\n    // Save the decline message to localStorage whenever it's updated\n    updateDeclineMessage() {\n      if (this.activeDeclineOrderId !== null) {\n        localStorage.setItem(`customDeclineMessage_${this.activeDeclineOrderId}`, this.customDeclineMessage);\n      }\n    },\n\n    // New method to handle the \"Order Ready\" button click and show pop-up notification\n    sendOrderReadyNotification(orderId, customerName, items) {\n      const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n\n      const notification = {\n        orderId,\n        customerName,\n        message: `Your order is now ready! Proceed to the cashier for payment and pickup. ☺️ Order details: ${this.formatItems(items)}. Total: ₱${total}`,\n        timestamp: new Date().toISOString(),\n        items,\n        total,\n      };\n\n      // Save the notification in localStorage for the specific user\n      const userNotificationsKey = `user_notifications_${customerName}`;\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n      \n      // Add the notification without replacing existing ones\n      notifications.push(notification);\n      \n      // Sort notifications by timestamp (newest first)\n      notifications.sort((a, b) => {\n        const dateA = new Date(a.timestamp);\n        const dateB = new Date(b.timestamp);\n        return dateB - dateA;\n      });\n      \n      localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n\n      // Set order as ready using direct assignment\n      this.orderReadyStatus[orderId] = true;\n      // Force reactivity update\n      this.orderReadyStatus = { ...this.orderReadyStatus };\n      \n      // Save orderReadyStatus to localStorage\n      localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n\n      // Send real-time notification via WebSocket if connected\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({\n          type: 'user_notification',\n          action: 'order_ready',\n          notification: notification,\n          target_user: customerName\n        }));\n      }\n\n      // Show success notification to admin\n      this.notificationSent = true;\n      setTimeout(() => {\n        this.notificationSent = false;\n      }, 3000);\n    },\n\n    // Toggle menu editor popup visibility\n    toggleMenuEditor() {\n      this.showMenuEditor = !this.showMenuEditor;\n    },\n\n    // Toggle sidebar visibility\n    toggleSidebar() {\n      this.isSidebarOpen = !this.isSidebarOpen;\n      // When opening the sidebar, prevent scrolling on the body\n      if (this.isSidebarOpen) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = '';\n      }\n    },\n\n    // Close sidebar - only called when X button is clicked\n    closeSidebar() {\n      this.isSidebarOpen = false;\n      document.body.style.overflow = '';\n    },\n\n    // Handle clicks outside sidebar - removed to prevent auto-closing when clicking outside\n    handleOutsideClick() {\n      // Do nothing - sidebar should stay open\n    },\n\n    // Add new methods for completion confirmation\n    showCompletionConfirmation(orderId) {\n      this.confirmCompleteOrderId = orderId;\n    },\n\n    confirmCompletion() {\n      const order = this.orders.find(o => o.id === this.confirmCompleteOrderId);\n      if (order) {\n        this.markAsCompleted(order.id, order.customer_name, order.items);\n      }\n      this.confirmCompleteOrderId = null;\n    },\n\n    cancelCompletion() {\n      this.confirmCompleteOrderId = null;\n    },\n\n    toggleStockManager() {\n      this.showStockManager = !this.showStockManager;\n    },\n\n    toggleSettings() {\n      this.showSettings = !this.showSettings;\n      // Reset form when opening/closing\n      if (this.showSettings) {\n        this.passwordForm = {\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: '',\n          error: '',\n          success: ''\n        };\n      }\n    },\n\n    changeAdminPassword() {\n      // Reset previous messages\n      this.passwordForm.error = '';\n      this.passwordForm.success = '';\n      \n      // Check if current password is correct\n      const storedPassword = \"admin123\"; // The default password\n      \n      if (this.passwordForm.currentPassword !== storedPassword) {\n        this.passwordForm.error = \"Current password is incorrect\";\n        return;\n      }\n      \n      // Validate new password\n      if (this.passwordForm.newPassword.length < 6) {\n        this.passwordForm.error = \"New password must be at least 6 characters\";\n        return;\n      }\n      \n      // Check if passwords match\n      if (this.passwordForm.newPassword !== this.passwordForm.confirmPassword) {\n        this.passwordForm.error = \"New passwords do not match\";\n        return;\n      }\n      \n      // Update the password in localStorage (in a real app, you would call an API)\n      localStorage.setItem(\"adminPassword\", this.passwordForm.newPassword);\n      \n      // Show success message\n      this.passwordForm.success = \"Password changed successfully!\";\n      \n      // Reset form after successful change\n      setTimeout(() => {\n        this.passwordForm.currentPassword = '';\n        this.passwordForm.newPassword = '';\n        this.passwordForm.confirmPassword = '';\n      }, 1000);\n    },\n\n    async fetchStockItems() {\n      try {\n        const response = await fetch('http://localhost:8000/api/stocks');\n        const data = await response.json();\n        console.log('Fetched stock data:', data); // Debug log\n        \n        if (data.success && Array.isArray(data.items)) {\n          // Map the items to include name and category from item_name\n          this.stockItems = data.items.map(item => ({\n            id: item.item_id, // Use item_id from the API response\n            name: item.item_name,\n            category: item.category,\n            quantity: item.quantity,\n            min_stock_level: item.min_stock_level\n          }));\n          \n          // Update unique categories\n          this.uniqueCategories = [...new Set(this.stockItems.map(item => item.category))];\n          console.log('Processed stock items:', this.stockItems); // Debug log\n        } else {\n          console.error('Invalid data format received:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching stock items:', error);\n      }\n    },\n\n    getStockStatus(item) {\n      if (item.quantity === 0) return 'Disabled (Out of Stock)';\n      if (item.quantity >= 999999) return 'Enabled (Unlimited)';\n      if (item.quantity <= item.min_stock_level) return 'Low Stock';\n      return 'In Stock';\n    },\n\n    getStockStatusClass(item) {\n      if (item.quantity === 0) return 'status-disabled';\n      if (item.quantity >= 999999) return 'status-enabled';\n      if (item.quantity <= item.min_stock_level) return 'status-low';\n      return 'status-ok';\n    },\n\n    openStockUpdateModal(item) {\n      console.log('Opening modal for item:', item); // Debug log\n      this.selectedItem = item;\n      this.showStockUpdateModal = true;\n      this.stockUpdateQuantity = 0;\n      this.stockUpdateAction = 'add';\n      this.stockUpdateReason = '';\n    },\n\n    closeStockUpdateModal() {\n      this.showStockUpdateModal = false;\n      this.selectedItem = null;\n      this.stockUpdateQuantity = 0;\n      this.stockUpdateReason = '';\n    },\n\n    async submitStockUpdate() {\n      // Validate required fields\n      if (!this.selectedItem || !this.selectedItem.id) {\n        alert('No item selected');\n        return;\n      }\n\n      if (!this.stockUpdateAction) {\n        alert('Please select an action');\n        return;\n      }\n\n      try {\n        let requestBody = {};\n        \n        // Handle different action types\n        if (this.stockUpdateAction === 'disabled') {\n          // For disabled, set quantity to 0 and use 'set' action\n          requestBody = {\n            action: 'set',\n            quantity: 0,\n            reason: this.stockUpdateReason || 'Disabled - Out of Stock'\n          };\n        } else if (this.stockUpdateAction === 'enabled') {\n          // For enabled, set a special value to indicate unlimited\n          requestBody = {\n            action: 'set',\n            quantity: 999999, // Very large number to represent unlimited\n            reason: this.stockUpdateReason || 'Enabled - Unlimited Orders'\n          };\n        } else {\n          // For regular actions (add, subtract, set)\n          if (!this.stockUpdateQuantity || this.stockUpdateQuantity <= 0) {\n            alert('Please enter a valid quantity (greater than 0)');\n            return;\n          }\n\n          // Additional validation for subtract action\n          if (this.stockUpdateAction === 'subtract' && this.stockUpdateQuantity > this.selectedItem.quantity) {\n            alert('Cannot remove more than current stock');\n            return;\n          }\n          \n          requestBody = {\n            action: this.stockUpdateAction,\n            quantity: parseInt(this.stockUpdateQuantity),\n            reason: this.stockUpdateReason || 'Stock update'\n          };\n        }\n\n        console.log('Sending request:', requestBody);\n\n        const response = await fetch(`http://localhost:8000/api/stocks/${this.selectedItem.id}/update`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody)\n        });\n\n        const data = await response.json();\n        \n        if (!response.ok) {\n          throw new Error(data.detail || 'Failed to update stock');\n        }\n\n        if (data.success) {\n          alert('Stock updated successfully!');\n          this.closeStockUpdateModal();\n          await this.fetchStockItems(); // Refresh the stock list\n        } else {\n          throw new Error(data.message || 'Failed to update stock');\n        }\n      } catch (error) {\n        console.error('Error updating stock:', error);\n        alert(error.message || 'Failed to update stock. Please try again.');\n      }\n    },\n\n    initWebSocket() {\n      // Use the same host as the API\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n      \n      // Close existing connection if it exists\n      if (this.ws) {\n        try {\n          this.ws.close();\n        } catch (e) {\n          console.error(\"Error closing existing WebSocket:\", e);\n        }\n      }\n      \n      console.log('Initializing WebSocket connection...');\n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.wsConnected = true;\n        \n        // Set up a periodic ping to keep the connection alive\n        if (this.pingInterval) clearInterval(this.pingInterval);\n        this.pingInterval = setInterval(() => {\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({ type: 'ping' }));\n          }\n        }, 30000); // ping every 30 seconds\n      };\n      \n      this.ws.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message received:', data);\n\n          if (data.type === 'new_order') {\n            // Handle new order\n            if (data.order.status === 'pending') {\n              // Add the new order to the orders array\n              this.orders.push(data.order);\n              \n              // Re-sort the orders array by ID in ascending order\n              this.orders.sort((a, b) => {\n                const idA = parseInt(a.id);\n                const idB = parseInt(b.id);\n                return idA - idB; // Sort in ascending order (lower IDs first)\n              });\n            }\n          } else if (data.type === 'order_status_update') {\n            // Handle order status update\n            if (data.status !== 'pending') {\n              this.orders = this.orders.filter(order => order.id !== data.order_id);\n              \n              // Remove from orderReadyStatus if it exists\n              if (this.orderReadyStatus[data.order_id]) {\n                delete this.orderReadyStatus[data.order_id];\n                // Update localStorage\n                localStorage.setItem('orderReadyStatus', JSON.stringify(this.orderReadyStatus));\n              }\n            }\n          } else if (data.type === 'admin_notification') {\n            // Handle customer responses to order adjustments\n            if (data.action === 'adjustment_response') {\n              // Process the customer's response to an order adjustment\n              const notification = data.notification;\n              const orderId = notification.orderId;\n              \n              if (notification.message.includes('APPROVED')) {\n                // Find the order and update it with adjusted items\n                const orderIndex = this.orders.findIndex(o => o.id === orderId);\n                if (orderIndex !== -1) {\n                  // Update the order with the adjusted items and remove pending approval flag\n                  const updatedOrder = {\n                    ...this.orders[orderIndex],\n                    items: notification.items,\n                    isPendingApproval: false // Remove the pending approval flag\n                  };\n                  \n                  // Update using Vue 3 reactivity \n                  this.orders = [\n                    ...this.orders.slice(0, orderIndex),\n                    updatedOrder,\n                    ...this.orders.slice(orderIndex + 1)\n                  ];\n                  \n                  // Show success notification\n                  this.notificationMessage = `Customer has approved order adjustments for Order #${orderId}`;\n                  this.notificationClass = \"open-notification\";\n                  this.showNotification();\n                }\n              } else if (notification.message.includes('DECLINED')) {\n                // Remove the order from the list if customer declined\n                this.orders = this.orders.filter(o => o.id !== orderId);\n                \n                // Show declined notification\n                this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\n                this.notificationClass = \"closed-notification\";\n                this.showNotification();\n              }\n              \n              // Mark the notification as processed\n              notification.processed = true;\n              \n              // Update the notification in localStorage\n              const adminNotificationsKey = 'user_notifications_Admin';\n              let adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n              \n              // Find and update the processed notification\n              const notificationIndex = adminNotifications.findIndex(n => \n                n.isAdminNotification && n.orderId === orderId && !n.processed\n              );\n              \n              if (notificationIndex !== -1) {\n                adminNotifications[notificationIndex].processed = true;\n                localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n              }\n            }\n          } else if (data.type === 'customer_approval') {\n            // Direct customer approval handling for real-time updates\n            const { orderId, approved } = data;\n            \n            if (approved) {\n              console.log(`CRITICAL FIX: Customer approved order #${orderId} - handling the single-order case specially`);\n              \n              // Check if this is the single-order case (the problematic case)\n              const isSingleOrder = this.orders.length === 1;\n              \n              // Always try direct DOM manipulation first\n              try {\n                const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\n                if (orderElement) {\n                  console.log(\"Found order element in DOM, applying direct DOM updates\");\n                  \n                  // Remove the pending approval class and add all styling inline\n                  orderElement.classList.remove('order-pending-approval');\n                  orderElement.style.backgroundColor = \"#ffffff\";\n                  orderElement.style.border = \"2px solid #ddd\";\n                  orderElement.style.boxShadow = \"0 2px 5px rgba(0, 0, 0, 0.1)\";\n                  \n                  // Hide the PENDING APPROVAL label\n                  const style = document.createElement('style');\n                  style.id = `fix-order-${orderId}`;\n                  style.textContent = `\n                    .order-item[data-order-id=\"${orderId}\"]::before {\n                      display: none !important;\n                    }\n                    .order-item[data-order-id=\"${orderId}\"] h3 {\n                      color: #333 !important;\n                    }\n                    .order-item[data-order-id=\"${orderId}\"] .order-total {\n                      color: #333 !important;\n                    }\n                  `;\n                  document.head.appendChild(style);\n                  \n                  // Update the status text\n                  const statusParagraphs = orderElement.querySelectorAll('p');\n                  for (const paragraph of statusParagraphs) {\n                    if (paragraph.innerHTML.includes('Status:')) {\n                      paragraph.innerHTML = '<strong>Status:</strong> pending';\n                      break;\n                    }\n                  }\n                }\n                \n                // For the single-order case, recreate the entire orders container\n                if (isSingleOrder) {\n                  console.log(\"Single order detected - using special handling\");\n                  \n                  // 1. Get the order container\n                  const ordersContainer = document.querySelector('.orders-container');\n                  if (!ordersContainer) {\n                    console.error(\"Orders container not found\");\n                    return;\n                  }\n                  \n                  // 2. Find the order in our data\n                  const order = this.orders.find(o => o.id === orderId);\n                  if (!order) {\n                    console.error(\"Order not found in data\");\n                    return;\n                  }\n                  \n                  // 3. Create an updated version of the order without pending approval\n                  const updatedOrder = { ...order, isPendingApproval: false };\n                  \n                  // 4. Replace the entire orders list HTML\n                  const ordersList = ordersContainer.querySelector('.orders-list');\n                  if (!ordersList) {\n                    console.error(\"Orders list not found\");\n                    return;\n                  }\n                  \n                  // Create a new order item element \n                  const newOrderItemHTML = `\n                    <div class=\"order-item\" data-order-id=\"${updatedOrder.id}\">\n                      <div class=\"order-details\">\n                        <h3>Order ID: ${updatedOrder.id}</h3>\n                        <p><strong>Customer:</strong> ${updatedOrder.customer_name}</p>\n                        <p><strong>Status:</strong> ${updatedOrder.status}</p>\n                        <p><strong>Time Order:</strong> ${this.timeAgo(updatedOrder.created_at)}</p>\n                        \n                        <div class=\"items-section\">\n                          <strong>Items:</strong>\n                          <ul>\n                            ${updatedOrder.items.map(item => \n                              `<li>${item.name} - ₱${item.price} x ${item.quantity}</li>`\n                            ).join('')}\n                          </ul>\n                        </div>\n                        \n                        <div class=\"order-total\">\n                          <p><strong>Total Amount: ₱${this.calculateOrderTotal(updatedOrder.items)}</strong></p>\n                        </div>\n                      </div>\n                      \n                      <div class=\"order-actions\">\n                        <button \n                          onclick=\"document.dispatchEvent(new CustomEvent('completion-confirmation', {detail: {orderId: ${updatedOrder.id}}}))\"\n                          class=\"mark-completed-btn small-btn ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\"\n                          ${!this.orderReadyStatus[updatedOrder.id] ? 'disabled' : ''}\n                        >\n                          Mark as Completed\n                        </button>\n                        \n                        <button \n                          onclick=\"document.dispatchEvent(new CustomEvent('order-ready', {detail: {orderId: ${updatedOrder.id}, customerName: '${updatedOrder.customer_name}'}}))\"\n                          class=\"order-ready-btn small-btn\"\n                        >\n                          Order Ready 🔔\n                        </button>\n                        \n                        <button \n                          onclick=\"document.dispatchEvent(new CustomEvent('decline-dialog', {detail: {orderId: ${updatedOrder.id}}}))\"\n                          class=\"decline-btn\"\n                        >\n                          Decline\n                        </button>\n                      </div>\n                    </div>\n                  `;\n                  \n                  // Replace the content\n                  ordersList.innerHTML = newOrderItemHTML;\n                  \n                  // Setup event listeners for our custom events\n                  if (!this._customListenersAdded) {\n                    document.addEventListener('completion-confirmation', (e) => {\n                      this.showCompletionConfirmation(e.detail.orderId);\n                    });\n                    \n                    document.addEventListener('order-ready', (e) => {\n                      this.sendOrderReadyNotification(e.detail.orderId, e.detail.customerName, updatedOrder.items);\n                    });\n                    \n                    document.addEventListener('decline-dialog', (e) => {\n                      // Find the order again since we need the full object\n                      const order = this.orders.find(o => o.id === e.detail.orderId);\n                      if (order) {\n                        this.openDeclineDialog(order);\n                      }\n                    });\n                    \n                    this._customListenersAdded = true;\n                  }\n                  \n                  // Also update our Vue data model\n                  this.orders = [updatedOrder];\n                }\n              } catch (error) {\n                console.error(\"Error during direct DOM manipulation:\", error);\n              }\n              \n              // Always show notification to admin\n              this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\n              this.notificationClass = \"open-notification\";\n              this.showNotification();\n              \n              // Update the database in the background\n              fetch(`http://127.0.0.1:8000/orders/${orderId}/update-items`, {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                  status: \"pending\",\n                  isPendingApproval: false\n                })\n              })\n              .then(response => response.json())\n              .then(data => {\n                console.log(\"Database updated to reflect customer approval:\", data);\n                \n                // Always fetch all orders as a fallback\n                setTimeout(() => {\n                  this.fetchPendingOrders();\n                }, 1000);\n              })\n              .catch(err => {\n                console.error(\"Error updating database after customer approval:\", err);\n                \n                // Force reload as last resort for error cases\n                if (isSingleOrder) {\n                  setTimeout(() => location.reload(), 1000);\n                }\n              });\n            } else {\n              // If declined, handle in Vue since that part seems to work\n              this.orders = this.orders.filter(o => o.id !== orderId);\n              \n              // Show notification about the decline\n              this.notificationMessage = `Customer has declined order adjustments for Order #${orderId}`;\n              this.notificationClass = \"closed-notification\";\n              this.showNotification();\n            }\n          } else if (data.type === 'stock_update') {\n            // Handle stock update\n            const stockItem = this.stockItems.find(item => item.id === data.item_id);\n            if (stockItem) {\n              stockItem.quantity = data.new_quantity;\n              stockItem.min_stock_level = data.min_stock_level;\n              \n              // Update unique categories if needed\n              if (!this.uniqueCategories.includes(data.category)) {\n                this.uniqueCategories.push(data.category);\n              }\n            }\n            // Refresh stock items to ensure all data is up to date\n            await this.fetchStockItems();\n          } else if (data.type === 'menu_update') {\n            // Handle menu updates (new items, edited items, or deleted items)\n            await this.fetchStockItems(); // Refresh stock items when menu changes\n          } else if (data.type === 'category_update') {\n            // Handle category updates\n            await this.fetchStockItems(); // Refresh stock items when categories change\n            \n            // Update unique categories list\n            if (data.action === 'add' && data.category && data.category.name) {\n              if (!this.uniqueCategories.includes(data.category.name)) {\n                this.uniqueCategories.push(data.category.name);\n              }\n            } else if (data.action === 'update' && data.category) {\n              // Replace old category name with new one\n              const index = this.uniqueCategories.indexOf(data.category.old_name);\n              if (index !== -1) {\n                this.uniqueCategories[index] = data.category.name;\n              } else if (!this.uniqueCategories.includes(data.category.name)) {\n                this.uniqueCategories.push(data.category.name);\n              }\n              \n              // Update selected category if it was renamed\n              if (this.selectedCategory === data.category.old_name) {\n                this.selectedCategory = data.category.name;\n              }\n            } else if (data.action === 'delete' && data.category_name) {\n              // Remove deleted category\n              this.uniqueCategories = this.uniqueCategories.filter(cat => cat !== data.category_name);\n              \n              // Reset selected category if it was deleted\n              if (this.selectedCategory === data.category_name) {\n                this.selectedCategory = '';\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      \n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.wsConnected = false;\n        // Try to reconnect after 5 seconds\n        setTimeout(() => {\n          this.initWebSocket();\n        }, 5000);\n      };\n      \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.wsConnected = false;\n      };\n    },\n\n    // Handle localStorage changes for admin notifications\n    handleStorageEvent(event) {\n      // Check if the storage event is for admin notifications\n      if (event.key === 'user_notifications_Admin') {\n        // Process new admin notifications\n        this.processAdminNotifications();\n      }\n    },\n    \n    // Process admin notifications from localStorage\n    processAdminNotifications() {\n      // Get admin notifications \n      const adminNotificationsKey = 'user_notifications_Admin';\n      const adminNotifications = JSON.parse(localStorage.getItem(adminNotificationsKey)) || [];\n      \n      // Check for unprocessed customer response notifications\n      const unprocessedNotifications = adminNotifications.filter(n => \n        n.isAdminNotification && \n        (n.message.includes('APPROVED') || n.message.includes('DECLINED')) && \n        !n.processed\n      );\n      \n      // Process each notification\n      unprocessedNotifications.forEach(notification => {\n        const orderId = notification.orderId;\n        \n        if (notification.message.includes('APPROVED')) {\n          // If customer approved adjustments\n          // Find the order and update it\n          const orderIndex = this.orders.findIndex(o => o.id === orderId);\n          \n          if (orderIndex !== -1) {\n            // Update the order with adjusted items\n            this.orders[orderIndex].items = notification.items;\n            \n            // Mark the notification as processed\n            notification.processed = true;\n          }\n        } else if (notification.message.includes('DECLINED')) {\n          // If customer declined, remove the order\n          this.orders = this.orders.filter(o => o.id !== orderId);\n          \n          // Mark the notification as processed\n          notification.processed = true;\n        }\n      });\n      \n      // Update the processed notifications in localStorage\n      localStorage.setItem(adminNotificationsKey, JSON.stringify(adminNotifications));\n      \n      // Show notification to admin about the response\n      if (unprocessedNotifications.length > 0) {\n        const lastNotification = unprocessedNotifications[unprocessedNotifications.length - 1];\n        this.notificationMessage = lastNotification.message;\n        this.notificationClass = lastNotification.message.includes('APPROVED') ? \n          'open-notification' : 'closed-notification';\n        this.showNotification();\n      }\n    },\n    \n    // Fetch pending orders - wrapper for fetchOrders for consistency\n    fetchPendingOrders() {\n      this.fetchOrders();\n    },\n    \n    // Connect to WebSocket - renamed from initWebSocket for consistency\n    connectWebSocket() {\n      this.initWebSocket();\n    },\n\n    // Add this method to force refresh orders after WebSocket updates\n    forceRefreshOrder(orderId) {\n      console.log(`Forcing refresh for order #${orderId}, current orders count: ${this.orders.length}`);\n      \n      // Find the order that needs refreshing\n      const orderIndex = this.orders.findIndex(o => o.id === orderId);\n      \n      if (orderIndex !== -1) {\n        // Fetch the latest order data from the server to ensure it's up to date\n        fetch(`http://127.0.0.1:8000/orders/${orderId}`)\n          .then(response => response.json())\n          .then(data => {\n            if (data) {\n              console.log('Fetched fresh order data for real-time update:', data);\n              \n              // Create a fresh order object with the latest data\n              const updatedOrder = {\n                ...data,\n                isPendingApproval: data.isPendingApproval || false // Ensure the flag is set correctly\n              };\n              \n              // Special handling for single order\n              if (this.orders.length === 1) {\n                this.orders = [updatedOrder];\n              } else {\n                // Replace the order in the array using Vue reactivity\n                this.orders = [\n                  ...this.orders.slice(0, orderIndex),\n                  updatedOrder,\n                  ...this.orders.slice(orderIndex + 1)\n                ];\n              }\n              \n              // Force the component to re-render\n              this.$forceUpdate();\n              \n              console.log('Order updated successfully in UI:', updatedOrder);\n              \n              // If order is approved but UI doesn't update, try refreshing all orders\n              if (!updatedOrder.isPendingApproval) {\n                setTimeout(() => {\n                  this.fetchPendingOrders();\n                }, 300);\n              }\n            }\n          })\n          .catch(error => {\n            console.error('Error refreshing order:', error);\n            // Fallback to refreshing all orders on error\n            this.fetchPendingOrders();\n          });\n      } else {\n        console.log(`Order #${orderId} not found in current orders, refreshing all orders`);\n        // If the order isn't found in the current array, refresh all orders\n        this.fetchPendingOrders();\n      }\n    },\n\n    // Add direct DOM manipulation method to fix pending approval status when reactivity fails\n    forceFixPendingUI(orderId) {\n      console.log(`CRITICAL FIX: Using direct DOM manipulation to fix UI for order #${orderId}`);\n      \n      try {\n        // Find the order element\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"]`);\n        if (!orderElement) {\n          console.log(\"Order element not found for direct fix\");\n          return false;\n        }\n        \n        // Remove the critical class that causes the red border\n        orderElement.classList.remove('order-pending-approval');\n        \n        // Add a success indicator class\n        orderElement.classList.add('order-approved-success');\n        \n        // Find and update status text\n        const statusParagraphs = orderElement.querySelectorAll('p');\n        for (const paragraph of statusParagraphs) {\n          if (paragraph.textContent.includes(\"Status:\")) {\n            paragraph.innerHTML = '<strong>Status:</strong> pending';\n            console.log('Updated status text');\n          }\n        }\n        \n        // Remove the \"PENDING APPROVAL\" label\n        // Create a specific style for this order element\n        const styleId = `order-${orderId}-fix`;\n        let styleElement = document.getElementById(styleId);\n        \n        if (!styleElement) {\n          styleElement = document.createElement('style');\n          styleElement.id = styleId;\n          document.head.appendChild(styleElement);\n        }\n        \n        styleElement.textContent = `\n          .order-item[data-order-id=\"${orderId}\"]::before {\n            display: none !important;\n          }\n          .order-item[data-order-id=\"${orderId}\"].order-pending-approval {\n            background-color: #ffffff !important;\n            border: 2px solid #ddd !important;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;\n          }\n          .order-item[data-order-id=\"${orderId}\"] h3 {\n            color: #333 !important;\n          }\n          .order-item[data-order-id=\"${orderId}\"] .order-total {\n            color: #333 !important;\n          }\n          .order-approved-success {\n            animation: successPulse 1s;\n          }\n          @keyframes successPulse {\n            0% { background-color: #e6ffe6; }\n            50% { background-color: #ccffcc; }\n            100% { background-color: #ffffff; }\n          }\n        `;\n        \n        console.log(\"Direct DOM manipulation complete - critical CSS override applied\");\n        return true;\n      } catch (error) {\n        console.error(\"Error during direct DOM manipulation:\", error);\n        return false;\n      }\n    },\n\n    // Completely bypass Vue for this critical update\n    handleApprovalBypassVue(orderId) {\n      // Force a direct manipulation of the DOM \n      const fixed = this.forceFixPendingUI(orderId);\n      \n      // If direct manipulation succeeded, set a flag to prevent further attempts\n      if (fixed) {\n        // Store fixed orders in localStorage to avoid repeated fixes\n        const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\n        if (!fixedOrders.includes(orderId)) {\n          fixedOrders.push(orderId);\n          localStorage.setItem('fixedApprovedOrders', JSON.stringify(fixedOrders));\n        }\n        \n        // Show feedback to admin\n        this.notificationMessage = `The customer has APPROVED the order adjustments. Order ID: ${orderId}`;\n        this.notificationClass = \"open-notification\";\n        this.showNotification();\n      }\n      \n      // Force refresh orders after a short delay\n      setTimeout(() => {\n        this.fetchPendingOrders();\n      }, 1000);\n    },\n  },\n\n  mounted() {\n    this.fetchPendingOrders();\n    // Set up automatic refresh every 60 seconds\n    this.refreshInterval = setInterval(() => {\n      this.fetchPendingOrders();\n    }, 60000);\n    \n    // Check localStorage for cafe status\n    const storedCafeStatus = localStorage.getItem('isCafeOpen');\n    if (storedCafeStatus !== null) {\n      this.isCafeOpen = storedCafeStatus === 'true';\n    }\n    \n    // Load orderReadyStatus from localStorage if available\n    const savedOrderReadyStatus = localStorage.getItem('orderReadyStatus');\n    if (savedOrderReadyStatus) {\n      this.orderReadyStatus = JSON.parse(savedOrderReadyStatus);\n    }\n    \n    // Event listener for customer approval/decline responses\n    window.addEventListener('storage', this.handleStorageEvent);\n    \n    // Connect to WebSocket\n    this.connectWebSocket();\n    \n    // Add a global document event listener for a custom event we'll dispatch on customer approval\n    document.addEventListener('customer-approval', (event) => {\n      if (event.detail && event.detail.orderId) {\n        console.log('Got customer-approval event at document level:', event.detail);\n        this.handleApprovalBypassVue(event.detail.orderId);\n      }\n    });\n    \n    // Dispatch a custom approval event if we have any approvals stored in localStorage\n    // This helps sync UI state on page load\n    const fixedOrders = JSON.parse(localStorage.getItem('fixedApprovedOrders') || '[]');\n    fixedOrders.forEach(orderId => {\n      setTimeout(() => {\n        const orderElement = document.querySelector(`.order-item[data-order-id=\"${orderId}\"].order-pending-approval`);\n        if (orderElement) {\n          console.log(`Found previously fixed order #${orderId} still showing pending, re-fixing`);\n          this.forceFixPendingUI(orderId);\n        }\n      }, 1000);\n    });\n  },\n\n  beforeUnmount() {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n    \n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n    }\n    \n    // Remove event listeners\n    window.removeEventListener('storage', this.handleStorageEvent);\n    document.removeEventListener('customer-approval', this.handleApprovalBypassVue);\n  }\n};\n</script>\n\n<style scoped>\n/* Base styles for all screen sizes */\n.notifications-page {\n  height: 100vh;\n  display: flex;\n  background-color: #ffffff;\n}\n\n/* Top Bar Styles to match dashboard */\n.top-bar {\n  display: flex;\n  align-items: center;\n  background-image: linear-gradient(to right, #E54F70, #ed9598);\n  padding: 0 15px;\n  height: 60px;\n  width: 100%;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 100;\n}\n\n.content.shifted .top-bar {\n  left: 300px; /* Adjust left position when sidebar is open */\n  width: calc(100% - 300px); /* Adjust width when sidebar is open */\n}\n\n.content-below-top-bar {\n  margin-top: 70px; /* Add margin to account for the fixed top bar */\n  padding: 10px 20px;\n}\n\n.centered-content {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 0 0 0 5px; /* Reduce left padding to move button closer to edge */\n  height: 100%;\n}\n\n.logo-container {\n  display: flex;\n  align-items: center;\n}\n\n.cafe-title {\n  color: white;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: nowrap;\n}\n\n/* Menu Button */\n.menu-button {\n  position: fixed;\n  top: 15px;\n  left: 15px;\n  z-index: 300;\n  background: #d12f7a;\n  color: white;\n  padding: 12px 15px;\n  font-size: 20px;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  display: none; /* Hide the floating button */\n}\n\n.menu-button:hover {\n  background: #b82d67;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n}\n\n.menu-icon-container {\n  position: relative;\n  display: inline-block;\n  font-size: 24px;\n}\n\n/* Sidebar */\n.sidebar {\n  position: fixed;\n  top: 0;\n  left: -300px;\n  height: 100vh;\n  width: 300px;\n  background: #f5f5f5;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  padding: 20px 0;\n  box-shadow: 4px 0 15px rgba(0, 0, 0, 0.1);\n  color: #333;\n}\n\n.sidebar.open {\n  left: 0;\n}\n\n.close-sidebar {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  background: rgba(209, 47, 122, 0.1);\n  border: none;\n  font-size: 20px;\n  cursor: pointer;\n  color: #d12f7a;\n  padding: 8px 12px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n}\n\n.close-sidebar:hover {\n  background: rgba(209, 47, 122, 0.2);\n  transform: rotate(90deg);\n}\n\n/* User Profile Section */\n.user-profile-section {\n  padding: 30px 20px;\n  text-align: center;\n  margin-bottom: 20px;\n  background: rgba(209, 47, 122, 0.1);\n  border-radius: 15px;\n  margin: 0 15px 20px;\n}\n\n.user-profile-section h3 {\n  color: #d12f7a;\n  margin: 0;\n  font-size: 28px;\n  font-weight: 600;\n  text-shadow: none;\n}\n\n/* Utility Section */\n.utility-section {\n  padding: 15px;\n  margin: 0 15px;\n  background: white;\n  border-radius: 15px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.utility-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 14px 20px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  color: #333;\n  font-size: 16px;\n  text-decoration: none;\n  transition: all 0.3s ease;\n  border-radius: 10px;\n  margin-bottom: 8px;\n  position: relative;\n  overflow: hidden;\n}\n\n.utility-button:last-child {\n  margin-bottom: 0;\n}\n\n.utility-button:hover {\n  background: rgba(209, 47, 122, 0.1);\n  transform: translateX(5px);\n}\n\n.utility-button i {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #d12f7a;\n  border-radius: 8px;\n  font-size: 16px;\n  color: white;\n  transition: all 0.3s ease;\n}\n\n.utility-button:hover i {\n  transform: rotate(10deg);\n}\n\n.utility-button span {\n  font-weight: 500;\n}\n\n.utility-button.logout {\n  background: rgba(244, 67, 54, 0.1);\n  color: #f44336;\n  margin-top: 8px;\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.utility-button.logout i {\n  background: #f44336;\n}\n\n.utility-button.logout:hover {\n  background: rgba(244, 67, 54, 0.15);\n}\n\n/* Cafe Status Section */\n.cafe-status-section {\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.cafe-toggle-btn {\n  font-size: 16px;\n  padding: 12px 24px;\n  border: 2px solid #d12f7a;\n  cursor: pointer;\n  border-radius: 30px;\n  transition: all 0.3s ease;\n  font-weight: 600;\n  width: 100%;\n  background: white;\n  color: #d12f7a;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n}\n\n.cafe-toggle-btn::before {\n  content: '🏪';\n  font-size: 20px;\n}\n\n.cafe-toggle-btn:hover {\n  background: rgba(209, 47, 122, 0.1);\n  transform: translateY(-2px);\n}\n\n.cafe-toggle-btn.open-btn {\n  border-color: #4CAF50;\n  color: #4CAF50;\n}\n\n.cafe-toggle-btn.open-btn::before {\n  content: '✅';\n}\n\n.cafe-toggle-btn.closed-btn {\n  border-color: #f44336;\n  color: #f44336;\n}\n\n.cafe-toggle-btn.closed-btn::before {\n  content: '🚫';\n}\n\n/* Utility Divider */\n.utility-divider {\n  border: none;\n  height: 1px;\n  background: rgba(0, 0, 0, 0.1);\n  margin: 15px;\n  border-radius: 1px;\n}\n\n/* Main Content Area */\n.content {\n  flex: 1;\n  margin-left: 0;\n  padding: 20px;\n  transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.content.shifted {\n  margin-left: 300px;\n}\n\n/* Overlay */\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(4px);\n  z-index: 999;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.overlay.visible {\n  opacity: 1;\n}\n\n/* Search Bar */\n.search-bar {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20px auto;\n  width: 90%;\n  max-width: 400px;\n  background-color: transparent;\n  border-radius: 30px;\n  border: 2px solid #d12f7a;\n}\n\n.search-input {\n  width: 100%;\n  padding: 10px 15px;\n  font-size: 16px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: #333;\n  border-radius: 30px;\n}\n\n/* Orders Container */\n.orders-container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.orders-container h2 {\n  text-align: center;\n  color: #d12f7a;\n  margin-bottom: 20px;\n}\n\n.orders-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 20px;\n  width: 100%;\n}\n\n/* Order Item */\n.order-item {\n  background-color: #f8d2e4;\n  padding: 15px;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: auto;\n  transition: all 0.3s ease-in-out;\n}\n\n.order-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n}\n\n.order-details h3 {\n  color: #d12f7a;\n  margin-top: 0;\n}\n\n.order-details p {\n  margin: 5px 0;\n}\n\n.items-section {\n  margin-top: 15px; \n  flex-grow: 1; /* Allow the items section to expand and adapt */\n}\n\n.order-actions {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 15px;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 20px;\n  margin: 0;\n}\n\n.order-total {\n  margin-top: 10px;\n  font-weight: bold;\n  color: #d12f7a;\n  text-align: center; /* Ensure it aligns nicely with the rest of the content */\n}\n\n/* Button styles */\nbutton.mark-completed-btn {\n  background-color: #d12f7a;\n  color: white;\n  border: none;\n  padding: 8px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  width: 100%;\n  transition: all 0.3s ease;\n}\n\nbutton.mark-completed-btn:disabled,\nbutton.mark-completed-btn.disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\nbutton.mark-completed-btn:not(:disabled):hover {\n  background-color: #b82d67;\n}\n\n.order-ready-btn {\n  background-color: #4caf50; /* Green background for success */\n  color: white; /* White text */\n  padding: 8px 10px;\n  font-size: 14px;\n  border: none;\n  border-radius: 5px; /* Rounded corners */\n  cursor: pointer;\n  width: 100%;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n}\n\n.order-ready-btn:hover {\n  background-color: #45a049; /* Slightly darker green when hovered */\n  transform: translateY(-2px); /* Slight upward movement on hover */\n}\n\n.order-ready-btn:active {\n  background-color: #388e3c; /* Even darker green when clicked */\n  transform: translateY(0); /* Reset the movement after click */\n}\n\nbutton.decline-btn {\n  background-color: #f5a5a5;\n  color: white;\n  border: none;\n  padding: 8px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  width: 100%;\n}\n\nbutton.decline-btn:hover {\n  background-color: #f17b7b;\n}\n\n/* Notification styles */\n.notification-popup,\n.notification-sent-popup {\n  position: fixed;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 15px 30px;\n  border-radius: 8px;\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  font-size: 18px;\n  min-width: 200px;\n  max-width: 90%;\n  z-index: 1000;\n  transition: opacity 0.3s ease, transform 0.3s ease;\n  opacity: 1;\n  text-align: center;\n}\n\n.notification-sent-popup {\n  background-color: rgb(82, 13, 45);\n  color: white;\n}\n\n.notification-popup.hide {\n  opacity: 0;\n  transform: translateX(-50%) translateY(-20px);\n}\n\n.notification-popup button,\n.notification-sent-popup button {\n  background-color: #fff;\n  color: #007bff;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  margin-left: 10px;\n  font-size: 14px;\n}\n\n.notification-popup button:hover,\n.notification-sent-popup button:hover {\n  background-color: #f1f1f1;\n}\n\n.notification-popup.open-notification {\n  background-color: #4caf50;\n  color: white;\n}\n\n.notification-popup.closed-notification {\n  background-color: red;\n  color: white;\n}\n\n.highlighted-order-details {\n  display: inline-block;\n  background-color: #f8d2e4;\n  color: #d12f7a;\n  padding: 10px;\n  border-radius: 5px;\n  margin-top: 10px;\n  font-weight: bold;\n  border: 2px solid #d12f7a;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  text-align: center;\n  box-sizing: border-box;\n}\n\n.highlighted-order-details::before {\n  content: \"——— \";\n  font-size: 24px;\n  font-weight: bold;\n  color: #d12f7a;\n}\n\n.loading {\n  text-align: center;\n  color: #d12f7a;\n  font-size: 20px;\n  margin-top: 20px;\n}\n\n.no-orders {\n  text-align: center;\n  margin: 30px 0;\n}\n\n.highlighted-time {\n  color: #d12f7a;\n  font-weight: bold;\n}\n\n.dark-mode .highlighted-time {\n  color: #f8d2e4;\n}\n\n.section-divider {\n  border-top: 1px solid #ddd;\n  margin: 30px 0;\n}\n\n/* Media Queries for Responsive Design */\n@media (max-width: 768px) {\n  .header {\n    flex-direction: column;\n    align-items: center;\n    gap: 15px;\n  }\n  \n  .header-buttons {\n    order: 3;\n    width: 100%;\n    justify-content: center;\n  }\n  \n  h1 {\n    order: 1;\n    width: 100%;\n  }\n  \n  .order-record-button {\n    order: 2;\n    width: 100%;\n    max-width: 200px;\n  }\n  \n  .logout-button {\n    order: 4;\n    width: 100%;\n    max-width: 200px;\n  }\n  \n  .orders-list {\n    grid-template-columns: 1fr;\n  }\n}\n\n@media (max-width: 480px) {\n  .notifications-page {\n    padding: 10px;\n  }\n  \n  .cafe-toggle-btn {\n    width: 180px;\n    font-size: 14px;\n  }\n  \n  .notification-popup,\n  .notification-sent-popup {\n    font-size: 16px;\n    padding: 10px 20px;\n  }\n  \n  .order-item {\n    padding: 12px;\n  }\n  \n  .decline-container {\n    padding: 10px;\n  }\n  \n  .decline-buttons {\n    flex-direction: column;\n  }\n  \n  .decline-submit-btn,\n  .decline-cancel-btn {\n    width: 100%;\n  }\n}\n\n/* Menu Editor Modal Styles */\n.menu-editor-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1001;\n  overflow-y: auto;\n}\n\n.menu-editor-content {\n  background-color: white;\n  width: 90%;\n  max-width: 800px;\n  max-height: 90vh;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.menu-editor-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  background-color: #f8d2e4;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.menu-editor-header h2 {\n  color: #d12f7a;\n  margin: 0;\n}\n\n.close-modal-btn {\n  background: none;\n  border: none;\n  color: #d12f7a;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px;\n}\n\n.close-modal-btn:hover {\n  color: #b82d67;\n}\n\n.menu-editor-body {\n  padding: 20px;\n  overflow-y: auto;\n  max-height: calc(90vh - 70px); /* Subtract header height */\n}\n\n/* Media query adjustments for the modal */\n@media (max-width: 768px) {\n  .menu-editor-content {\n    width: 95%;\n    max-height: 95vh;\n  }\n}\n\n@media (max-width: 480px) {\n  .menu-editor-header {\n    padding: 10px 15px;\n  }\n  \n  .menu-editor-body {\n    padding: 15px;\n  }\n}\n\n/* Completion Confirmation Popup Styles */\n.completion-confirmation-popup {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1002;\n}\n\n.completion-confirmation-content {\n  background-color: white;\n  padding: 25px;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  text-align: center;\n  max-width: 400px;\n  width: 90%;\n}\n\n.completion-confirmation-content h3 {\n  color: #d12f7a;\n  margin-top: 0;\n  margin-bottom: 15px;\n  font-size: 1.5em;\n}\n\n.completion-confirmation-content p {\n  margin-bottom: 20px;\n  font-size: 1.1em;\n  color: #333;\n}\n\n.confirmation-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n}\n\n.confirm-yes-btn,\n.confirm-no-btn {\n  padding: 10px 25px;\n  border: none;\n  border-radius: 5px;\n  font-size: 1.1em;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.confirm-yes-btn {\n  background-color: #d12f7a;\n  color: white;\n}\n\n.confirm-yes-btn:hover {\n  background-color: #b82d67;\n  transform: translateY(-2px);\n}\n\n.confirm-no-btn {\n  background-color: #f5a5a5;\n  color: white;\n}\n\n.confirm-no-btn:hover {\n  background-color: #f17b7b;\n  transform: translateY(-2px);\n}\n\n/* Media query adjustments for the confirmation popup */\n@media (max-width: 480px) {\n  .completion-confirmation-content {\n    padding: 20px;\n    width: 85%;\n  }\n\n  .confirmation-buttons {\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .confirm-yes-btn,\n  .confirm-no-btn {\n    width: 100%;\n    padding: 12px;\n  }\n}\n\n/* Stock Management Modal Styles */\n.stock-manager-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1001;\n}\n\n.stock-manager-content {\n  background-color: white;\n  width: 90%;\n  max-width: 1000px;\n  max-height: 90vh;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  display: flex;\n  flex-direction: column;\n}\n\n.stock-manager-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  background-color: #f8d2e4;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n\n.stock-manager-header h2 {\n  color: #d12f7a;\n  margin: 0;\n}\n\n.stock-manager-body {\n  padding: 20px;\n  overflow-y: auto;\n}\n\n.stock-search-bar {\n  margin-bottom: 20px;\n}\n\n.stock-table-container {\n  overflow-x: auto;\n}\n\n.stock-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.stock-table th,\n.stock-table td {\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\n.stock-table th {\n  background-color: #f8d2e4;\n  color: #d12f7a;\n}\n\n.status-out {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.status-low {\n  color: #ff9800;\n  font-weight: bold;\n}\n\n.status-ok {\n  color: #4caf50;\n  font-weight: bold;\n}\n\n.status-disabled {\n  color: #9e9e9e;\n  font-weight: bold;\n}\n\n.status-enabled {\n  color: #2196f3;\n  font-weight: bold;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 10px;\n}\n\n.update-stock-btn {\n  background-color: #d12f7a;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 20px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(209, 47, 122, 0.2);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n}\n\n.update-stock-btn::before {\n  content: '📦';\n  font-size: 16px;\n}\n\n.update-stock-btn:hover {\n  background-color: #b82d67;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(209, 47, 122, 0.3);\n}\n\n.update-stock-btn:active {\n  transform: translateY(0);\n  box-shadow: 0 2px 4px rgba(209, 47, 122, 0.2);\n}\n\n.stock-update-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1002;\n}\n\n.stock-update-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 10px;\n  width: 90%;\n  max-width: 400px;\n}\n\n.stock-update-form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.form-group label {\n  font-weight: bold;\n}\n\n.form-group input,\n.form-group select {\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.update-buttons {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 20px;\n}\n\n.confirm-btn,\n.cancel-btn {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.confirm-btn {\n  background-color: #d12f7a;\n  color: white;\n}\n\n.cancel-btn {\n  background-color: #f5a5a5;\n  color: white;\n}\n\n.low-stock {\n  color: #ff9800;\n  font-weight: bold;\n}\n\n.out-of-stock {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.stock-filters {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 15px;\n  width: 100%;\n}\n\n.category-filter {\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  min-width: 150px;\n  background-color: white;\n  cursor: pointer;\n}\n\n.category-filter:hover {\n  border-color: #d12f7a;\n}\n\n.dark-mode .category-filter {\n  background-color: #333;\n  color: white;\n  border-color: #555;\n}\n\n.dark-mode .category-filter:hover {\n  border-color: #f8c6d0;\n}\n\n/* Add styles for the new header menu button */\n.menu-button-header {\n  background: #d12f7a;\n  color: white;\n  padding: 8px 12px;\n  font-size: 18px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  margin-right: 15px;\n  margin-left: 0; /* Ensure no left margin */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.menu-button-header:hover {\n  background: #b82d67;\n}\n\n/* New styles for decline modal and order highlighting */\n.order-declined-state {\n  background-color: #ffe6e6 !important;\n  border: 2px solid #ff0000 !important;\n}\n\n.order-pending-approval {\n  background-color: #ffe6e6 !important;\n  border: 2px solid #ff0000 !important;\n  box-shadow: 0 4px 10px rgba(255, 0, 0, 0.2) !important;\n  position: relative;\n  transition: all 0.5s ease-in-out;\n}\n\n.order-pending-approval::before {\n  content: 'PENDING APPROVAL';\n  position: absolute;\n  top: 0;\n  right: 0;\n  background-color: #ff0000;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 4px 8px;\n  border-bottom-left-radius: 8px;\n}\n\n.order-pending-approval h3 {\n  color: #ff0000 !important;\n}\n\n.order-pending-approval .order-details p {\n  color: #333 !important;\n}\n\n.order-pending-approval .order-total {\n  color: #ff0000 !important;\n  font-weight: bold;\n}\n\n.decline-modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.decline-modal-content {\n  background-color: white;\n  border-radius: 8px;\n  width: 90%;\n  max-width: 600px;\n  max-height: 90vh;\n  overflow-y: auto;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);\n}\n\n.decline-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  border-bottom: 1px solid #eee;\n  background-color: #f8d2e4;\n}\n\n.decline-modal-header h3 {\n  margin: 0;\n  color: #d12f7a;\n}\n\n.decline-modal-body {\n  padding: 20px;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n  color: #333;\n}\n\n.form-group textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  resize: vertical;\n}\n\n.items-adjustment {\n  max-height: 200px;\n  overflow-y: auto;\n  border: 1px solid #eee;\n  border-radius: 4px;\n  margin-bottom: 10px;\n}\n\n.item-adjust-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n.item-adjust-row:last-child {\n  border-bottom: none;\n}\n\n.item-name {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  margin: 0 10px;\n}\n\n.quantity-controls button {\n  width: 30px;\n  height: 30px;\n  border: 1px solid #ddd;\n  background-color: #f0f0f0;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.quantity-controls button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.quantity-controls input {\n  width: 50px;\n  text-align: center;\n  margin: 0 5px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.item-price {\n  min-width: 80px;\n  text-align: right;\n  font-weight: bold;\n}\n\n.adjusted-total {\n  text-align: right;\n  font-size: 16px;\n  margin-top: 10px;\n  color: #d12f7a;\n}\n\n.decline-modal-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.send-approval-btn {\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.confirm-decline-btn {\n  background-color: #f44336;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n/* Animation for order approval transition */\n@keyframes orderApproved {\n  0% {\n    background-color: #ffe6e6;\n    border-color: #ff0000;\n    box-shadow: 0 4px 10px rgba(255, 0, 0, 0.2);\n  }\n  50% {\n    background-color: #e6ffe6;\n    border-color: #4caf50;\n    box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3);\n  }\n  100% {\n    background-color: white;\n    border-color: #ddd;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  }\n}\n\n.order-approved-animation {\n  animation: orderApproved 1.5s ease-in-out forwards;\n}\n\n/* Add the success animation styles */\n@keyframes successPulse {\n  0% { background-color: #fff; }\n  25% { background-color: #e6ffe6; }\n  50% { background-color: #ccffcc; }\n  75% { background-color: #e6ffe6; }\n  100% { background-color: #fff; }\n}\n\n.order-approved-success {\n  animation: successPulse 2s ease;\n  border: 2px solid #4CAF50 !important;\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3) !important;\n}\n\n/* Settings Modal Styles */\n.settings-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1003;\n}\n\n.settings-content {\n  background-color: white;\n  padding: 25px;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  text-align: center;\n  max-width: 400px;\n  width: 90%;\n}\n\n.settings-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  background-color: #f8d2e4;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.settings-header h2 {\n  color: #d12f7a;\n  margin: 0;\n}\n\n.close-modal-btn {\n  background: none;\n  border: none;\n  color: #d12f7a;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px;\n}\n\n.close-modal-btn:hover {\n  color: #b82d67;\n}\n\n.settings-body {\n  padding: 20px;\n  overflow-y: auto;\n  max-height: calc(90vh - 70px); /* Subtract header height */\n}\n\n.settings-section {\n  margin-bottom: 20px;\n}\n\n.settings-section h3 {\n  color: #d12f7a;\n  margin-top: 0;\n  margin-bottom: 15px;\n  font-size: 1.5em;\n}\n\n.password-form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.form-group label {\n  font-weight: bold;\n}\n\n.form-group input {\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.error-message,\n.success-message {\n  color: #f44336;\n  font-size: 14px;\n  margin-top: 5px;\n  padding: 8px;\n  background-color: #ffebee;\n  border-radius: 4px;\n  border-left: 4px solid #f44336;\n}\n\n.success-message {\n  color: #4caf50;\n  font-size: 14px;\n  margin-top: 5px;\n  padding: 8px;\n  background-color: #e8f5e9;\n  border-radius: 4px;\n  border-left: 4px solid #4caf50;\n}\n\n.change-password-btn {\n  background-color: #d12f7a;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.change-password-btn:hover {\n  background-color: #b82d67;\n}\n\n/* Media query adjustments for the settings modal */\n@media (max-width: 768px) {\n  .settings-content {\n    width: 95%;\n    max-height: 95vh;\n  }\n}\n\n@media (max-width: 480px) {\n  .settings-header {\n    padding: 10px 15px;\n  }\n  \n  .settings-body {\n    padding: 15px;\n  }\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}