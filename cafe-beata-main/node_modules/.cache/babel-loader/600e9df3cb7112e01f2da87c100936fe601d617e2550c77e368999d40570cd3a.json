{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport StockIndicator from './StockIndicator.vue';\n// Import UserNotifications component\nimport UserNotifications from '@/components/UserNotifications.vue';\nimport { eventBus } from \"@/utils/eventBus\";\nexport default {\n  components: {\n    StockIndicator,\n    UserNotifications\n  },\n  data() {\n    return {\n      userName: '',\n      userProfileImage: '',\n      userEmail: localStorage.getItem('userEmail'),\n      itemsRefreshInterval: null,\n      searchQuery: '',\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\",\n      currentCategory: 'All Drinks',\n      currentTime: new Date().toLocaleTimeString(),\n      isSidebarOpen: false,\n      isLoading: false,\n      apiItems: [],\n      filteredItems: [],\n      categories: [],\n      showItemModal: false,\n      selectedItem: null,\n      cartItemCount: 0,\n      cart: [],\n      // Array to store cart items\n      modalQuantity: 1,\n      itemStocks: {},\n      // Add back the itemStocks property\n      ws: null,\n      wsConnected: false,\n      isAdmin: localStorage.getItem('role') === 'admin',\n      isSyncing: false,\n      userAvatar: '',\n      // Add this property to store the user's avatar URL\n      unreadNotificationsCount: 0\n    };\n  },\n  created() {\n    // Just listen for notification updates to sync with UserNotifications\n    window.addEventListener(\"notificationUpdated\", this.handleNotificationUpdate);\n    window.addEventListener(\"items-updated\", this.handleItemsUpdated);\n    this.initWebSocket();\n  },\n  beforeUnmount() {\n    // Remove listeners\n    window.removeEventListener(\"notificationUpdated\", this.handleNotificationUpdate);\n    window.removeEventListener(\"items-updated\", this.handleItemsUpdated);\n    window.removeEventListener('categories-updated', this.handleCategoriesUpdated);\n    this.stopPollingForItems();\n    window.removeEventListener('storage', this.updateCartCount);\n    if (this.ws) {\n      this.ws.close();\n    }\n  },\n  async mounted() {\n    // Watch for notification updates through eventBus for UI updates\n    this.$watch(() => eventBus.notificationsCount, newCount => {\n      console.log('Notification count updated:', newCount);\n      // No need to store locally as UserNotifications manages this\n    });\n\n    // Check for last viewed category first\n    const lastViewedCategory = localStorage.getItem('lastViewedCategory');\n    if (lastViewedCategory) {\n      this.currentCategory = lastViewedCategory;\n    } else if (this.$route.query.category) {\n      // Only use route query if no last viewed category exists\n      this.currentCategory = this.$route.query.category;\n    }\n    this.updateTime();\n    this.applyDarkMode(this.isDarkMode);\n    await this.loadUserProfile();\n\n    // Initialize WebSocket first for real-time updates\n    this.initWebSocket();\n\n    // Load initial data\n    await this.fetchItems();\n    this.startPollingForItems();\n    await this.loadCategories();\n\n    // Trigger a sync of inventory products when the component mounts\n    // This ensures the latest Ready Made products are available\n    try {\n      if (!this.isSyncing) {\n        console.log('Triggering inventory sync on component mount');\n        await this.syncInventoryProducts();\n      }\n    } catch (error) {\n      console.error('Error syncing inventory on mount:', error);\n    }\n\n    // Filter items after loading everything\n    this.filterItems();\n    window.addEventListener('categories-updated', this.handleCategoriesUpdated);\n    this.updateCartCount();\n    window.addEventListener('storage', this.updateCartCount);\n  },\n  methods: {\n    // Handle notification updates\n    handleNotificationUpdate() {\n      // This event is fired when notifications are updated\n      // The UserNotifications component already manages the badge state\n      console.log('Notification update detected');\n    },\n    // Handle item updates from ItemEditor\n    handleItemsUpdated(event) {\n      console.log('Items updated event received:', event.detail);\n\n      // Silently refresh items without showing loading indicators\n      try {\n        fetch('http://localhost:8000/api/items').then(response => response.json()).then(data => {\n          if (data.items) {\n            this.apiItems = data.items;\n            this.filterItems();\n          }\n        });\n      } catch (error) {\n        console.error('Error refreshing items after update:', error);\n      }\n\n      // Only switch to the category if the user is not on the \"All Drinks\" view\n      // This way, new items will appear in the All Drinks view without changing the user's context\n      if (this.currentCategory !== 'All Drinks' && event.detail.action !== 'deleted' && event.detail.category && event.detail.category !== this.currentCategory) {\n        this.currentCategory = event.detail.category;\n      }\n    },\n    // New method to manually refresh items\n    async refreshItems() {\n      this.isLoading = true;\n      await this.fetchItems();\n      this.filterItems();\n      this.isLoading = false;\n    },\n    // New method to start polling for items\n    startPollingForItems() {\n      this.itemsRefreshInterval = setInterval(async () => {\n        // Fetch items silently in the background without showing loading indicators\n        try {\n          const response = await fetch('http://localhost:8000/api/items');\n          const data = await response.json();\n          if (data.items) {\n            this.apiItems = data.items;\n            // Update filtered items without changing the loading state\n            this.filterItems();\n          }\n        } catch (error) {\n          console.error('Error fetching items during background refresh:', error);\n        }\n      }, 10000); // Check for new items every 10 seconds\n    },\n    // New method to stop polling for items\n    stopPollingForItems() {\n      if (this.itemsRefreshInterval) {\n        clearInterval(this.itemsRefreshInterval);\n      }\n    },\n    // New method to fetch items from API\n    async fetchItems() {\n      const wasLoading = this.isLoading;\n      try {\n        const [itemsResponse, stocksResponse] = await Promise.all([fetch('http://localhost:8000/api/items'), fetch('http://localhost:8000/api/stocks')]);\n        const itemsData = await itemsResponse.json();\n        const stocksData = await stocksResponse.json();\n        if (itemsData.items) {\n          this.apiItems = itemsData.items;\n\n          // Debug log for inventory items\n          const inventoryItems = this.apiItems.filter(item => item.external_source === 'inventory');\n          console.log(`Found ${inventoryItems.length} items from inventory system:`, inventoryItems.map(item => ({\n            id: item.id,\n            name: item.name,\n            category: item.category\n          })));\n        }\n        if (stocksData.success) {\n          // Convert array to object for easier lookup\n          this.itemStocks = stocksData.items.reduce((acc, stock) => {\n            acc[stock.item_id] = stock;\n            return acc;\n          }, {});\n        }\n        if (!wasLoading) {\n          this.filterItems();\n        }\n      } catch (error) {\n        console.error('Error fetching items or stocks:', error);\n      } finally {\n        if (wasLoading) {\n          this.isLoading = false;\n        }\n      }\n    },\n    async loadUserProfile() {\n      const userName = localStorage.getItem('userName');\n      const userEmail = localStorage.getItem('userEmail');\n      if (userName) {\n        this.userName = userName;\n\n        // Fetch profile data from the server to get avatar\n        if (userEmail) {\n          try {\n            const response = await fetch(`http://127.0.0.1:8000/profile/${encodeURIComponent(userEmail)}`);\n            const data = await response.json();\n            if (response.ok) {\n              // Set the avatar from the profile data\n              this.userAvatar = data.avatar || '';\n            }\n          } catch (error) {\n            console.error('Error loading profile:', error);\n            // Fall back to the avatar service if profile loading fails\n          }\n        }\n      } else {\n        // If no username, redirect to login\n        this.$router.push({\n          name: 'Login'\n        });\n      }\n    },\n    // toggleDarkMode is the next method after removing the notification related methods\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n      localStorage.setItem(\"darkMode\", this.isDarkMode ? \"enabled\" : \"disabled\");\n      this.applyDarkMode(this.isDarkMode);\n    },\n    applyDarkMode(isDark) {\n      if (isDark) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    },\n    updateTime() {\n      setInterval(() => {\n        const now = new Date();\n        let hours = now.getHours();\n        let minutes = now.getMinutes();\n        let seconds = now.getSeconds();\n        let ampm = hours >= 12 ? 'PM' : 'AM';\n        hours = hours % 12 || 12; // Convert 24-hour time to 12-hour format\n        minutes = minutes < 10 ? '0' + minutes : minutes; // Ensure two digits for minutes\n        seconds = seconds < 10 ? '0' + seconds : seconds; // Ensure two digits for seconds\n\n        this.currentTime = `${hours}:${minutes}:${seconds} ${ampm}`; // Example: 2:03:11 PM\n      }, 1000); // Update every second\n    },\n    filterCategory(category) {\n      this.currentCategory = category;\n      // Save the selected category\n      localStorage.setItem('lastViewedCategory', category);\n      this.filterItems();\n\n      // Close sidebar on mobile after selecting a category\n      if (window.innerWidth <= 768) {\n        this.closeSidebar();\n      }\n    },\n    getImagePath(imagePath) {\n      // If there's no image path, use a default image\n      if (!imagePath) {\n        return require('@/assets/default.png');\n      }\n\n      // Check if this is an inventory system item (using port 8001)\n      if (imagePath.includes('localhost:8001') || this.selectedItem && this.isInventoryItem(this.selectedItem)) {\n        console.log('Inventory image path:', imagePath);\n\n        // Check if the path needs to be fixed - it should point to /uploads/products/\n        if (imagePath.includes('/uploads/') && !imagePath.includes('/uploads/products/')) {\n          // Extract the filename\n          const parts = imagePath.split('/');\n          const filename = parts[parts.length - 1];\n          const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n          console.log('Fixed inventory image path:', fixedPath);\n          return fixedPath;\n        }\n\n        // If it's already a full URL to the inventory system, use it directly\n        if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n          return imagePath;\n        }\n\n        // For simple filenames in inventory system\n        if (!imagePath.includes('/')) {\n          return `http://localhost:8001/uploads/products/${imagePath}`;\n        }\n        return imagePath;\n      }\n\n      // For cafe-beata system (regular menu items)\n\n      // If it's already a full URL, use it directly\n      if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n        return imagePath;\n      }\n\n      // For cafe-beata system uploads with /uploads/ path\n      if (imagePath.startsWith('/uploads/')) {\n        return `http://localhost:8000${imagePath}`;\n      }\n\n      // For simple filenames in cafe-beata system\n      if (!imagePath.includes('/')) {\n        return `http://localhost:8000/uploads/${imagePath}`;\n      }\n\n      // Default fallback\n      return require('@/assets/default.png');\n    },\n    filterItems() {\n      const query = this.searchQuery.toLowerCase();\n\n      // Add debug log for all inventory items\n      const inventoryItems = this.apiItems.filter(item => item.external_source === 'inventory');\n      console.log(`Total inventory items in database: ${inventoryItems.length}`);\n      if (inventoryItems.length > 0) {\n        console.log(\"Inventory items:\", inventoryItems.map(item => ({\n          id: item.id,\n          name: item.name\n        })));\n      }\n\n      // Filter API items based on category and search query\n      if (this.currentCategory === 'All Drinks') {\n        // For \"All Drinks\", exclude all inventory items\n        this.filteredItems = this.apiItems.filter(item => !this.foodCategories.includes(item.category) &&\n        // Exclude food categories\n        !this.readyMadeCategories.includes(item.category) &&\n        // Exclude ready-made categories\n        item.external_source !== 'inventory' &&\n        // Exclude inventory items from drinks\n        item.name.toLowerCase().includes(query));\n      } else if (this.currentCategory === 'All Food') {\n        // For \"All Food\", exclude all inventory items\n        this.filteredItems = this.apiItems.filter(item => this.foodCategories.includes(item.category) && item.external_source !== 'inventory' &&\n        // Exclude inventory items from food\n        item.name.toLowerCase().includes(query));\n      } else if (this.currentCategory === 'All Ready Made') {\n        // For \"All Ready Made\", ONLY show inventory items\n        this.filteredItems = this.apiItems.filter(item => item.external_source === 'inventory' && item.name.toLowerCase().includes(query));\n        console.log(`Showing ${this.filteredItems.length} inventory items in the Ready Made section`);\n      } else {\n        // For specific categories\n        const isReadyMadeCategory = this.readyMadeCategories.includes(this.currentCategory);\n        if (isReadyMadeCategory) {\n          // For Ready Made categories, only show inventory items for that category\n          this.filteredItems = this.apiItems.filter(item => item.category === this.currentCategory && item.external_source === 'inventory' && item.name.toLowerCase().includes(query));\n        } else {\n          // For other categories, exclude all inventory items\n          this.filteredItems = this.apiItems.filter(item => item.category === this.currentCategory && item.external_source !== 'inventory' && item.name.toLowerCase().includes(query));\n        }\n      }\n\n      // Log the filtered items for debugging\n      console.log(`Filtered ${this.filteredItems.length} items for category: ${this.currentCategory}`);\n    },\n    checkAndNavigate(item) {\n      const stock = this.itemStocks[item.id];\n      if (!stock || stock.quantity === 0) {\n        alert('Sorry, this item is Temporarily Unavailable.');\n        return;\n      }\n      this.showItemModal = true;\n      this.selectedItem = item;\n    },\n    handleLogout() {\n      localStorage.removeItem('loggedIn');\n      this.$router.push({\n        name: 'Login'\n      });\n    },\n    handleOrderHistory() {\n      this.$router.push({\n        name: 'OrderHistory'\n      });\n    },\n    handleProfile() {\n      this.$router.push({\n        name: 'UserProfileCafe'\n      }); // Navigate to the Profile page\n    },\n    toggleSidebar() {\n      this.isSidebarOpen = !this.isSidebarOpen; // Toggle sidebar open/close\n      localStorage.setItem('sidebarOpen', this.isSidebarOpen.toString());\n    },\n    closeSidebar() {\n      this.isSidebarOpen = false;\n      localStorage.setItem('sidebarOpen', this.isSidebarOpen.toString());\n    },\n    getCategoryIcon(category) {\n      const foundCategory = this.categories.find(cat => cat.name === category);\n      return foundCategory ? foundCategory.icon : 'fas fa-utensils';\n    },\n    async loadCategories() {\n      try {\n        const response = await fetch('http://localhost:8000/api/categories');\n        const data = await response.json();\n        if (data.categories) {\n          console.log('Original categories from API:', data.categories);\n\n          // Normalize category types\n          this.categories = data.categories.map(cat => {\n            // Normalize ready-made category types\n            if (cat.type && (cat.type.toLowerCase() === 'ready made' || cat.type.toLowerCase() === 'ready-made' || cat.type.toLowerCase() === 'readymade' || cat.type.toLowerCase() === 'ready_made')) {\n              // Added underscore format\n              return {\n                ...cat,\n                type: 'ready-made'\n              };\n            }\n            // Normalize drink category types\n            else if (cat.type && (cat.type.toLowerCase() === 'drink' || cat.type.toLowerCase() === 'beverage')) {\n              return {\n                ...cat,\n                type: 'drinks'\n              };\n            }\n            // Normalize food category types\n            else if (cat.type && cat.type.toLowerCase() === 'food') {\n              return {\n                ...cat,\n                type: 'food'\n              };\n            }\n            return cat;\n          });\n          console.log('Normalized categories:', this.categories);\n          console.log('Ready Made categories:', this.readyMadeCategories);\n\n          // If current category doesn't exist anymore, reset to a valid one\n          const allCategoryNames = [...this.drinkCategories, ...this.foodCategories, ...this.readyMadeCategories];\n          if (!allCategoryNames.includes(this.currentCategory) && this.currentCategory !== 'All Drinks' && this.currentCategory !== 'All Food' && this.currentCategory !== 'All Ready Made') {\n            this.currentCategory = this.drinkCategories.length > 0 ? 'All Drinks' : this.foodCategories.length > 0 ? 'All Food' : this.readyMadeCategories.length > 0 ? 'All Ready Made' : 'All';\n            localStorage.setItem('lastViewedCategory', this.currentCategory);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading categories:', error);\n      }\n    },\n    handleCategoriesUpdated() {\n      this.loadCategories();\n      this.fetchItems();\n    },\n    goToCart() {\n      // Navigate to confirm order page to view cart\n      this.$router.push({\n        name: \"ConfirmOrder\"\n      });\n    },\n    closeItemModal() {\n      this.showItemModal = false;\n      this.selectedItem = null;\n      this.modalQuantity = 1; // Reset quantity when closing modal\n    },\n    async addToCart() {\n      if (!this.selectedItem) return;\n      const stock = this.itemStocks[this.selectedItem.id];\n      if (!stock || stock.quantity < this.modalQuantity) {\n        alert('Sorry, not enough stock available.');\n        return;\n      }\n      const imagePath = this.getImagePath(this.selectedItem.image);\n      const userCartKey = `cart_${this.userName}`;\n      let cart = JSON.parse(localStorage.getItem(userCartKey)) || [];\n      const existingItemIndex = cart.findIndex(item => item.name === this.selectedItem.name);\n      if (existingItemIndex !== -1) {\n        const newQuantity = cart[existingItemIndex].quantity + this.modalQuantity;\n        if (newQuantity > stock.quantity) {\n          alert('Sorry, not enough stock available for the requested quantity.');\n          return;\n        }\n        cart[existingItemIndex].quantity = newQuantity;\n      } else {\n        cart.push({\n          id: this.selectedItem.id,\n          name: this.selectedItem.name,\n          price: this.selectedItem.price,\n          image: imagePath,\n          quantity: this.modalQuantity\n        });\n      }\n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      this.updateCartCount();\n\n      // Save current category before closing modal\n      localStorage.setItem('lastViewedCategory', this.currentCategory);\n      this.closeItemModal();\n    },\n    orderNow() {\n      if (!this.selectedItem) return;\n      const imagePath = this.getImagePath(this.selectedItem.image);\n      const userCartKey = `cart_${this.userName}`;\n      let cart = JSON.parse(localStorage.getItem(userCartKey)) || [];\n      const existingItemIndex = cart.findIndex(item => item.name === this.selectedItem.name);\n      if (existingItemIndex !== -1) {\n        cart[existingItemIndex].quantity += this.modalQuantity;\n      } else {\n        cart.push({\n          name: this.selectedItem.name,\n          price: this.selectedItem.price,\n          image: imagePath,\n          quantity: this.modalQuantity\n        });\n      }\n\n      // Save current category before navigating\n      localStorage.setItem('lastViewedCategory', this.currentCategory);\n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      this.updateCartCount();\n      this.$router.push({\n        name: \"ConfirmOrder\"\n      });\n    },\n    updateCartCount() {\n      const userCartKey = `cart_${this.userName}`;\n      const cart = JSON.parse(localStorage.getItem(userCartKey)) || [];\n      // Count unique items instead of total quantities\n      this.cartItemCount = cart.length;\n    },\n    decreaseModalQuantity() {\n      if (this.modalQuantity > 1) {\n        this.modalQuantity -= 1;\n      }\n    },\n    increaseModalQuantity() {\n      const stock = this.itemStocks[this.selectedItem?.id];\n      if (stock && this.modalQuantity < stock.quantity) {\n        this.modalQuantity += 1;\n      } else {\n        alert('Maximum available stock reached.');\n      }\n    },\n    initWebSocket() {\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n\n      // Close existing connection if any\n      if (this.ws) {\n        this.ws.close();\n      }\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.wsConnected = true;\n        // Initial fetch of data when connection is established\n        this.fetchItems();\n        this.loadCategories();\n      };\n      this.ws.onmessage = async event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message received:', data);\n          if (data.type === 'stock_update') {\n            console.log('Stock update received:', data);\n\n            // STEP 1: Immediately update the UI with new stock values\n            // Update the itemStocks object with the new stock data\n            this.itemStocks[data.item_id] = {\n              quantity: data.new_quantity,\n              min_stock_level: data.min_stock_level\n            };\n\n            // If the item is currently selected in the modal, update its stock info immediately\n            if (this.selectedItem && this.selectedItem.id === data.item_id) {\n              this.selectedItem = {\n                ...this.selectedItem,\n                stock: data.new_quantity\n              };\n\n              // If the item is out of stock, close the modal\n              if (data.new_quantity === 0) {\n                this.closeItemModal();\n              }\n            }\n\n            // Update the filtered items in the display immediately\n            this.filteredItems = this.filteredItems.map(item => {\n              if (item.id === data.item_id) {\n                return {\n                  ...item,\n                  stock: data.new_quantity\n                };\n              }\n              return item;\n            });\n\n            // STEP 2: Optional refresh of data in the background\n            // This can be done asynchronously and won't block the UI updates\n            setTimeout(async () => {\n              try {\n                await this.fetchItems();\n                this.filterItems();\n              } catch (error) {\n                console.error('Error refreshing items after stock update:', error);\n              }\n            }, 1000); // Delay refresh for 1 second to ensure UI is responsive first\n          } else if (data.type === 'menu_update') {\n            console.log('Menu update received, refreshing items and categories');\n            // First refresh categories to ensure any new/updated categories are loaded\n            await this.loadCategories();\n            // Then refresh items\n            await this.fetchItems();\n            // Finally, apply the current category filter\n            this.filterItems();\n\n            // Show notification if items were added or updated\n            if (data.message && data.message.includes('Menu updated')) {\n              console.log('Menu update notification:', data.message);\n              // Optional: add a visual notification here\n            }\n          } else if (data.type === 'category_update') {\n            console.log('Category update received:', data);\n            // Refresh categories and items when categories change\n            await this.loadCategories();\n            await this.fetchItems();\n            this.filterItems();\n\n            // If the current category was renamed, update the selection\n            if (data.action === 'update' && data.category.old_name === this.currentCategory) {\n              this.currentCategory = data.category.name;\n              localStorage.setItem('lastViewedCategory', this.currentCategory);\n            }\n\n            // If the current category was deleted, reset to default\n            if (data.action === 'delete' && data.category_name === this.currentCategory) {\n              this.currentCategory = this.categories.length > 0 ? this.drinkCategories.length > 0 ? 'All Drinks' : this.foodCategories.length > 0 ? this.foodCategories[0] : 'All' : 'All';\n              localStorage.setItem('lastViewedCategory', this.currentCategory);\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.wsConnected = false;\n        // Try to reconnect after 5 seconds\n        setTimeout(() => {\n          this.initWebSocket();\n        }, 5000);\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.wsConnected = false;\n        // Try to reconnect after error\n        setTimeout(() => {\n          if (!this.wsConnected) {\n            this.initWebSocket();\n          }\n        }, 5000);\n      };\n    },\n    async syncInventoryProducts() {\n      if (this.isSyncing) return;\n      this.isSyncing = true;\n      try {\n        const response = await fetch('http://localhost:8000/api/sync-inventory-products');\n        const result = await response.json();\n        if (result.success) {\n          console.log(`Successfully synchronized products: ${result.message}`);\n          // Commented out the alert to avoid showing the notification\n          // alert(`Successfully synchronized products from inventory system: ${result.message}`);\n        } else {\n          console.log(`Sync info: ${result.message}`);\n          // Commented out the alert to avoid showing the notification \n          // alert(`Sync info: ${result.message}`);\n        }\n\n        // Refresh the items list\n        await this.fetchItems();\n        this.filterItems();\n      } catch (error) {\n        console.error('Error syncing inventory products:', error);\n        // Only show alert for errors\n        alert('Failed to sync products from inventory system');\n      } finally {\n        this.isSyncing = false;\n      }\n    },\n    isInventoryItem(item) {\n      return item.external_source === 'inventory';\n    },\n    // Add this method to handle image loading errors\n    handleImageError(event) {\n      // If image fails to load, use the default image\n      event.target.src = require('@/assets/default.png');\n      console.log('Profile image failed to load, using default image');\n    },\n    isInventoryItemStyled(item) {\n      // Only apply special styling to inventory items when not in the Ready Made sections\n      return this.isInventoryItem(item) && this.currentCategory !== 'All Ready Made' && !this.currentCategory.includes('Ready Made');\n    },\n    getAvatarUrl(avatar) {\n      return avatar ? `http://127.0.0.1:8000${avatar}` : `https://ui-avatars.com/api/?name=${encodeURIComponent(this.userName)}&background=E54F70&color=fff&size=128`;\n    }\n  },\n  watch: {\n    isDarkMode: {\n      handler(newValue) {\n        if (newValue) {\n          document.body.classList.add('dark-mode');\n        } else {\n          document.body.classList.remove('dark-mode');\n        }\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    drinkCategories() {\n      return this.categories.filter(cat => cat.type === 'drinks').map(cat => cat.name);\n    },\n    foodCategories() {\n      return this.categories.filter(cat => cat.type === 'food').map(cat => cat.name);\n    },\n    readyMadeCategories() {\n      return this.categories.filter(cat => {\n        // Simplify to only include the exact Ready Made category\n        // This ensures we don't mistakenly include other categories\n        return cat.name === 'Ready Made' || cat.type && (cat.type === 'ready_made' || cat.type === 'ready-made' || cat.type === 'Ready Made');\n      }).map(cat => cat.name);\n    }\n  }\n};","map":{"version":3,"names":["StockIndicator","UserNotifications","eventBus","components","data","userName","userProfileImage","userEmail","localStorage","getItem","itemsRefreshInterval","searchQuery","isDarkMode","currentCategory","currentTime","Date","toLocaleTimeString","isSidebarOpen","isLoading","apiItems","filteredItems","categories","showItemModal","selectedItem","cartItemCount","cart","modalQuantity","itemStocks","ws","wsConnected","isAdmin","isSyncing","userAvatar","unreadNotificationsCount","created","window","addEventListener","handleNotificationUpdate","handleItemsUpdated","initWebSocket","beforeUnmount","removeEventListener","handleCategoriesUpdated","stopPollingForItems","updateCartCount","close","mounted","$watch","notificationsCount","newCount","console","log","lastViewedCategory","$route","query","category","updateTime","applyDarkMode","loadUserProfile","fetchItems","startPollingForItems","loadCategories","syncInventoryProducts","error","filterItems","methods","event","detail","fetch","then","response","json","items","action","refreshItems","setInterval","clearInterval","wasLoading","itemsResponse","stocksResponse","Promise","all","itemsData","stocksData","inventoryItems","filter","item","external_source","length","map","id","name","success","reduce","acc","stock","item_id","encodeURIComponent","ok","avatar","$router","push","toggleDarkMode","setItem","isDark","document","body","classList","add","remove","now","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","filterCategory","innerWidth","closeSidebar","getImagePath","imagePath","require","includes","isInventoryItem","parts","split","filename","fixedPath","startsWith","toLowerCase","foodCategories","readyMadeCategories","isReadyMadeCategory","checkAndNavigate","quantity","alert","handleLogout","removeItem","handleOrderHistory","handleProfile","toggleSidebar","toString","getCategoryIcon","foundCategory","find","cat","icon","type","allCategoryNames","drinkCategories","goToCart","closeItemModal","addToCart","image","userCartKey","JSON","parse","existingItemIndex","findIndex","newQuantity","price","stringify","orderNow","decreaseModalQuantity","increaseModalQuantity","wsUrl","location","hostname","WebSocket","onopen","onmessage","new_quantity","min_stock_level","setTimeout","message","old_name","category_name","onclose","onerror","result","handleImageError","target","src","isInventoryItemStyled","getAvatarUrl","watch","handler","newValue","immediate","computed"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Sidebar Toggle Button (For Mobile) -->\n    <button class=\"menu-button\" @click=\"toggleSidebar\">\n      <div class=\"menu-icon-container\">\n        ≡\n      </div>\n    </button>\n\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n    \n    <div v-if=\"isSidebarOpen\" class=\"overlay\" @click=\"closeSidebar\"></div>\n    \n    <!-- Sidebar -->\n    <div :class=\"['sidebar', { \n      'open': isSidebarOpen, \n      'light-mode': !isDarkMode,\n      'dark-mode': isDarkMode \n    }]\" @click.stop>\n      <button class=\"close-sidebar\" @click=\"toggleSidebar\">✕</button>\n      \n      <!-- User Profile Section -->\n      <div class=\"user-profile-section\">\n        <div class=\"profile-image\">\n          <!-- Use the same method for getting avatar as in UserProfileCafe -->\n          <img :src=\"getAvatarUrl(userAvatar)\" alt=\"Profile Picture\">\n        </div>\n        <div class=\"profile-info\">\n          <span class=\"user-name\">{{ userName }}</span>\n        </div>\n      </div>\n\n      <!-- Dark Mode Toggle beside profile -->\n      <button class=\"theme-toggle\" @click=\"toggleDarkMode\">\n        <i :class=\"['fas', isDarkMode ? 'fa-sun' : 'fa-moon', { 'light-icon': !isDarkMode, 'dark-icon': isDarkMode }]\"></i>\n      </button>\n\n      <!-- Profile Section -->\n      <button class=\"profile-section\" @click=\"handleProfile\">\n        <i class=\"fas fa-user\"></i>\n        <span>Profile</span>\n      </button>\n\n      <hr class=\"utility-divider\">\n\n      <!-- Utility Buttons Section -->\n      <div class=\"utility-section\">\n        <button class=\"utility-button\" @click=\"handleOrderHistory\">\n          <i class=\"fas fa-history\"></i>\n          <span>Order History</span>\n        </button>\n        \n        <!-- Other utility buttons can be added here if needed -->\n      </div>\n\n      <!-- Categories -->\n      <div class=\"menu-section\">\n        <h3>Drinks</h3>\n        <div class=\"menu-items\">\n          <button \n            class=\"menu-item\" \n            @click=\"filterCategory('All Drinks')\"\n          >\n            <i class=\"fas fa-coffee\"></i>\n            <span>All Drinks</span>\n          </button>\n          <button \n            v-for=\"category in drinkCategories\" \n            :key=\"category\"\n            class=\"menu-item\" \n            @click=\"filterCategory(category)\"\n          >\n            <i :class=\"getCategoryIcon(category)\"></i>\n            <span>{{ category }}</span>\n          </button>\n        </div>\n\n        <h3>Food</h3>\n        <div class=\"menu-items\">\n          <button \n            class=\"menu-item\" \n            @click=\"filterCategory('All Food')\"\n          >\n            <i class=\"fas fa-utensils\"></i>\n            <span>All Food</span>\n          </button>\n          <button \n            v-for=\"category in foodCategories\" \n            :key=\"category\"\n            class=\"menu-item\" \n            @click=\"filterCategory(category)\"\n          >\n            <i :class=\"getCategoryIcon(category)\"></i>\n            <span>{{ category }}</span>\n          </button>\n        </div>\n        \n        <div class=\"menu-category\">\n          <!-- Ready Made Products Section -->\n          <h3>\n            Ready Made Items\n            <button \n              v-if=\"isAdmin\" \n              class=\"sync-button prominent\" \n              @click=\"syncInventoryProducts\" \n              :disabled=\"isSyncing\"\n              title=\"Pull latest Ready Made products from Inventory System\"\n            >\n              <i :class=\"isSyncing ? 'fas fa-sync fa-spin' : 'fas fa-sync'\"></i>\n              <span>{{ isSyncing ? 'Syncing...' : 'Sync Inventory' }}</span>\n            </button>\n          </h3>\n          <div class=\"menu-items\">\n            <button \n              class=\"menu-item\" \n              @click=\"filterCategory('All Ready Made')\"\n            >\n              <i class=\"fas fa-shopping-basket\"></i>\n              <span>Ready Made</span>\n            </button>\n            <!-- Remove the v-for for readyMadeCategories since we just need a single entry -->\n          </div>\n        </div>\n      </div>\n\n      <!-- Logout Button -->\n      <div class=\"logout-container\">\n        <button class=\"utility-button logout\" @click=\"handleLogout\">\n          <i class=\"fas fa-sign-out-alt\"></i>\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n\n    <!-- Main content area -->\n    <div :class=\"['content', { 'close': isSidebarOpen }]\" @click=\"closeSidebar\">\n      <!-- Top Bar -->\n      <div class=\"top-bar\">\n        <div class=\"centered-content\">\n          <div class=\"logo-container\">\n            <img src=\"@/assets/cafe-logo1.png\" alt=\"University Logo\" class=\"logo logo-light\" />\n            <div class=\"cafe-title\">Cafe Beata</div>\n          </div>\n          \n          <div class=\"search-container\">\n            <input\n              type=\"text\"\n              v-model=\"searchQuery\"\n              placeholder=\"Search our Drinks and Food\"\n              @input=\"filterItems\"\n            />\n          </div>\n          \n          <div class=\"top-controls\">\n            <div class=\"live-time\">{{ currentTime }}</div>\n            <!-- Add UserNotifications component inside top bar -->\n            <UserNotifications />\n          </div>\n        </div>\n      </div>\n      \n      <!-- Floating Cart Button - keep this outside the top bar -->\n      <div class=\"floating-cart\" @click=\"goToCart\">\n        <i class=\"fas fa-shopping-cart\"></i>\n        <span v-if=\"cartItemCount > 0\" class=\"floating-cart-badge\">{{ cartItemCount }}</span>\n      </div>\n\n      <!-- Dashboard Title -->\n      <h1 class=\"dashboard-title\"></h1>\n      \n\n      <!-- Display category title dynamically -->\n      <div class=\"category-header\">\n        <h2>{{ \n          currentCategory === 'All Drinks' ? 'Menu' : \n          currentCategory === 'All Ready Made' ? 'Ready Made Items' : \n          currentCategory \n        }}</h2>\n      </div>\n\n      <!-- Loading indicator -->\n      <div v-if=\"isLoading\" class=\"loading-indicator\">\n        <p>Loading menu items...</p>\n      </div>\n\n      <!-- Display filtered items based on the current category -->\n      <div v-else-if=\"filteredItems.length\" class=\"items\">\n        <div\n          v-for=\"item in filteredItems\"\n          :key=\"item.id || item.name\"\n          class=\"item\"\n          @click=\"checkAndNavigate(item)\"\n          :class=\"{\n            'out-of-stock': !itemStocks[item.id]?.quantity,\n            'inventory-item': isInventoryItemStyled(item)\n          }\"\n        >\n          <div class=\"item-image-container\">\n            <img \n              :src=\"getImagePath(item.image)\" \n              :alt=\"item.name\" \n              @error=\"handleImageError\" \n            />\n            <div v-if=\"isInventoryItem(item) && isInventoryItemStyled(item)\" class=\"inventory-badge\" title=\"From Inventory System\">\n              <i class=\"fas fa-box-open\"></i>\n              <span>Inventory</span>\n            </div>\n          </div>\n          <StockIndicator \n            v-if=\"itemStocks[item.id]\"\n            :itemId=\"item.id\" \n            :quantity=\"itemStocks[item.id]?.quantity || 0\" \n            :minStockLevel=\"10\"\n          />\n          <div class=\"item-details\">\n            <span>{{ item.name }}</span>\n            <span class=\"item-price\">₱{{ Number(item.price).toFixed(2) }}</span>\n          </div>\n        </div>\n      </div>\n      <div v-else class=\"no-items\">\n        <p>No items found in this category.</p>\n      </div>\n\n      <!-- Item Click Modal -->\n      <div v-if=\"showItemModal\" class=\"item-modal\">\n        <div class=\"modal-content\">\n          <span class=\"close\" @click=\"closeItemModal\">&times;</span>\n          <div class=\"modal-item-details\">\n            <div class=\"modal-image-container\">\n              <img \n                :src=\"selectedItem ? getImagePath(selectedItem.image) : require('@/assets/default.png')\" \n                :alt=\"selectedItem ? selectedItem.name : ''\" \n                @error=\"handleImageError\"\n              />\n              <div v-if=\"selectedItem && isInventoryItem(selectedItem) && isInventoryItemStyled(selectedItem)\" class=\"inventory-badge-modal\" title=\"From Inventory System\">\n                <i class=\"fas fa-box-open\"></i>\n                <span>Inventory Item</span>\n              </div>\n            </div>\n            <h3>{{ selectedItem ? selectedItem.name : '' }}</h3>\n            <p class=\"price\">₱{{ selectedItem ? Number(selectedItem.price).toFixed(2) : '0.00' }}</p>\n            \n            <!-- Add quantity controls -->\n            <div class=\"modal-quantity-controls\">\n              <button @click=\"decreaseModalQuantity\" class=\"quantity-btn\">-</button>\n              <span class=\"quantity-display\">{{ modalQuantity }}</span>\n              <button @click=\"increaseModalQuantity\" class=\"quantity-btn\">+</button>\n            </div>\n            <p class=\"total-price\">Total: ₱{{ selectedItem ? (Number(selectedItem.price) * modalQuantity).toFixed(2) : '0.00' }}</p>\n          </div>\n          <div class=\"modal-buttons\">\n            <button @click=\"addToCart\" class=\"add-cart-btn\">Add to Cart</button>\n            <button @click=\"orderNow\" class=\"order-now-btn\">Order Now</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport StockIndicator from './StockIndicator.vue';\n// Import UserNotifications component\nimport UserNotifications from '@/components/UserNotifications.vue';\nimport { eventBus } from \"@/utils/eventBus\";\n\nexport default {\n  components: {\n    StockIndicator,\n    UserNotifications\n  },\n  data() {\n    return {\n      userName: '',\n      userProfileImage: '',\n      userEmail: localStorage.getItem('userEmail'),\n      itemsRefreshInterval: null,\n      searchQuery: '',\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\",\n      currentCategory: 'All Drinks',\n      currentTime: new Date().toLocaleTimeString(),\n      isSidebarOpen: false,\n      isLoading: false,\n      apiItems: [],\n      filteredItems: [],\n      categories: [],\n      showItemModal: false,\n      selectedItem: null,\n      cartItemCount: 0,\n      cart: [], // Array to store cart items\n      modalQuantity: 1,\n      itemStocks: {}, // Add back the itemStocks property\n      ws: null,\n      wsConnected: false,\n      isAdmin: localStorage.getItem('role') === 'admin',\n      isSyncing: false,\n      userAvatar: '', // Add this property to store the user's avatar URL\n      unreadNotificationsCount: 0,\n    };\n  },\n\n  \n\n  created() {\n    // Just listen for notification updates to sync with UserNotifications\n    window.addEventListener(\"notificationUpdated\", this.handleNotificationUpdate);\n    window.addEventListener(\"items-updated\", this.handleItemsUpdated);\n    this.initWebSocket();\n  },\n  \n  beforeUnmount() {\n    // Remove listeners\n    window.removeEventListener(\"notificationUpdated\", this.handleNotificationUpdate);\n    window.removeEventListener(\"items-updated\", this.handleItemsUpdated);\n    window.removeEventListener('categories-updated', this.handleCategoriesUpdated);\n    this.stopPollingForItems();\n    window.removeEventListener('storage', this.updateCartCount);\n    if (this.ws) {\n      this.ws.close();\n    }\n  },\n  \n  async mounted() {\n    // Watch for notification updates through eventBus for UI updates\n    this.$watch(() => eventBus.notificationsCount, (newCount) => {\n      console.log('Notification count updated:', newCount);\n      // No need to store locally as UserNotifications manages this\n    });\n    \n    // Check for last viewed category first\n    const lastViewedCategory = localStorage.getItem('lastViewedCategory');\n    if (lastViewedCategory) {\n      this.currentCategory = lastViewedCategory;\n    } else if (this.$route.query.category) {\n      // Only use route query if no last viewed category exists\n      this.currentCategory = this.$route.query.category;\n    }\n    \n    this.updateTime();\n    this.applyDarkMode(this.isDarkMode);\n    await this.loadUserProfile();\n    \n    // Initialize WebSocket first for real-time updates\n    this.initWebSocket();\n    \n    // Load initial data\n    await this.fetchItems();\n    this.startPollingForItems();\n    await this.loadCategories();\n    \n    // Trigger a sync of inventory products when the component mounts\n    // This ensures the latest Ready Made products are available\n    try {\n      if (!this.isSyncing) {\n        console.log('Triggering inventory sync on component mount');\n        await this.syncInventoryProducts();\n      }\n    } catch (error) {\n      console.error('Error syncing inventory on mount:', error);\n    }\n    \n    // Filter items after loading everything\n    this.filterItems();\n    \n    window.addEventListener('categories-updated', this.handleCategoriesUpdated);\n    this.updateCartCount();\n    window.addEventListener('storage', this.updateCartCount);\n  },\n    \n \n  methods: {\n    // Handle notification updates\n    handleNotificationUpdate() {\n      // This event is fired when notifications are updated\n      // The UserNotifications component already manages the badge state\n      console.log('Notification update detected');\n    },\n    \n    // Handle item updates from ItemEditor\n    handleItemsUpdated(event) {\n      console.log('Items updated event received:', event.detail);\n      \n      // Silently refresh items without showing loading indicators\n      try {\n        fetch('http://localhost:8000/api/items')\n          .then(response => response.json())\n          .then(data => {\n            if (data.items) {\n              this.apiItems = data.items;\n              this.filterItems();\n            }\n          });\n      } catch (error) {\n        console.error('Error refreshing items after update:', error);\n      }\n      \n      // Only switch to the category if the user is not on the \"All Drinks\" view\n      // This way, new items will appear in the All Drinks view without changing the user's context\n      if (this.currentCategory !== 'All Drinks' && event.detail.action !== 'deleted' && \n          event.detail.category && event.detail.category !== this.currentCategory) {\n        this.currentCategory = event.detail.category;\n      }\n    },\n    \n    // New method to manually refresh items\n    async refreshItems() {\n      this.isLoading = true;\n      await this.fetchItems();\n      this.filterItems();\n      this.isLoading = false;\n    },\n    \n    // New method to start polling for items\n    startPollingForItems() {\n      this.itemsRefreshInterval = setInterval(async () => {\n        // Fetch items silently in the background without showing loading indicators\n        try {\n          const response = await fetch('http://localhost:8000/api/items');\n          const data = await response.json();\n          if (data.items) {\n            this.apiItems = data.items;\n            // Update filtered items without changing the loading state\n            this.filterItems();\n          }\n        } catch (error) {\n          console.error('Error fetching items during background refresh:', error);\n        }\n      }, 10000); // Check for new items every 10 seconds\n    },\n    \n    // New method to stop polling for items\n    stopPollingForItems() {\n      if (this.itemsRefreshInterval) {\n        clearInterval(this.itemsRefreshInterval);\n      }\n    },\n    \n    // New method to fetch items from API\n    async fetchItems() {\n      const wasLoading = this.isLoading;\n      \n      try {\n        const [itemsResponse, stocksResponse] = await Promise.all([\n          fetch('http://localhost:8000/api/items'),\n          fetch('http://localhost:8000/api/stocks')\n        ]);\n        \n        const itemsData = await itemsResponse.json();\n        const stocksData = await stocksResponse.json();\n        \n        if (itemsData.items) {\n          this.apiItems = itemsData.items;\n          \n          // Debug log for inventory items\n          const inventoryItems = this.apiItems.filter(item => item.external_source === 'inventory');\n          console.log(`Found ${inventoryItems.length} items from inventory system:`, \n                      inventoryItems.map(item => ({ id: item.id, name: item.name, category: item.category })));\n        }\n        \n        if (stocksData.success) {\n          // Convert array to object for easier lookup\n          this.itemStocks = stocksData.items.reduce((acc, stock) => {\n            acc[stock.item_id] = stock;\n            return acc;\n          }, {});\n        }\n        \n        if (!wasLoading) {\n          this.filterItems();\n        }\n      } catch (error) {\n        console.error('Error fetching items or stocks:', error);\n      } finally {\n        if (wasLoading) {\n          this.isLoading = false;\n        }\n      }\n    },\n\n    async loadUserProfile() {\n      const userName = localStorage.getItem('userName');\n      const userEmail = localStorage.getItem('userEmail');\n      if (userName) {\n        this.userName = userName;\n        \n        // Fetch profile data from the server to get avatar\n        if (userEmail) {\n          try {\n            const response = await fetch(`http://127.0.0.1:8000/profile/${encodeURIComponent(userEmail)}`);\n            const data = await response.json();\n            if (response.ok) {\n              // Set the avatar from the profile data\n              this.userAvatar = data.avatar || '';\n            }\n          } catch (error) {\n            console.error('Error loading profile:', error);\n            // Fall back to the avatar service if profile loading fails\n          }\n        }\n      } else {\n        // If no username, redirect to login\n        this.$router.push({ name: 'Login' });\n      }\n    },\n\n    // toggleDarkMode is the next method after removing the notification related methods\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n      localStorage.setItem(\"darkMode\", this.isDarkMode ? \"enabled\" : \"disabled\");\n      this.applyDarkMode(this.isDarkMode);\n    },\n\n    applyDarkMode(isDark) {\n      if (isDark) {\n        document.body.classList.add('dark-mode');\n      } else {\n        document.body.classList.remove('dark-mode');\n      }\n    },\n\n    updateTime() {\n      setInterval(() => {\n        const now = new Date();\n        let hours = now.getHours();\n        let minutes = now.getMinutes();\n        let seconds = now.getSeconds();\n        let ampm = hours >= 12 ? 'PM' : 'AM';\n\n        hours = hours % 12 || 12; // Convert 24-hour time to 12-hour format\n        minutes = minutes < 10 ? '0' + minutes : minutes; // Ensure two digits for minutes\n        seconds = seconds < 10 ? '0' + seconds : seconds; // Ensure two digits for seconds\n\n        this.currentTime = `${hours}:${minutes}:${seconds} ${ampm}`; // Example: 2:03:11 PM\n      }, 1000); // Update every second\n    },\n\n    filterCategory(category) {\n      this.currentCategory = category;\n      // Save the selected category\n      localStorage.setItem('lastViewedCategory', category);\n      this.filterItems();\n      \n      // Close sidebar on mobile after selecting a category\n      if (window.innerWidth <= 768) {\n        this.closeSidebar();\n      }\n    },\n\n    getImagePath(imagePath) {\n      // If there's no image path, use a default image\n      if (!imagePath) {\n        return require('@/assets/default.png');\n      }\n      \n      // Check if this is an inventory system item (using port 8001)\n      if (imagePath.includes('localhost:8001') || (this.selectedItem && this.isInventoryItem(this.selectedItem))) {\n        console.log('Inventory image path:', imagePath);\n        \n        // Check if the path needs to be fixed - it should point to /uploads/products/\n        if (imagePath.includes('/uploads/') && !imagePath.includes('/uploads/products/')) {\n          // Extract the filename\n          const parts = imagePath.split('/');\n          const filename = parts[parts.length - 1];\n          const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n          console.log('Fixed inventory image path:', fixedPath);\n          return fixedPath;\n        }\n        \n        // If it's already a full URL to the inventory system, use it directly\n        if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n          return imagePath;\n        }\n        \n        // For simple filenames in inventory system\n        if (!imagePath.includes('/')) {\n          return `http://localhost:8001/uploads/products/${imagePath}`;\n        }\n        \n        return imagePath;\n      }\n      \n      // For cafe-beata system (regular menu items)\n      \n      // If it's already a full URL, use it directly\n      if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n        return imagePath;\n      }\n      \n      // For cafe-beata system uploads with /uploads/ path\n      if (imagePath.startsWith('/uploads/')) {\n        return `http://localhost:8000${imagePath}`;\n      }\n      \n      // For simple filenames in cafe-beata system\n      if (!imagePath.includes('/')) {\n        return `http://localhost:8000/uploads/${imagePath}`;\n      }\n      \n      // Default fallback\n      return require('@/assets/default.png');\n    },\n\n    filterItems() {\n      const query = this.searchQuery.toLowerCase();\n      \n      // Add debug log for all inventory items\n      const inventoryItems = this.apiItems.filter(item => item.external_source === 'inventory');\n      console.log(`Total inventory items in database: ${inventoryItems.length}`);\n      if (inventoryItems.length > 0) {\n        console.log(\"Inventory items:\", inventoryItems.map(item => ({ id: item.id, name: item.name })));\n      }\n      \n      // Filter API items based on category and search query\n      if (this.currentCategory === 'All Drinks') {\n        // For \"All Drinks\", exclude all inventory items\n        this.filteredItems = this.apiItems.filter(item => \n          !this.foodCategories.includes(item.category) && // Exclude food categories\n          !this.readyMadeCategories.includes(item.category) && // Exclude ready-made categories\n          item.external_source !== 'inventory' && // Exclude inventory items from drinks\n          item.name.toLowerCase().includes(query)\n        );\n      } else if (this.currentCategory === 'All Food') {\n        // For \"All Food\", exclude all inventory items\n        this.filteredItems = this.apiItems.filter(item => \n          this.foodCategories.includes(item.category) &&\n          item.external_source !== 'inventory' && // Exclude inventory items from food\n          item.name.toLowerCase().includes(query)\n        );\n      } else if (this.currentCategory === 'All Ready Made') {\n        // For \"All Ready Made\", ONLY show inventory items\n        this.filteredItems = this.apiItems.filter(item => \n          item.external_source === 'inventory' &&\n          item.name.toLowerCase().includes(query)\n        );\n        \n        console.log(`Showing ${this.filteredItems.length} inventory items in the Ready Made section`);\n      } else {\n        // For specific categories\n        const isReadyMadeCategory = this.readyMadeCategories.includes(this.currentCategory);\n        \n        if (isReadyMadeCategory) {\n          // For Ready Made categories, only show inventory items for that category\n          this.filteredItems = this.apiItems.filter(item => \n            item.category === this.currentCategory &&\n            item.external_source === 'inventory' &&\n            item.name.toLowerCase().includes(query)\n          );\n        } else {\n          // For other categories, exclude all inventory items\n          this.filteredItems = this.apiItems.filter(item => \n            item.category === this.currentCategory &&\n            item.external_source !== 'inventory' &&\n            item.name.toLowerCase().includes(query)\n          );\n        }\n      }\n      \n      // Log the filtered items for debugging\n      console.log(`Filtered ${this.filteredItems.length} items for category: ${this.currentCategory}`);\n    },\n\n   checkAndNavigate(item) {\n      const stock = this.itemStocks[item.id];\n      if (!stock || stock.quantity === 0) {\n        alert('Sorry, this item is Temporarily Unavailable.');\n        return;\n      }\n      this.showItemModal = true;\n      this.selectedItem = item;\n    },\n    handleLogout() {\n      localStorage.removeItem('loggedIn');\n      this.$router.push({ name: 'Login' });\n    },\n    handleOrderHistory() {\n      this.$router.push({ name: 'OrderHistory' });\n    },\n    handleProfile() {\n      this.$router.push({ name: 'UserProfileCafe' }); // Navigate to the Profile page\n    },\n    toggleSidebar() {\n      this.isSidebarOpen = !this.isSidebarOpen; // Toggle sidebar open/close\n      localStorage.setItem('sidebarOpen', this.isSidebarOpen.toString());\n    },\n    closeSidebar() {\n      this.isSidebarOpen = false;\n      localStorage.setItem('sidebarOpen', this.isSidebarOpen.toString());\n    },\n    getCategoryIcon(category) {\n      const foundCategory = this.categories.find(cat => cat.name === category);\n      return foundCategory ? foundCategory.icon : 'fas fa-utensils';\n    },\n    async loadCategories() {\n      try {\n        const response = await fetch('http://localhost:8000/api/categories');\n        const data = await response.json();\n        if (data.categories) {\n          console.log('Original categories from API:', data.categories);\n          \n          // Normalize category types\n          this.categories = data.categories.map(cat => {\n            // Normalize ready-made category types\n            if (cat.type && \n               (cat.type.toLowerCase() === 'ready made' || \n                cat.type.toLowerCase() === 'ready-made' ||\n                cat.type.toLowerCase() === 'readymade' ||\n                cat.type.toLowerCase() === 'ready_made')) {  // Added underscore format\n              return { ...cat, type: 'ready-made' };\n            }\n            // Normalize drink category types\n            else if (cat.type && \n                    (cat.type.toLowerCase() === 'drink' || \n                     cat.type.toLowerCase() === 'beverage')) {\n              return { ...cat, type: 'drinks' };\n            }\n            // Normalize food category types\n            else if (cat.type && cat.type.toLowerCase() === 'food') {\n              return { ...cat, type: 'food' };\n            }\n            return cat;\n          });\n          \n          console.log('Normalized categories:', this.categories);\n          console.log('Ready Made categories:', this.readyMadeCategories);\n          \n          // If current category doesn't exist anymore, reset to a valid one\n          const allCategoryNames = [...this.drinkCategories, ...this.foodCategories, ...this.readyMadeCategories];\n          if (!allCategoryNames.includes(this.currentCategory) && \n              this.currentCategory !== 'All Drinks' && \n              this.currentCategory !== 'All Food' &&\n              this.currentCategory !== 'All Ready Made') {\n            this.currentCategory = this.drinkCategories.length > 0 ? 'All Drinks' : \n                                  (this.foodCategories.length > 0 ? 'All Food' : \n                                  (this.readyMadeCategories.length > 0 ? 'All Ready Made' : 'All'));\n            localStorage.setItem('lastViewedCategory', this.currentCategory);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading categories:', error);\n      }\n    },\n    handleCategoriesUpdated() {\n      this.loadCategories();\n      this.fetchItems();\n    },\n    goToCart() {\n      // Navigate to confirm order page to view cart\n      this.$router.push({ name: \"ConfirmOrder\" });\n    },\n    closeItemModal() {\n      this.showItemModal = false;\n      this.selectedItem = null;\n      this.modalQuantity = 1; // Reset quantity when closing modal\n    },\n    async addToCart() {\n      if (!this.selectedItem) return;\n      \n      const stock = this.itemStocks[this.selectedItem.id];\n      if (!stock || stock.quantity < this.modalQuantity) {\n        alert('Sorry, not enough stock available.');\n        return;\n      }\n      \n      const imagePath = this.getImagePath(this.selectedItem.image);\n      const userCartKey = `cart_${this.userName}`;\n      let cart = JSON.parse(localStorage.getItem(userCartKey)) || [];\n      \n      const existingItemIndex = cart.findIndex(item => item.name === this.selectedItem.name);\n      \n      if (existingItemIndex !== -1) {\n        const newQuantity = cart[existingItemIndex].quantity + this.modalQuantity;\n        if (newQuantity > stock.quantity) {\n          alert('Sorry, not enough stock available for the requested quantity.');\n          return;\n        }\n        cart[existingItemIndex].quantity = newQuantity;\n      } else {\n        cart.push({\n          id: this.selectedItem.id,\n          name: this.selectedItem.name,\n          price: this.selectedItem.price,\n          image: imagePath,\n          quantity: this.modalQuantity\n        });\n      }\n      \n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      this.updateCartCount();\n      \n      // Save current category before closing modal\n      localStorage.setItem('lastViewedCategory', this.currentCategory);\n      \n      this.closeItemModal();\n    },\n    orderNow() {\n      if (!this.selectedItem) return;\n      \n      const imagePath = this.getImagePath(this.selectedItem.image);\n      const userCartKey = `cart_${this.userName}`;\n      let cart = JSON.parse(localStorage.getItem(userCartKey)) || [];\n      \n      const existingItemIndex = cart.findIndex(item => item.name === this.selectedItem.name);\n      \n      if (existingItemIndex !== -1) {\n        cart[existingItemIndex].quantity += this.modalQuantity;\n      } else {\n        cart.push({\n          name: this.selectedItem.name,\n          price: this.selectedItem.price,\n          image: imagePath,\n          quantity: this.modalQuantity\n        });\n      }\n      \n      // Save current category before navigating\n      localStorage.setItem('lastViewedCategory', this.currentCategory);\n      \n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      this.updateCartCount();\n      \n      this.$router.push({\n        name: \"ConfirmOrder\"\n      });\n    },\n    updateCartCount() {\n      const userCartKey = `cart_${this.userName}`;\n      const cart = JSON.parse(localStorage.getItem(userCartKey)) || [];\n      // Count unique items instead of total quantities\n      this.cartItemCount = cart.length;\n    },\n    decreaseModalQuantity() {\n      if (this.modalQuantity > 1) {\n        this.modalQuantity -= 1;\n      }\n    },\n    increaseModalQuantity() {\n      const stock = this.itemStocks[this.selectedItem?.id];\n      if (stock && this.modalQuantity < stock.quantity) {\n        this.modalQuantity += 1;\n      } else {\n        alert('Maximum available stock reached.');\n      }\n    },\n    initWebSocket() {\n      const wsUrl = `ws://${window.location.hostname}:8000/ws/orders`;\n      \n      // Close existing connection if any\n      if (this.ws) {\n        this.ws.close();\n      }\n      \n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.wsConnected = true;\n        // Initial fetch of data when connection is established\n        this.fetchItems();\n        this.loadCategories();\n      };\n      \n      this.ws.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message received:', data);\n          \n          if (data.type === 'stock_update') {\n            console.log('Stock update received:', data);\n            \n            // STEP 1: Immediately update the UI with new stock values\n            // Update the itemStocks object with the new stock data\n            this.itemStocks[data.item_id] = {\n              quantity: data.new_quantity,\n              min_stock_level: data.min_stock_level\n            };\n            \n            // If the item is currently selected in the modal, update its stock info immediately\n            if (this.selectedItem && this.selectedItem.id === data.item_id) {\n              this.selectedItem = {\n                ...this.selectedItem,\n                stock: data.new_quantity\n              };\n              \n              // If the item is out of stock, close the modal\n              if (data.new_quantity === 0) {\n                this.closeItemModal();\n              }\n            }\n            \n            // Update the filtered items in the display immediately\n            this.filteredItems = this.filteredItems.map(item => {\n              if (item.id === data.item_id) {\n                return {\n                  ...item,\n                  stock: data.new_quantity\n                };\n              }\n              return item;\n            });\n            \n            // STEP 2: Optional refresh of data in the background\n            // This can be done asynchronously and won't block the UI updates\n            setTimeout(async () => {\n              try {\n                await this.fetchItems();\n                this.filterItems();\n              } catch (error) {\n                console.error('Error refreshing items after stock update:', error);\n              }\n            }, 1000); // Delay refresh for 1 second to ensure UI is responsive first\n          } else if (data.type === 'menu_update') {\n            console.log('Menu update received, refreshing items and categories');\n            // First refresh categories to ensure any new/updated categories are loaded\n            await this.loadCategories();\n            // Then refresh items\n            await this.fetchItems();\n            // Finally, apply the current category filter\n            this.filterItems();\n            \n            // Show notification if items were added or updated\n            if (data.message && data.message.includes('Menu updated')) {\n              console.log('Menu update notification:', data.message);\n              // Optional: add a visual notification here\n            }\n          } else if (data.type === 'category_update') {\n            console.log('Category update received:', data);\n            // Refresh categories and items when categories change\n            await this.loadCategories();\n            await this.fetchItems();\n            this.filterItems();\n            \n            // If the current category was renamed, update the selection\n            if (data.action === 'update' && data.category.old_name === this.currentCategory) {\n              this.currentCategory = data.category.name;\n              localStorage.setItem('lastViewedCategory', this.currentCategory);\n            }\n            \n            // If the current category was deleted, reset to default\n            if (data.action === 'delete' && data.category_name === this.currentCategory) {\n              this.currentCategory = this.categories.length > 0 ? \n                (this.drinkCategories.length > 0 ? 'All Drinks' : \n                 (this.foodCategories.length > 0 ? this.foodCategories[0] : 'All')) : 'All';\n              localStorage.setItem('lastViewedCategory', this.currentCategory);\n            }\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n      \n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.wsConnected = false;\n        // Try to reconnect after 5 seconds\n        setTimeout(() => {\n          this.initWebSocket();\n        }, 5000);\n      };\n      \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.wsConnected = false;\n        // Try to reconnect after error\n        setTimeout(() => {\n          if (!this.wsConnected) {\n            this.initWebSocket();\n          }\n        }, 5000);\n      };\n    },\n    async syncInventoryProducts() {\n      if (this.isSyncing) return;\n      \n      this.isSyncing = true;\n      try {\n        const response = await fetch('http://localhost:8000/api/sync-inventory-products');\n        const result = await response.json();\n        \n        if (result.success) {\n          console.log(`Successfully synchronized products: ${result.message}`);\n          // Commented out the alert to avoid showing the notification\n          // alert(`Successfully synchronized products from inventory system: ${result.message}`);\n        } else {\n          console.log(`Sync info: ${result.message}`);\n          // Commented out the alert to avoid showing the notification \n          // alert(`Sync info: ${result.message}`);\n        }\n        \n        // Refresh the items list\n        await this.fetchItems();\n        this.filterItems();\n      } catch (error) {\n        console.error('Error syncing inventory products:', error);\n        // Only show alert for errors\n        alert('Failed to sync products from inventory system');\n      } finally {\n        this.isSyncing = false;\n      }\n    },\n    isInventoryItem(item) {\n      return item.external_source === 'inventory';\n    },\n    // Add this method to handle image loading errors\n    handleImageError(event) {\n      // If image fails to load, use the default image\n      event.target.src = require('@/assets/default.png');\n      console.log('Profile image failed to load, using default image');\n    },\n    isInventoryItemStyled(item) {\n      // Only apply special styling to inventory items when not in the Ready Made sections\n      return this.isInventoryItem(item) && \n             this.currentCategory !== 'All Ready Made' && \n             !this.currentCategory.includes('Ready Made');\n    },\n    getAvatarUrl(avatar) {\n      return avatar ? `http://127.0.0.1:8000${avatar}` : `https://ui-avatars.com/api/?name=${encodeURIComponent(this.userName)}&background=E54F70&color=fff&size=128`;\n    },\n  },\n  watch: {\n    isDarkMode: {\n      handler(newValue) {\n        if (newValue) {\n          document.body.classList.add('dark-mode');\n        } else {\n          document.body.classList.remove('dark-mode');\n        }\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    drinkCategories() {\n      return this.categories\n        .filter(cat => cat.type === 'drinks')\n        .map(cat => cat.name);\n    },\n    \n    foodCategories() {\n      return this.categories\n        .filter(cat => cat.type === 'food')\n        .map(cat => cat.name);\n    },\n    readyMadeCategories() {\n      return this.categories\n        .filter(cat => {\n          // Simplify to only include the exact Ready Made category\n          // This ensures we don't mistakenly include other categories\n          return cat.name === 'Ready Made' || \n                 (cat.type && (\n                    cat.type === 'ready_made' || \n                    cat.type === 'ready-made' || \n                    cat.type === 'Ready Made'\n                 ));\n        })\n        .map(cat => cat.name);\n    }\n  },\n};\n</script>\n\n\n<style scoped>\n/* Add loading indicator styles */\n.loading-indicator {\n  text-align: center;\n  padding: 20px;\n  font-size: 18px;\n  color: #d12f7a;\n}\n\n.no-items {\n  text-align: center;\n  padding: 20px;\n  font-size: 18px;\n  color: #666;\n}\n\n.utility-divider {\n  border: none;\n  height: 1px;\n background-color: rgba(0, 0, 0, 0.1);\n  margin: 10px 0;\n}\n\n.user-profile-section {\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.profile-image {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  overflow: hidden;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n}\n\n.profile-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.user-name {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #222;\n}\n\n.theme-toggle {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  background: transparent;\n  border: none;\n  font-size: 1.2rem;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n}\n\n.theme-toggle:hover {\n background-color: rgba(0, 0, 0, 0.05);\n}\n\n.theme-toggle .light-icon {\n  color: #333;\n}\n\n.theme-toggle .dark-icon {\n  color: #fff;\n}\n\n.light-mode \n\n.theme-toggle {\n  color: #333;\n}\n\n.light-mode \n.user-name {\n  color: #333;\n}\n.dark-mode .user-name {\n  color: #fff;\n}\n.dark-mode .theme-toggle {\n  color: #fff;\n}\n.dark-mode .utility-divider {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.dark-mode .item {\n  background-color: #555555; /* Light grey background for dark mode */\n  color: #ffffff; /* Light text color */\n  box-shadow: 0px 4px 6px rgba(255, 255, 255, 0.1); /* Lighter box shadow */\n}\n\n.dark-mode .item span {\n  color: #ffffff; /* Light text for item span */\n}\n\n.dark-mode .item-price {\n  background-color: #6e6e6e; /* Lighter background for price */\n  color: #ffffff; /* Light text color for price */\n}\n\n.dark-mode .item-price:hover {\n  background-color: #888888; /* Darker price background on hover */\n  cursor: pointer;\n}\n\n\n.dark-mode-button, \n.notification-button {\n  position: relative;\n  background-color: rgb(48, 41, 44);\n  color: white;\n  padding: 8px 12px;\n  font-size: 14px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background 0.3s ease-in-out;\n}\n\n.notification-badge {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background-color: red;\n  color: white;\n  border-radius: 50%; /* This ensures it's fully circular */\n  font-size: 12px;\n  width: 20px; /* Set a fixed width */\n  height: 20px; /* Set a fixed height to ensure it's circular */\n  display: flex;\n  justify-content: center; /* Centers the content horizontally */\n  align-items: center; /* Centers the content vertically */\n}\n\n.dark-mode-button i, \n.notification-button i {\n  font-size: 18px; /* Adjust icon size */\n}\n\n.top-bar-buttons {\n  display: flex;\n  gap: 10px; /* Space between buttons */\n}\n\n.notification-button {\n  background-color: rgb(48, 41, 44); /* Same background as dark mode */\n  color: white;\n  padding: 8px 12px;\n  font-size: 14px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background 0.3s ease-in-out;\n}\n\n.notification-button:hover {\n  background-color: #b82d67; /* Same hover effect as dark mode button */\n}\n\n.notification-button i {\n  font-size: 18px; /* Adjust the icon size */\n}\n\n.dark-mode {\n  background-color: #121212;\n  color: #ffffff;\n}\n\n/* Buttons and Sidebar in Dark Mode */\n.dark-mode .sidebar,\n.dark-mode .dashboard,\n.dark-mode .top-bar,\n.dark-mode .content {\n  background-color: #1e1e1e;\n  color: #ffffff;\n}\n\n\n/* Dark Mode Button Styling */\n.dark-mode-button {\n  background-color: rgb(48, 41, 44);\n  color: white;\n  padding: 8px 12px;\n  font-size: 14px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background 0.3s ease-in-out;\n}\n\n.dark-mode .sidebar,\n.dark-mode .sidebar-category h3,\n.dark-mode .sidebar-category ul li {\n  color: #ffffff !important;\n}\n\n/* Dark Mode for Live Time */\n.dark-mode .live-time {\n  color: #ffffff !important;\n}\n\n\n   .item-details {\n    display: flex;\n    flex-direction: column; /* Stack the name and price vertically */\n    align-items: center;\n    margin-top: 10px;\n  }\n\n  /* Style the price to highlight it */\n  .item-price {\n    font-size: 18px;\n    font-weight: bold;\n    color: #d12f7a; \n    background-color: #f8e1e6; \n    padding: 5px 10px;\n    border-radius: 5px;\n    margin-top: 5px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  /* Glowing effect on hover */\n  .item-price:hover {\n    background-color: #f8c6d0; \n    cursor: pointer;\n  }\n\n  /* Glowing Button Styles */\n  .profile-button,\n  .order-history-button,\n  .logout-button {\n    padding: 15px 40px;\n    border: none;\n    outline: none;\n    color: #FFF;\n    cursor: pointer;\n    position: relative;\n    z-index: 0;\n    border-radius: 12px;\n    background-color: transparent;\n    border: 2px solid #d12f7a; /* Adjust border color */\n    font-size: 14px;\n   \n  }\n\n  /* Glowing effect */\n  .profile-button::after,\n  .order-history-button::after,\n  .logout-button::after {\n    content: \"\";\n    z-index: -1;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    left: 0;\n    top: 0;\n    border-radius: 10px;\n  }\n\n  /* Animation for glowing */\n  .profile-button::before,\n  .order-history-button::before,\n  .logout-button::before {\n    content: \"\";\n    background: linear-gradient(\n      45deg,\n      #FF0000, #FF7300, #FFFB00, #48FF00,\n      #00FFD5, #002BFF, #FF00C8, #FF0000\n    );\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    background-size: 600%;\n    z-index: -1;\n    width: calc(100% + 4px);\n    height: calc(100% + 4px);\n    filter: blur(8px);\n    animation: glowing 20s linear infinite;\n    transition: opacity .3s ease-in-out;\n    border-radius: 10px;\n    opacity: 0;\n  }\n\n  /* Hover effect for glowing */\n  .profile-button:hover::before,\n  .order-history-button:hover::before,\n  .logout-button:hover::before {\n    opacity: 1;\n  }\n\n  /* Active button state */\n  .profile-button:active:after,\n  .order-history-button:active:after,\n  .logout-button:active:after {\n    background: transparent;\n  }\n\n  .profile-button:active,\n  .order-history-button:active,\n  .logout-button:active {\n    color: #000;\n    font-weight: bold;\n    background-color: #d12f7a; /* Active background color */\n    border-color: #d12f7a; /* Border color */\n  }\n\n  /* Glow Animation */\n  @keyframes glowing {\n    0% {background-position: 0 0;}\n    50% {background-position: 400% 0;}\n    100% {background-position: 0 0;}\n  }\n\n/* Existing styles (unchanged) */\n.profile-button {\n  background-color: rgb(100, 14, 51);\n  color: white;\n  padding: 10px;\n  font-size: 18px;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background 0.3s ease-in-out;\n  width: 40px; /* Adjust width and height for round button */\n  height: 40px; /* Adjust width and height for round button */\n}\n\n.profile-button i {\n  font-size: 24px; /* Adjust icon size */\n}\n\n.profile-button:hover {\n  background-color: #b82d67;\n\n}\n\n.dashboard {\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n  background-color: #ffffff;\n  width: 100%;\n  overflow-x: hidden;\n  position: relative;\n}\n\nhtml, body {\n  min-height: 100vh;\n  margin: 0;\n  padding: 0;\n  background-color: #ffffff;\n}\n\n/* Sidebar */\n.sidebar {\n  position: fixed;\n  top: 0;\n  left: -280px;\n  height: 100vh;\n  width: 280px;\n  background-color: white;\n  transition: all 0.3s ease;\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  padding: 20px 0 20px 0; /* Add bottom padding */\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.sidebar.light-mode {\n  background-color: white;\n}\n\n.sidebar.dark-mode {\n  background-color: #333;\n  color: #fff;\n}\n\n.sidebar.dark-mode .utility-button,\n.sidebar.dark-mode .menu-item,\n.sidebar.dark-mode .profile-section,\n.sidebar.dark-mode h3 {\n  color: #fff;\n}\n\n.sidebar.dark-mode .utility-button:hover,\n.sidebar.dark-mode .menu-item:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.sidebar.dark-mode .profile-section,\n.sidebar.dark-mode .utility-section,\n.sidebar.dark-mode .logout {\n  border-color: rgba(255, 255, 255, 0.1);\n}\n\n.sidebar.open {\n  left: 0;\n}\n\n.close-sidebar {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  background: none;\n  border: none;\n  font-size: 18px;\n  cursor: pointer;\n  color: inherit;\n  padding: 5px;\n}\n\n.profile-section {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 15px 20px;\n  color: inherit;\n  font-size: 15px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  background: none;\n  border: none;\n  width: 100%;\n  cursor: pointer;\n  text-align: left;\n}\n\n.profile-section:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.utility-section {\n  padding: 10px 0;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.utility-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 12px 20px;\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: inherit;\n  font-size: 15px;\n  text-decoration: none;\n  transition: background-color 0.2s;\n}\n\n.utility-button:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.notification-link {\n  position: relative;\n  text-decoration: none;\n  color: inherit;\n}\n\n.notification-icon {\n  position: relative;\n  display: inline-block;\n  width: 20px;\n}\n\n.notification-badge {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  background-color: red;\n  color: white;\n  border-radius: 50%; /* This ensures it's fully circular */\n  font-size: 11px;\n  min-width: 15px;\n  height: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.menu-section {\n  flex: 1;\n  padding: 15px 0 0 0;\n  overflow-y: auto;\n  margin-bottom: 0;\n}\n\n.menu-section h3 {\n  padding: 0 20px;\n  margin: 10px 0 5px;\n  font-size: 16px;\n  color: inherit;\n  font-weight: 500;\n}\n\n.menu-items {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n}\n\n.menu-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 8px 20px;\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: inherit;\n  font-size: 15px;\n  text-align: left;\n  transition: background-color 0.2s;\n}\n\n.menu-item:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.menu-item i {\n  width: 20px;\n  text-align: center;\n  font-size: 14px;\n}\n\n.logout-container {\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 0;\n  background-color: white;\n  margin-bottom: 20px; /* Add space after logout button */\n}\n\n.dark-mode .logout-container {\n  background-color: #333;\n  border-top-color: rgba(255, 255, 255, 0.1);\n}\n\n.logout {\n  color: inherit;\n  padding: 10px 20px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n/* Mobile Responsive */\n@media (max-width: 768px) {\n  .content {\n    margin-left: 0;\n    padding: 15px;\n  }\n  \n  .menu-button {\n    display: block;\n  }\n}\n\n/* Desktop Responsive */\n@media (min-width: 769px) {\n  .content {\n    margin-left: 0; /* Remove default margin to match mobile behavior */\n  }\n  \n  .menu-button {\n    display: block; /* Show menu button on desktop */\n    background: rgb(255, 255, 255);\n    color: black;\n    padding: 10px 15px;\n    font-size: 18px;\n    border-radius: 15px;\n    transition: background 0.3s ease-in-out;\n  }\n\n  /* When sidebar is open */\n  .sidebar.open + .content {\n    margin-left: 270px;\n  }\n}\n\n/* Update menu button base styles */\n.menu-button {\n  position: fixed;\n  top: 15px;\n  left: 15px;\n  z-index: 300;\n  background: white;\n  color: #E54F70;\n  padding: 10px 15px;\n  font-size: 18px;\n  border: none;\n  border-radius: 15px;\n  cursor: pointer;\n  transition: background 0.3s ease-in-out;\n  display: block; /* Always show the menu button */\n}\n\n.menu-icon-container {\n  position: relative;\n  display: inline-block;\n}\n\n.menu-notification-badge {\n  position: absolute;\n  top: -8px;\n  right: -20px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  font-size: 12px;\n  min-width: 18px;\n  height: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n\n/* Add overlay styles */\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 299;\n  display: none;\n}\n\n.overlay.show {\n  display: block;\n}\n\n/* Update content transition */\n.content {\n  transition: margin-left 0.3s ease;\n}\n\n/* Style the container for both logo and live time */\n.logo-time-container {\n  display: none;\n}\n\n.search-cart-container {\n  display: flex;\n  align-items: center;\n  width: 80%;\n  max-width: 400px;\n  position: relative;\n}\n\n.search-container { \n  display: flex;\n  justify-content: center; \n  padding: 10px;\n  border-radius: 15px;\n  width: 100%;\n  max-width: 300px;\n} \n\n.cart-icon-container {\n  position: absolute;\n  right: -40px;\n  cursor: pointer;\n  padding: 10px;\n  font-size: 24px;\n  color: #d12f7a;\n  transition: color 0.3s ease;\n}\n\n@media (max-width: 768px) {\n  .search-cart-container {\n    width: 90%;\n    max-width: none;\n    position: relative;\n  }\n  \n  .search-container {\n    width: 100%;\n    max-width: none;\n  }\n  \n  .cart-icon-container {\n    right: -35px;\n    font-size: 20px;\n  }\n  \n  .search-container input {\n    width: 100%;\n    max-width: none;\n  }\n}\n\n.cart-badge {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  padding: 2px 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.item-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 30px;\n  border-radius: 15px;\n  text-align: center;\n  width: 90%;\n  max-width: 400px;\n  position: relative;\n  border: 2px solid #E54F70;\n}\n\n/* Update close button styles */\n.modal-content .close {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 32px;\n  color: #333;\n  cursor: pointer;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  background: none;\n  border: none;\n  padding: 0;\n  line-height: 1;\n}\n\n.modal-content .close:hover {\n  color: #d12f7a;\n  transform: scale(1.1);\n}\n\n/* Dark mode styles for close button */\n.dark-mode .modal-content .close {\n  color: #fff;\n}\n\n.dark-mode .modal-content .close:hover {\n  color: #f8c6d0;\n}\n\n@media (max-width: 768px) {\n  .modal-content .close {\n    font-size: 28px;\n    width: 35px;\n    height: 35px;\n  }\n}\n\n.modal-item-details {\n  margin-bottom: 20px;\n}\n\n.modal-item-details img {\n  width: 150px;\n  height: 150px;\n  object-fit: contain;\n  margin-bottom: 15px;\n}\n\n.modal-item-details h3 {\n  color: #333;\n  margin: 10px 0;\n}\n\n.modal-item-details .price {\n  color: #d12f7a;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n}\n\n.add-cart-btn, .order-now-btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: all 0.3s ease;\n}\n\n.add-cart-btn {\n  background-color: #333;\n  color: white;\n}\n\n.order-now-btn {\n  background-color: #d12f7a;\n  color: white;\n}\n\n.add-cart-btn:hover {\n  background-color: #444;\n}\n\n.order-now-btn:hover {\n  background-color: #b82d67;\n}\n\n/* Dark mode styles */\n.dark-mode .modal-content {\n  background-color: #333;\n  color: white;\n}\n\n.dark-mode .modal-item-details h3 {\n  color: white;\n}\n\n.dark-mode .cart-icon-container {\n  color: #f8c6d0;\n}\n\n.dark-mode .cart-icon-container:hover {\n  color: #f8a1b2;\n}\n\n@media (max-width: 768px) {\n  .search-cart-container {\n    max-width: 300px;\n  }\n  \n  .cart-icon-container {\n    font-size: 20px;\n  }\n  \n  .modal-content {\n    width: 85%;\n    padding: 20px;\n  }\n  \n  .modal-item-details img {\n    width: 120px;\n    height: 120px;\n  }\n}\n\n/* Add this to your existing styles */\n.added-to-cart-notification {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  z-index: 2000;\n  animation: slideIn 0.3s ease-out, fadeOut 0.3s ease-out 0.7s;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n/* Dark mode support */\n.dark-mode .added-to-cart-notification {\n  background-color: #45a049;\n}\n\n/* Modal Quantity Controls */\n.modal-quantity-controls {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 15px;\n  margin: 20px 0;\n}\n\n.quantity-btn {\n  width: 35px;\n  height: 35px;\n  border: none;\n  border-radius: 50%;\n  background-color: #d12f7a;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n}\n\n.quantity-btn:hover {\n  background-color: #b82d67;\n  transform: scale(1.1);\n}\n\n.quantity-display {\n  font-size: 24px;\n  font-weight: bold;\n  color: #333;\n  min-width: 40px;\n  text-align: center;\n}\n\n.total-price {\n  font-size: 20px;\n  font-weight: bold;\n  color: #d12f7a;\n  margin-top: 10px;\n}\n\n/* Dark mode styles for quantity controls */\n.dark-mode .quantity-display {\n  color: #fff;\n}\n\n.dark-mode .quantity-btn {\n  background-color: #444;\n}\n\n.dark-mode .quantity-btn:hover {\n  background-color: #555;\n}\n\n/* Remove all out-of-stock related styles */\n.item.out-of-stock {\n  opacity: 0.9;\n  position: relative;\n}\n\n.item.out-of-stock img {\n  filter: grayscale(0.7);\n}\n\n/* Top Bar */\n.top-bar {\n  display: flex;\n  align-items: center;\n  background-image: linear-gradient(to right, #E54F70, #ed9598);\n  padding: 0 15px;\n  height: 60px;\n  width: 100%;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.centered-content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1;\n  gap: 20px;\n}\n\n.top-bar .menu-button {\n  position: static;\n  background: transparent;\n  box-shadow: none;\n  font-size: 24px;\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  z-index: 101;\n  color: white;\n}\n\n.logo-container {\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n}\n\n.logo-container img {\n  width: 30px;\n  height: 30px;\n  object-fit: contain;\n}\n\n.cafe-title {\n  color: white;\n  font-weight: bold;\n  margin-left: 10px;\n  font-size: 18px;\n  white-space: nowrap;\n}\n\n.search-container {\n  flex-grow: 0;\n  width: 250px;\n}\n\n.search-container input {\n  width: 100%;\n  padding: 8px 15px;\n  border-radius: 20px;\n  border: 1px solid #ccc;\n  font-size: 14px;\n  background-color: white;\n}\n\n.time-cart-container {\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n}\n\n.live-time {\n  font-weight: 500;\n  font-size: 14px;\n  color: white;\n  white-space: nowrap;\n}\n\n.cart-icon-container {\n  cursor: pointer;\n  font-size: 22px;\n  color: #d12f7a;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  background-color: #f8e1e6;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: all 0.3s ease;\n}\n\n.cart-icon-container:hover {\n  transform: scale(1.1);\n  background-color: #f8d1d1;\n}\n\n.cart-badge {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  font-size: 10px;\n  min-width: 18px;\n  height: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n/* Dark mode styles for top bar */\n.dark-mode .top-bar {\n  background-image: linear-gradient(to right, #333, #444);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .cafe-title {\n  color: white;\n}\n\n.dark-mode .live-time {\n  color: white;\n}\n\n.dark-mode .search-container input {\n  background-color: #444;\n  color: white;\n  border-color: #555;\n}\n\n.dark-mode .top-bar .menu-button {\n  color: white;\n}\n\n/* Responsive adjustments for top bar */\n@media (max-width: 768px) {\n  .top-bar {\n    padding: 0 10px;\n  }\n  \n  .centered-content {\n    gap: 10px;\n  }\n  \n  .search-container {\n    width: 180px;\n  }\n  \n  .logo-container img {\n    width: 25px;\n    height: 25px;\n  }\n  \n  .cafe-title {\n    font-size: 16px;\n    margin-left: 5px;\n  }\n}\n\n@media (max-width: 480px) {\n  .top-bar {\n    padding: 0 5px;\n  }\n  \n  .centered-content {\n    gap: 5px;\n  }\n  \n  .search-container {\n    width: 120px;\n  }\n  \n  .cafe-title {\n    font-size: 14px;\n  }\n  \n  .cart-icon-container {\n    width: 36px;\n    height: 36px;\n    font-size: 20px;\n  }\n}\n\n/* Dashboard Title */\n.dashboard-title {\n   font-size: 40px;\n  font-weight: bold;\n   color: #d12f7a;\n  margin-top: 15px;\n  margin-bottom: 15px;\n  text-align: center;\n  font-style: italic; \n  font-family: \"Merriweather\", serif; \n  letter-spacing: 1px; \n \n}\n\n .dashboard-title:hover {\n    color: #fff; \n    text-shadow: 0 0 10px rgba(209, 47, 122, 1), 0 0 20px rgba(209, 47, 122, 0.7); \n\n }\n \n .logo-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Live Time container */\n.live-time-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  font-weight: bold;\n  font-size: 20px;\n}\n\n/* Style the search bar */\n.search-container input {\n  border-radius: 20px;\n  border: 1px solid #ccc;\n  width: 100%;\n  max-width: 300px;\n}\n\n.order-history-button,\n  .logout-button {\n    font-size: 12px;\n    padding: 6px 10px;\n  }\n/* Categories Section */\n.categories {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.category {\n  width: 48%;\n}\n\n.category h2 {\n  font-size: 24px;\n  font-weight: bold;\n  color: #d12f7a;\n  text-align: center;\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\n\n/* Items Section */\n.items {\n  display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n   gap: 20px;\n  padding: 20px;\n  justify-content: center;\n  align-items: center;\n}\n@media (min-width: 1024px) {\n  .items {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n\n/* Adjust for smaller screens */\n@media (max-width: 1023px) {\n  .items {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@media (max-width: 768px) {\n  .items {\n     display: flex;\n    grid-template-columns: repeat(2, 1fr);\n       flex-direction: column;\n    align-items: center;\n  }\n}\n\n@media (max-width: 480px) {\n  .items {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Item styling */\n.item {\n  text-align: center;\n  background-color: white;\n  border-radius: 15px;\n  padding: 15px;\n  cursor: pointer;\n  transition: transform 0.3s ease, opacity 0.3s ease;\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  max-width: 200px;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n  border: 1px solid #E54F70;\n}\n\n.item img {\n  width: 100px;\n  height: 100px;\n  object-fit: contain;\n}\n\n.item:hover img {\n  transform: scale(1.05);\n}\n\n.item span {\n  font-weight: bold;\n  color: #333;\n  font-size: 16px;\n  text-align: center;\n  display: block;\n  line-height: 1.3;\n  margin-top: 8px;\n}\n\n/* Responsive Text Adjustments */\n@media (max-width: 768px) {\n  .dashboard-title {\n    font-size: 35px;\n  }\n\n}\n .item-details {\n    display: flex;\n    justify-content: space-between;\n   flex-direction: column;\n  align-items: center;\n  margin-top: 10px;\n  }\n\n  .item-price {\n    font-size: 18px;\n    font-weight: bold;\n    color: #d12f7a; \n    background-color: #f8e1e6; \n    padding: 5px 10px;\n    border-radius: 5px;\n    margin-top: 5px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .item-price:hover {\n    background-color: #f8c6d0; \n    cursor: pointer;\n  }\n\n  .category h2 {\n    font-size: 20px;\n  }\n\n  .item span {\n    font-size: 14px;\n  }\n\n \n\n@media (max-width: 480px) {\n  .dashboard-title {\n    font-size: 30px;\n  }\n\n  .category h2 {\n    font-size: 18px;\n  }\n\n\n  .order-history-button,\n  .logout-button {\n     font-size: 10px;\n    padding: 5px 8px;\n  }\n}\n\n.category-header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.category-header h2 {\n  font-size: 24px;\n  color:rgb(0, 0, 0);\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n\n/* Dark mode styles for category header */\n.dark-mode .category-header h2 {\n  color: #f8c6d0;\n}\n\n/* Remove refresh button styles that are no longer needed */\n.refresh-button,\n.refresh-button:hover,\n.refresh-button:disabled,\n.fa-spin,\n@keyframes fa-spin {\n  /* These styles will be removed */\n}\n\n.search-cart-container {\n  display: flex;\n  align-items: center;\n  width: 80%;\n  max-width: 400px;\n  position: relative;\n}\n\n.search-container { \n  display: flex;\n  justify-content: center; \n  padding: 10px;\n  border-radius: 15px;\n  width: 100%;\n  max-width: 300px;\n} \n\n.cart-icon-container {\n  position: absolute;\n  right: -40px;\n  cursor: pointer;\n  padding: 10px;\n  font-size: 24px;\n  color: #d12f7a;\n  transition: color 0.3s ease;\n}\n\n@media (max-width: 768px) {\n  .search-cart-container {\n    width: 90%;\n    max-width: none;\n    position: relative;\n  }\n  \n  .search-container {\n    width: 100%;\n    max-width: none;\n  }\n  \n  .cart-icon-container {\n    right: -35px;\n    font-size: 20px;\n  }\n  \n  .search-container input {\n    width: 100%;\n    max-width: none;\n  }\n}\n\n.cart-badge {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  padding: 2px 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.item-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 30px;\n  border-radius: 15px;\n  text-align: center;\n  width: 90%;\n  max-width: 400px;\n  position: relative;\n  border: 2px solid #E54F70;\n}\n\n/* Update close button styles */\n.modal-content .close {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 32px;\n  color: #333;\n  cursor: pointer;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  background: none;\n  border: none;\n  padding: 0;\n  line-height: 1;\n}\n\n.modal-content .close:hover {\n  color: #d12f7a;\n  transform: scale(1.1);\n}\n\n/* Dark mode styles for close button */\n.dark-mode .modal-content .close {\n  color: #fff;\n}\n\n.dark-mode .modal-content .close:hover {\n  color: #f8c6d0;\n}\n\n@media (max-width: 768px) {\n  .modal-content .close {\n    font-size: 28px;\n    width: 35px;\n    height: 35px;\n  }\n}\n\n.modal-item-details {\n  margin-bottom: 20px;\n}\n\n.modal-item-details img {\n  width: 150px;\n  height: 150px;\n  object-fit: contain;\n  margin-bottom: 15px;\n}\n\n.modal-item-details h3 {\n  color: #333;\n  margin: 10px 0;\n}\n\n.modal-item-details .price {\n  color: #d12f7a;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n}\n\n.add-cart-btn, .order-now-btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: all 0.3s ease;\n}\n\n.add-cart-btn {\n  background-color: #333;\n  color: white;\n}\n\n.order-now-btn {\n  background-color: #d12f7a;\n  color: white;\n}\n\n.add-cart-btn:hover {\n  background-color: #444;\n}\n\n.order-now-btn:hover {\n  background-color: #b82d67;\n}\n\n/* Dark mode styles */\n.dark-mode .modal-content {\n  background-color: #333;\n  color: white;\n}\n\n.dark-mode .modal-item-details h3 {\n  color: white;\n}\n\n.dark-mode .cart-icon-container {\n  color: #f8c6d0;\n}\n\n.dark-mode .cart-icon-container:hover {\n  color: #f8a1b2;\n}\n\n@media (max-width: 768px) {\n  .search-cart-container {\n    max-width: 300px;\n  }\n  \n  .cart-icon-container {\n    font-size: 20px;\n  }\n  \n  .modal-content {\n    width: 85%;\n    padding: 20px;\n  }\n  \n  .modal-item-details img {\n    width: 120px;\n    height: 120px;\n  }\n}\n\n/* Add this to your existing styles */\n.added-to-cart-notification {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  z-index: 2000;\n  animation: slideIn 0.3s ease-out, fadeOut 0.3s ease-out 0.7s;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n/* Dark mode support */\n.dark-mode .added-to-cart-notification {\n  background-color: #45a049;\n}\n\n/* Modal Quantity Controls */\n.modal-quantity-controls {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 15px;\n  margin: 20px 0;\n}\n\n.quantity-btn {\n  width: 35px;\n  height: 35px;\n  border: none;\n  border-radius: 50%;\n  background-color: #d12f7a;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n}\n\n.quantity-btn:hover {\n  background-color: #b82d67;\n  transform: scale(1.1);\n}\n\n.quantity-display {\n  font-size: 24px;\n  font-weight: bold;\n  color: #333;\n  min-width: 40px;\n  text-align: center;\n}\n\n.total-price {\n  font-size: 20px;\n  font-weight: bold;\n  color: #d12f7a;\n  margin-top: 10px;\n}\n\n/* Dark mode styles for quantity controls */\n.dark-mode .quantity-display {\n  color: #fff;\n}\n\n.dark-mode .quantity-btn {\n  background-color: #444;\n}\n\n.dark-mode .quantity-btn:hover {\n  background-color: #555;\n}\n\n/* Remove all out-of-stock related styles */\n.item.out-of-stock {\n  opacity: 0.9;\n  position: relative;\n}\n\n.item.out-of-stock img {\n  filter: grayscale(0.7);\n}\n\n/* Add floating cart styles */\n.floating-cart {\n  position: fixed;\n  bottom: 30px;\n  right: 30px;\n  width: 60px;\n  height: 60px;\n  background-color: #d12f7a;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n  transition: all 0.3s ease;\n}\n\n.floating-cart:hover {\n  transform: scale(1.1);\n  background-color: #b82d67;\n}\n\n.floating-cart-badge {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  background-color: red;\n  color: white;\n  border-radius: 50%;\n  font-size: 14px;\n  min-width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n.dark-mode .floating-cart {\n  background-color: #444;\n}\n\n.dark-mode .floating-cart:hover {\n  background-color: #333;\n}\n\n@media (max-width: 768px) {\n  .floating-cart {\n    bottom: 20px;\n    right: 20px;\n    width: 55px;\n    height: 55px;\n  }\n}\n\n@media (max-width: 480px) {\n  .floating-cart {\n    bottom: 15px;\n    right: 15px;\n    width: 50px;\n    height: 50px;\n    font-size: 20px;\n  }\n  \n  .floating-cart-badge {\n    min-width: 20px;\n    height: 20px;\n    font-size: 12px;\n  }\n}\n\n/* Update time-cart-container to just show time */\n.time-cart-container {\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n}\n\n.sync-button {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 4px 8px;\n  font-size: 0.8rem;\n  cursor: pointer;\n  margin-left: 10px;\n  transition: all 0.3s ease;\n  display: inline-flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.sync-button.prominent {\n  background-color: #007bff;\n  padding: 6px 12px;\n  font-size: 0.9rem;\n  font-weight: bold;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n.sync-button:hover {\n  background-color: #45a049;\n  transform: scale(1.05);\n}\n\n.sync-button.prominent:hover {\n  background-color: #0069d9;\n  transform: scale(1.05);\n}\n\n.sync-button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.sync-button i {\n  font-size: 12px;\n}\n\n/* Add to the style section */\n.inventory-badge {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #4CAF50;\n  color: white;\n  border-radius: 15px;\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  z-index: 2;\n  font-size: 12px;\n  font-weight: bold;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n}\n\n.inventory-badge i {\n  font-size: 14px;\n}\n\n.inventory-badge span {\n  color: white !important;\n  font-size: 12px !important;\n}\n\n.item-image-container {\n  position: relative;\n  width: 100%;\n  height: 150px;\n  overflow: hidden;\n  border-radius: 10px 10px 0 0;\n}\n\n.item-image-container img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.inventory-badge {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #4CAF50;\n  color: white;\n  border-radius: 15px;\n  padding: 3px 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n  z-index: 2;\n  font-size: 12px;\n}\n\n.inventory-badge i {\n  font-size: 18px;\n}\n\n.inventory-item {\n  border: 2px solid #4CAF50;\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);\n}\n\n/* Add CSS for the modal image container and inventory badge */\n.modal-image-container {\n  position: relative;\n  width: 100%;\n  max-height: 200px;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 15px;\n}\n\n.modal-image-container img {\n  max-height: 200px;\n  max-width: 100%;\n  object-fit: contain;\n}\n\n.inventory-badge-modal {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #4CAF50;\n  color: white;\n  padding: 5px 10px;\n  border-radius: 15px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.dark-mode .item.inventory-item {\n  border: 2px solid #4CAF50;\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);\n}\n\n.top-controls {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n/* Additional responsive adjustments */\n@media (max-width: 768px) {\n  .top-controls {\n    gap: 10px;\n  }\n}\n\n@media (max-width: 480px) {\n  .top-controls {\n    gap: 5px;\n  }\n  \n  .live-time {\n    font-size: 14px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}