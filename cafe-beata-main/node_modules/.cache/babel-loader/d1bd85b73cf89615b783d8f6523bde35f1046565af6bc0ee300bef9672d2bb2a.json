{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_router_view), _createCommentVNode(\" This is where the routed component will be displayed \")]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","_createCommentVNode"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view></router-view> <!-- This is where the routed component will be displayed -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\" && localStorage.getItem(\"loggedIn\") === \"true\",\n      isLoggedIn: localStorage.getItem(\"loggedIn\") === \"true\",\n    };\n  },\n  watch: {\n    isDarkMode(newValue) {\n      localStorage.setItem(\"darkMode\", newValue); // Save preference in localStorage\n      document.body.classList.toggle(\"dark-mode\", newValue);\n    },\n  },\n  created() {\n    this.applyDarkModeBasedOnRoute();\n  },\n  methods: {\n    applyDarkModeBasedOnRoute() {\n      // Don't apply dark mode for excluded pages like login, create-account, and forgot-password\n      const excludedPages = ['/login', '/create-account', '/forgot-password'];\n      \n      if (!this.isLoggedIn || excludedPages.includes(this.$route.path)) {\n        document.body.classList.remove(\"dark-mode\");\n      } else {\n        if (this.isDarkMode) {\n          document.body.classList.add(\"dark-mode\");\n        }\n      }\n    },\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    },\n    logout() {\n      localStorage.setItem(\"loggedIn\", \"false\"); // Mark user as logged out\n      localStorage.setItem(\"darkMode\", \"false\"); // Turn off dark mode on logout\n      this.isDarkMode = false; // Update local data to reflect the logout state\n      this.isLoggedIn = false; // Update login status\n      document.body.classList.remove(\"dark-mode\"); // Remove dark mode class on logout\n      this.$router.push('/login'); // Redirect to the login page\n    }\n  }\n};\n</script>\n\n<style>\n/* Default Light Mode */\nbody {\n  background-color: #ffffff;\n  color: #000000;\n}\n\n/* ðŸŒ™ Dark Mode */\n.dark-mode {\n  background-color: #121212;\n  color: #ffffff;\n}\n\n/* ðŸŒ™ Dark Mode - Buttons */\n.dark-mode button {\n  background-color: #333;\n  color: #fff;\n  border: 1px solid #555;\n}\n\n/* ðŸŒ™ Dark Mode - Input Fields */\n.dark-mode input {\n  background-color: #222;\n  color: #fff;\n  border: 1px solid #555;\n}\n\n/* ðŸŒ™ Dark Mode - Sidebar & Time */\n.dark-mode .sidebar,\n.dark-mode .sidebar-category h3,\n.dark-mode .sidebar-category ul li {\n  color: #ffffff;\n}\n\n.dark-mode .live-time {\n  color: #ffffff;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;uBAAbC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAA2BC,sBAAA,GAACC,mBAAA,0DAA6D,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}