{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\" && localStorage.getItem(\"loggedIn\") === \"true\",\n      isLoggedIn: localStorage.getItem(\"loggedIn\") === \"true\"\n    };\n  },\n  watch: {\n    isDarkMode(newValue) {\n      localStorage.setItem(\"darkMode\", newValue); // Save preference in localStorage\n      document.body.classList.toggle(\"dark-mode\", newValue);\n    }\n  },\n  created() {\n    this.applyDarkModeBasedOnRoute();\n  },\n  methods: {\n    applyDarkModeBasedOnRoute() {\n      // Don't apply dark mode for excluded pages like login, create-account, and forgot-password\n      const excludedPages = ['/login', '/create-account', '/forgot-password'];\n      if (!this.isLoggedIn || excludedPages.includes(this.$route.path)) {\n        document.body.classList.remove(\"dark-mode\");\n      } else {\n        if (this.isDarkMode) {\n          document.body.classList.add(\"dark-mode\");\n        }\n      }\n    },\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    },\n    logout() {\n      localStorage.setItem(\"loggedIn\", \"false\"); // Mark user as logged out\n      localStorage.setItem(\"darkMode\", \"false\"); // Turn off dark mode on logout\n      this.isDarkMode = false; // Update local data to reflect the logout state\n      this.isLoggedIn = false; // Update login status\n      document.body.classList.remove(\"dark-mode\"); // Remove dark mode class on logout\n      this.$router.push('/login'); // Redirect to the login page\n    }\n  }\n};","map":{"version":3,"names":["data","isDarkMode","localStorage","getItem","isLoggedIn","watch","newValue","setItem","document","body","classList","toggle","created","applyDarkModeBasedOnRoute","methods","excludedPages","includes","$route","path","remove","add","toggleDarkMode","logout","$router","push"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view></router-view> <!-- This is where the routed component will be displayed -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\" && localStorage.getItem(\"loggedIn\") === \"true\",\n      isLoggedIn: localStorage.getItem(\"loggedIn\") === \"true\",\n    };\n  },\n  watch: {\n    isDarkMode(newValue) {\n      localStorage.setItem(\"darkMode\", newValue); // Save preference in localStorage\n      document.body.classList.toggle(\"dark-mode\", newValue);\n    },\n  },\n  created() {\n    this.applyDarkModeBasedOnRoute();\n  },\n  methods: {\n    applyDarkModeBasedOnRoute() {\n      // Don't apply dark mode for excluded pages like login, create-account, and forgot-password\n      const excludedPages = ['/login', '/create-account', '/forgot-password'];\n      \n      if (!this.isLoggedIn || excludedPages.includes(this.$route.path)) {\n        document.body.classList.remove(\"dark-mode\");\n      } else {\n        if (this.isDarkMode) {\n          document.body.classList.add(\"dark-mode\");\n        }\n      }\n    },\n    toggleDarkMode() {\n      this.isDarkMode = !this.isDarkMode;\n    },\n    logout() {\n      localStorage.setItem(\"loggedIn\", \"false\"); // Mark user as logged out\n      localStorage.setItem(\"darkMode\", \"false\"); // Turn off dark mode on logout\n      this.isDarkMode = false; // Update local data to reflect the logout state\n      this.isLoggedIn = false; // Update login status\n      document.body.classList.remove(\"dark-mode\"); // Remove dark mode class on logout\n      this.$router.push('/login'); // Redirect to the login page\n    }\n  }\n};\n</script>\n\n<style>\n/* Default Light Mode */\nbody {\n  background-color: #ffffff;\n  color: #000000;\n}\n\n/* ðŸŒ™ Dark Mode */\n.dark-mode {\n  background-color: #121212;\n  color: #ffffff;\n}\n\n/* ðŸŒ™ Dark Mode - Buttons */\n.dark-mode button {\n  background-color: #333;\n  color: #fff;\n  border: 1px solid #555;\n}\n\n/* ðŸŒ™ Dark Mode - Input Fields */\n.dark-mode input {\n  background-color: #222;\n  color: #fff;\n  border: 1px solid #555;\n}\n\n/* ðŸŒ™ Dark Mode - Sidebar & Time */\n.dark-mode .sidebar,\n.dark-mode .sidebar-category h3,\n.dark-mode .sidebar-category ul li {\n  color: #ffffff;\n}\n\n.dark-mode .live-time {\n  color: #ffffff;\n}\n</style>\n"],"mappings":";AAOA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAEC,YAAY,CAACC,OAAO,CAAC,UAAU,MAAM,MAAK,IAAKD,YAAY,CAACC,OAAO,CAAC,UAAU,MAAM,MAAM;MACtGC,UAAU,EAAEF,YAAY,CAACC,OAAO,CAAC,UAAU,MAAM;IACnD,CAAC;EACH,CAAC;EACDE,KAAK,EAAE;IACLJ,UAAUA,CAACK,QAAQ,EAAE;MACnBJ,YAAY,CAACK,OAAO,CAAC,UAAU,EAAED,QAAQ,CAAC,EAAE;MAC5CE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEL,QAAQ,CAAC;IACvD;EACF,CAAC;EACDM,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,yBAAyB,CAAC,CAAC;EAClC,CAAC;EACDC,OAAO,EAAE;IACPD,yBAAyBA,CAAA,EAAG;MAC1B;MACA,MAAME,aAAY,GAAI,CAAC,QAAQ,EAAE,iBAAiB,EAAE,kBAAkB,CAAC;MAEvE,IAAI,CAAC,IAAI,CAACX,UAAS,IAAKW,aAAa,CAACC,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,EAAE;QAChEV,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACS,MAAM,CAAC,WAAW,CAAC;MAC7C,OAAO;QACL,IAAI,IAAI,CAAClB,UAAU,EAAE;UACnBO,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACU,GAAG,CAAC,WAAW,CAAC;QAC1C;MACF;IACF,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACpB,UAAS,GAAI,CAAC,IAAI,CAACA,UAAU;IACpC,CAAC;IACDqB,MAAMA,CAAA,EAAG;MACPpB,YAAY,CAACK,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE;MAC3CL,YAAY,CAACK,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE;MAC3C,IAAI,CAACN,UAAS,GAAI,KAAK,EAAE;MACzB,IAAI,CAACG,UAAS,GAAI,KAAK,EAAE;MACzBI,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACS,MAAM,CAAC,WAAW,CAAC,EAAE;MAC7C,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}