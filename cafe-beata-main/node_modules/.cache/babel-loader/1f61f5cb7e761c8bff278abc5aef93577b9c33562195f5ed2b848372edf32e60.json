{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nexport default {\n  name: 'OrderDetails',\n  data() {\n    return {\n      items: this.parseItems(this.$route.query.items),\n      orderId: this.$route.query.orderId,\n      customerName: this.$route.query.customerName,\n      showSuccessMessage: false,\n      unavailableItems: [],\n      // Track unavailable items\n      showUnavailableModal: false,\n      // Control modal visibility\n      itemsToOrder: [],\n      // Items to add to cart after filtering\n      itemMap: {},\n      // Store item details keyed by name\n      stockMap: {},\n      // Store stock details keyed by item ID\n      menuItems: [] // Store the complete menu items for lookup\n    };\n  },\n  methods: {\n    parseItems(items) {\n      try {\n        return JSON.parse(items) || [];\n      } catch (error) {\n        console.error(\"Error parsing order items:\", error);\n        return [];\n      }\n    },\n    goBackToHistory() {\n      this.$router.push({\n        name: \"OrderHistory\"\n      });\n    },\n    calculateTotal() {\n      if (!Array.isArray(this.items)) return \"0\";\n      return this.items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n    getImagePath(item) {\n      try {\n        // If no item or no image path, return default image\n        if (!item || !item.image) {\n          return require('@/assets/default.png');\n        }\n\n        // If it's already a full URL (including inventory system on localhost:8001)\n        if (item.image.startsWith('http://') || item.image.startsWith('https://')) {\n          // Check if this is an inventory image that needs to be fixed\n          if (item.image.includes('localhost:8001')) {\n            // Check if the path needs to be fixed - it should point to /uploads/products/\n            if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n              // Extract the filename\n              const parts = item.image.split('/');\n              const filename = parts[parts.length - 1];\n              const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n              console.log('Fixed inventory image path:', fixedPath);\n              return fixedPath;\n            }\n          }\n          return item.image;\n        }\n\n        // Handle inventory system images\n        if (item.image.includes('localhost:8001')) {\n          // Same fix as above if needed\n          if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n            const parts = item.image.split('/');\n            const filename = parts[parts.length - 1];\n            return `http://localhost:8001/uploads/products/${filename}`;\n          }\n          return item.image;\n        }\n\n        // If it's a backend upload path\n        if (item.image.startsWith('/uploads/')) {\n          return `http://localhost:8000${item.image}`;\n        }\n\n        // If it's just a filename, try to load from assets\n        try {\n          return require(`@/assets/${item.image}`);\n        } catch (error) {\n          console.log('Failed to load image from assets, trying uploads folder');\n          // If not found in assets, try backend uploads\n          return `http://localhost:8000/uploads/avatars/${item.image}`;\n        }\n      } catch (error) {\n        console.error('Error in getImagePath:', error);\n        return require('@/assets/default.png');\n      }\n    },\n    // Get item object by name from the original items array\n    getItemByName(name) {\n      return this.items.find(item => item.name === name) || {};\n    },\n    // Remove an item from the unavailable items list and proceed\n    removeFromOrder(itemName) {\n      // Remove the item from the unavailable items array\n      this.unavailableItems = this.unavailableItems.filter(name => name !== itemName);\n\n      // Find the corresponding original item to add to the order\n      const itemToAdd = this.items.find(item => item.name === itemName);\n      if (itemToAdd) {\n        // Find the menu item to get its ID\n        const menuItem = this.findItemInMenu(itemToAdd.name);\n        if (menuItem) {\n          // Get stock information\n          const stock = this.stockMap[menuItem.id];\n\n          // Only add if there's actually some stock available\n          // (user might be removing from the modal but the item is still unavailable)\n          if (stock && stock.quantity > 0) {\n            // Use the available quantity if it's less than what was ordered\n            const quantityToAdd = Math.min(itemToAdd.quantity, stock.quantity);\n\n            // Add it to the items to order\n            this.itemsToOrder.push({\n              id: menuItem.id,\n              name: itemToAdd.name,\n              price: itemToAdd.price,\n              image: itemToAdd.image,\n              quantity: quantityToAdd\n            });\n\n            // If we couldn't add the full quantity, let the user know\n            if (quantityToAdd < itemToAdd.quantity) {\n              alert(`Only ${quantityToAdd} units of ${itemToAdd.name} are available.`);\n            }\n          } else {\n            // If still no stock, inform the user\n            alert(`${itemToAdd.name} is still unavailable.`);\n          }\n        }\n      }\n\n      // If all unavailable items have been removed, close the modal and proceed\n      if (this.unavailableItems.length === 0) {\n        this.showUnavailableModal = false;\n        this.addItemsToCart();\n      }\n    },\n    // Close the unavailable items modal without proceeding\n    closeUnavailableModal() {\n      this.showUnavailableModal = false;\n    },\n    // Proceed with only available items\n    proceedWithAvailable() {\n      this.showUnavailableModal = false;\n      this.addItemsToCart();\n    },\n    // Add filtered items to cart and navigate to confirm order\n    addItemsToCart() {\n      const userName = localStorage.getItem('userName') || 'Guest';\n      const userCartKey = `cart_${userName}`;\n\n      // Get existing cart from localStorage or initialize empty array\n      let cart = JSON.parse(localStorage.getItem(userCartKey) || '[]');\n\n      // Add only available items to cart\n      let addedItems = 0;\n\n      // Process each item to order\n      this.itemsToOrder.forEach(item => {\n        // Skip if the item is in the unavailable list (it shouldn't be, but double-check)\n        if (this.unavailableItems.includes(item.name)) {\n          console.log(`Skipping unavailable item: ${item.name}`);\n          return;\n        }\n\n        // Check if item already exists in cart\n        const existingItemIndex = cart.findIndex(cartItem => cartItem.name === item.name && cartItem.price === item.price);\n        if (existingItemIndex !== -1) {\n          // If item exists, increase quantity\n          cart[existingItemIndex].quantity += item.quantity;\n          console.log(`Updated quantity for item: ${item.name}`);\n        } else {\n          // If item doesn't exist, add it to cart\n          cart.push(item);\n          console.log(`Added new item to cart: ${item.name}`);\n        }\n        addedItems++;\n      });\n      if (addedItems === 0) {\n        alert('No items could be added to cart.');\n        return;\n      }\n\n      // Save updated cart to localStorage with user-specific key\n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      console.log(`Saved ${addedItems} items to cart`);\n\n      // Show success message\n      this.showSuccessMessage = true;\n\n      // Hide success message after 3 seconds\n      setTimeout(() => {\n        this.showSuccessMessage = false;\n        // Navigate to the ConfirmOrder page\n        this.$router.push({\n          name: 'ConfirmOrder'\n        });\n      }, 1500);\n    },\n    async orderAgain() {\n      // First check if the items are available in stock\n      try {\n        // Fetch stock information from the backend\n        const response = await fetch('http://localhost:8000/api/stocks');\n        const stocksData = await response.json();\n        if (!stocksData.success) {\n          console.error('Failed to fetch stock information');\n          alert('Unable to verify item availability. Please try again later.');\n          return;\n        }\n\n        // Also need to fetch items to get their IDs\n        const itemsResponse = await fetch('http://localhost:8000/api/items');\n        const itemsData = await itemsResponse.json();\n        if (!itemsData.items) {\n          console.error('Failed to fetch items');\n          alert('Unable to verify item availability. Please try again later.');\n          return;\n        }\n\n        // Store the complete menu items for lookup\n        this.menuItems = itemsData.items;\n\n        // Create lookup maps for easier access\n        this.stockMap = stocksData.items.reduce((map, stock) => {\n          map[stock.item_id] = stock;\n          return map;\n        }, {});\n\n        // Clear previous data\n        this.unavailableItems = [];\n        this.itemsToOrder = [];\n        console.log(\"Checking availability for items:\", this.items);\n        console.log(\"Available menu items:\", this.menuItems.map(i => i.name));\n        console.log(\"Stock data:\", stocksData.items);\n\n        // Check each item's availability and prepare data\n        for (const orderItem of this.items) {\n          // Case-insensitive lookup\n          const menuItem = this.findItemInMenu(orderItem.name);\n          console.log(`Checking item: ${orderItem.name}, found in menu:`, menuItem);\n\n          // If item doesn't exist in the menu anymore\n          if (!menuItem) {\n            console.log(`Item not found in menu: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n\n          // Check if item is disabled in the database (if available property exists)\n          if (Object.prototype.hasOwnProperty.call(menuItem, 'available') && menuItem.available === false) {\n            console.log(`Item is disabled in menu: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          const stock = this.stockMap[menuItem.id];\n          console.log(`Stock for ${orderItem.name}:`, stock);\n\n          // If item has no stock record or quantity is 0\n          if (!stock || stock.quantity === 0) {\n            console.log(`Item out of stock: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n\n          // Check if stock is sufficient\n          if (stock.quantity < orderItem.quantity) {\n            console.log(`Not enough stock for ${orderItem.name}: required ${orderItem.quantity}, available ${stock.quantity}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n\n          // Item is available, add to items to order\n          console.log(`Item available: ${orderItem.name}`);\n          this.itemsToOrder.push({\n            id: menuItem.id,\n            name: orderItem.name,\n            price: orderItem.price,\n            image: orderItem.image,\n            quantity: orderItem.quantity\n          });\n        }\n\n        // Double-check against any matching names that might be unavailable \n        // in case our item lookup missed something\n        for (const item of this.items) {\n          // Check if this item already marked as unavailable\n          if (this.unavailableItems.includes(item.name)) {\n            continue;\n          }\n\n          // Find exact match for Matcha Frappe and other items that might be problematic\n          const exactNameMatches = this.menuItems.filter(menuItem => menuItem.name.toLowerCase().trim() === item.name.toLowerCase().trim());\n\n          // If matches exist, check if they're all unavailable\n          if (exactNameMatches.length > 0) {\n            const allUnavailable = exactNameMatches.every(menuItem => {\n              const stock = this.stockMap[menuItem.id];\n              return !stock || stock.quantity === 0 || Object.prototype.hasOwnProperty.call(menuItem, 'available') && menuItem.available === false;\n            });\n            if (allUnavailable) {\n              console.log(`Found item exact match as unavailable: ${item.name}`);\n              this.unavailableItems.push(item.name);\n              // Remove from itemsToOrder if it was added\n              this.itemsToOrder = this.itemsToOrder.filter(i => i.name !== item.name);\n            }\n          }\n        }\n        console.log(\"Unavailable items:\", this.unavailableItems);\n        console.log(\"Items to order:\", this.itemsToOrder);\n\n        // If there are unavailable items, show the modal\n        if (this.unavailableItems.length > 0) {\n          // If all items are unavailable\n          if (this.unavailableItems.length === this.items.length) {\n            alert('All items in this order are currently unavailable.');\n            return;\n          }\n\n          // Show modal with unavailable items\n          this.showUnavailableModal = true;\n        } else {\n          // If all items are available, add them to cart immediately\n          this.addItemsToCart();\n        }\n      } catch (error) {\n        console.error('Error checking item availability:', error);\n        alert('An error occurred while checking item availability. Please try again later.');\n      }\n    },\n    // Helper function to find an item in the menu\n    findItemInMenu(itemName, items = null) {\n      const menuItems = items || this.menuItems;\n      if (!menuItems) return null;\n\n      // Normalize the name for comparison (trim whitespace, lowercase)\n      const normalizedName = itemName.toLowerCase().trim();\n\n      // Case insensitive search\n      return menuItems.find(item => item.name.toLowerCase().trim() === normalizedName);\n    }\n  }\n};","map":{"version":3,"names":["name","data","items","parseItems","$route","query","orderId","customerName","showSuccessMessage","unavailableItems","showUnavailableModal","itemsToOrder","itemMap","stockMap","menuItems","methods","JSON","parse","error","console","goBackToHistory","$router","push","calculateTotal","Array","isArray","reduce","sum","item","price","quantity","toFixed","getImagePath","image","require","startsWith","includes","parts","split","filename","length","fixedPath","log","getItemByName","find","removeFromOrder","itemName","filter","itemToAdd","menuItem","findItemInMenu","stock","id","quantityToAdd","Math","min","alert","addItemsToCart","closeUnavailableModal","proceedWithAvailable","userName","localStorage","getItem","userCartKey","cart","addedItems","forEach","existingItemIndex","findIndex","cartItem","setItem","stringify","setTimeout","orderAgain","response","fetch","stocksData","json","success","itemsResponse","itemsData","map","item_id","i","orderItem","Object","prototype","hasOwnProperty","call","available","exactNameMatches","toLowerCase","trim","allUnavailable","every","normalizedName"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\OrderDetails.vue"],"sourcesContent":["<template>\n  <div class=\"order-container\">\n    <div class=\"order-card\">\n      <h1>Order Details</h1>\n      \n      <div class=\"order-info\">\n        <div class=\"order-header\">\n          <div class=\"order-header-item\">\n            <span class=\"label\">Order ID:</span>\n            <span class=\"value\">{{ orderId }}</span>\n          </div>\n          <div class=\"order-header-item\">\n            <span class=\"label\">Customer:</span>\n            <span class=\"value\">{{ customerName }}</span>\n          </div>\n        </div>\n        \n        <div class=\"order-items-list\">\n          <h2>Items</h2>\n          <table class=\"items-table\">\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>Item</th>\n                <th>Quantity</th>\n                <th>Price</th>\n                <th>Subtotal</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in items\" :key=\"index\">\n                <td class=\"item-image-cell\">\n                  <img :src=\"getImagePath(item)\" :alt=\"item.name\" class=\"item-image\"/>\n                </td>\n                <td>{{ item.name }}</td>\n                <td>{{ item.quantity }}</td>\n                <td>₱{{ item.price.toFixed(2) }}</td>\n                <td>₱{{ (item.price * item.quantity).toFixed(2) }}</td>\n              </tr>\n            </tbody>\n            <tfoot>\n              <tr>\n                <td colspan=\"4\" class=\"total-label\">Total</td>\n                <td class=\"total-value\">₱{{ calculateTotal() }}</td>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </div>\n\n      <div class=\"button-container\">\n        <button @click=\"goBackToHistory\" class=\"back-button\">Back to Order History</button>\n        <button @click=\"orderAgain\" class=\"order-again-button\">Order Again</button>\n      </div>\n      \n      <!-- Success Message -->\n      <div v-if=\"showSuccessMessage\" class=\"success-message\">\n        <p>Items added to cart successfully!</p>\n      </div>\n    </div>\n\n    <!-- Unavailable Items Modal -->\n    <div v-if=\"showUnavailableModal\" class=\"modal-overlay\">\n      <div class=\"unavailable-modal\">\n        <h2>Some Items Are Unavailable</h2>\n        <p>The following items from your order are currently unavailable:</p>\n        \n        <div class=\"unavailable-items-list\">\n          <div v-for=\"(item, index) in unavailableItems\" :key=\"index\" class=\"unavailable-item\">\n            <img :src=\"getImagePath(getItemByName(item))\" :alt=\"item\" class=\"small-item-image\"/>\n            <span class=\"item-name\">{{ item }}</span>\n            <span class=\"unavailable-badge\">UNAVAILABLE</span>\n            <button @click=\"removeFromOrder(item)\" class=\"remove-item-btn\">Remove</button>\n          </div>\n        </div>\n        \n        <div class=\"modal-actions\">\n          <button @click=\"closeUnavailableModal\" class=\"cancel-btn\">Cancel</button>\n          <button @click=\"proceedWithAvailable\" class=\"proceed-btn\">Proceed with Available Items</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'OrderDetails',\n  data() {\n    return {\n      items: this.parseItems(this.$route.query.items),\n      orderId: this.$route.query.orderId,\n      customerName: this.$route.query.customerName,\n      showSuccessMessage: false,\n      unavailableItems: [], // Track unavailable items\n      showUnavailableModal: false, // Control modal visibility\n      itemsToOrder: [], // Items to add to cart after filtering\n      itemMap: {}, // Store item details keyed by name\n      stockMap: {}, // Store stock details keyed by item ID\n      menuItems: [] // Store the complete menu items for lookup\n    };\n  },\n  methods: {\n    parseItems(items) {\n      try {\n        return JSON.parse(items) || [];\n      } catch (error) {\n        console.error(\"Error parsing order items:\", error);\n        return [];\n      }\n    },\n    \n    goBackToHistory() {\n      this.$router.push({ name: \"OrderHistory\" });\n    },\n\n    calculateTotal() {\n      if (!Array.isArray(this.items)) return \"0\";\n      return this.items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n\n    getImagePath(item) {\n      try {\n        // If no item or no image path, return default image\n        if (!item || !item.image) {\n          return require('@/assets/default.png');\n        }\n\n        // If it's already a full URL (including inventory system on localhost:8001)\n        if (item.image.startsWith('http://') || item.image.startsWith('https://')) {\n          // Check if this is an inventory image that needs to be fixed\n          if (item.image.includes('localhost:8001')) {\n            // Check if the path needs to be fixed - it should point to /uploads/products/\n            if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n              // Extract the filename\n              const parts = item.image.split('/');\n              const filename = parts[parts.length - 1];\n              const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n              console.log('Fixed inventory image path:', fixedPath);\n              return fixedPath;\n            }\n          }\n          return item.image;\n        }\n        \n        // Handle inventory system images\n        if (item.image.includes('localhost:8001')) {\n          // Same fix as above if needed\n          if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n            const parts = item.image.split('/');\n            const filename = parts[parts.length - 1];\n            return `http://localhost:8001/uploads/products/${filename}`;\n          }\n          return item.image;\n        }\n\n        // If it's a backend upload path\n        if (item.image.startsWith('/uploads/')) {\n          return `http://localhost:8000${item.image}`;\n        }\n\n        // If it's just a filename, try to load from assets\n        try {\n          return require(`@/assets/${item.image}`);\n        } catch (error) {\n          console.log('Failed to load image from assets, trying uploads folder');\n          // If not found in assets, try backend uploads\n          return `http://localhost:8000/uploads/avatars/${item.image}`;\n        }\n      } catch (error) {\n        console.error('Error in getImagePath:', error);\n        return require('@/assets/default.png');\n      }\n    },\n\n    // Get item object by name from the original items array\n    getItemByName(name) {\n      return this.items.find(item => item.name === name) || {};\n    },\n\n    // Remove an item from the unavailable items list and proceed\n    removeFromOrder(itemName) {\n      // Remove the item from the unavailable items array\n      this.unavailableItems = this.unavailableItems.filter(name => name !== itemName);\n      \n      // Find the corresponding original item to add to the order\n      const itemToAdd = this.items.find(item => item.name === itemName);\n      \n      if (itemToAdd) {\n        // Find the menu item to get its ID\n        const menuItem = this.findItemInMenu(itemToAdd.name);\n        \n        if (menuItem) {\n          // Get stock information\n          const stock = this.stockMap[menuItem.id];\n          \n          // Only add if there's actually some stock available\n          // (user might be removing from the modal but the item is still unavailable)\n          if (stock && stock.quantity > 0) {\n            // Use the available quantity if it's less than what was ordered\n            const quantityToAdd = Math.min(itemToAdd.quantity, stock.quantity);\n            \n            // Add it to the items to order\n            this.itemsToOrder.push({\n              id: menuItem.id,\n              name: itemToAdd.name,\n              price: itemToAdd.price,\n              image: itemToAdd.image,\n              quantity: quantityToAdd\n            });\n            \n            // If we couldn't add the full quantity, let the user know\n            if (quantityToAdd < itemToAdd.quantity) {\n              alert(`Only ${quantityToAdd} units of ${itemToAdd.name} are available.`);\n            }\n          } else {\n            // If still no stock, inform the user\n            alert(`${itemToAdd.name} is still unavailable.`);\n          }\n        }\n      }\n      \n      // If all unavailable items have been removed, close the modal and proceed\n      if (this.unavailableItems.length === 0) {\n        this.showUnavailableModal = false;\n        this.addItemsToCart();\n      }\n    },\n\n    // Close the unavailable items modal without proceeding\n    closeUnavailableModal() {\n      this.showUnavailableModal = false;\n    },\n\n    // Proceed with only available items\n    proceedWithAvailable() {\n      this.showUnavailableModal = false;\n      this.addItemsToCart();\n    },\n\n    // Add filtered items to cart and navigate to confirm order\n    addItemsToCart() {\n      const userName = localStorage.getItem('userName') || 'Guest';\n      const userCartKey = `cart_${userName}`;\n      \n      // Get existing cart from localStorage or initialize empty array\n      let cart = JSON.parse(localStorage.getItem(userCartKey) || '[]');\n      \n      // Add only available items to cart\n      let addedItems = 0;\n      \n      // Process each item to order\n      this.itemsToOrder.forEach(item => {\n        // Skip if the item is in the unavailable list (it shouldn't be, but double-check)\n        if (this.unavailableItems.includes(item.name)) {\n          console.log(`Skipping unavailable item: ${item.name}`);\n          return;\n        }\n        \n        // Check if item already exists in cart\n        const existingItemIndex = cart.findIndex(cartItem => \n          cartItem.name === item.name && \n          cartItem.price === item.price\n        );\n        \n        if (existingItemIndex !== -1) {\n          // If item exists, increase quantity\n          cart[existingItemIndex].quantity += item.quantity;\n          console.log(`Updated quantity for item: ${item.name}`);\n        } else {\n          // If item doesn't exist, add it to cart\n          cart.push(item);\n          console.log(`Added new item to cart: ${item.name}`);\n        }\n        \n        addedItems++;\n      });\n      \n      if (addedItems === 0) {\n        alert('No items could be added to cart.');\n        return;\n      }\n      \n      // Save updated cart to localStorage with user-specific key\n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      console.log(`Saved ${addedItems} items to cart`);\n      \n      // Show success message\n      this.showSuccessMessage = true;\n      \n      // Hide success message after 3 seconds\n      setTimeout(() => {\n        this.showSuccessMessage = false;\n        // Navigate to the ConfirmOrder page\n        this.$router.push({ name: 'ConfirmOrder' });\n      }, 1500);\n    },\n\n    async orderAgain() {\n      // First check if the items are available in stock\n      try {\n        // Fetch stock information from the backend\n        const response = await fetch('http://localhost:8000/api/stocks');\n        const stocksData = await response.json();\n        \n        if (!stocksData.success) {\n          console.error('Failed to fetch stock information');\n          alert('Unable to verify item availability. Please try again later.');\n          return;\n        }\n        \n        // Also need to fetch items to get their IDs\n        const itemsResponse = await fetch('http://localhost:8000/api/items');\n        const itemsData = await itemsResponse.json();\n        \n        if (!itemsData.items) {\n          console.error('Failed to fetch items');\n          alert('Unable to verify item availability. Please try again later.');\n          return;\n        }\n        \n        // Store the complete menu items for lookup\n        this.menuItems = itemsData.items;\n        \n        // Create lookup maps for easier access\n        this.stockMap = stocksData.items.reduce((map, stock) => {\n          map[stock.item_id] = stock;\n          return map;\n        }, {});\n        \n        // Clear previous data\n        this.unavailableItems = [];\n        this.itemsToOrder = [];\n        \n        console.log(\"Checking availability for items:\", this.items);\n        console.log(\"Available menu items:\", this.menuItems.map(i => i.name));\n        console.log(\"Stock data:\", stocksData.items);\n        \n        // Check each item's availability and prepare data\n        for (const orderItem of this.items) {\n          // Case-insensitive lookup\n          const menuItem = this.findItemInMenu(orderItem.name);\n          \n          console.log(`Checking item: ${orderItem.name}, found in menu:`, menuItem);\n          \n          // If item doesn't exist in the menu anymore\n          if (!menuItem) {\n            console.log(`Item not found in menu: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          // Check if item is disabled in the database (if available property exists)\n          if (Object.prototype.hasOwnProperty.call(menuItem, 'available') && menuItem.available === false) {\n            console.log(`Item is disabled in menu: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          const stock = this.stockMap[menuItem.id];\n          console.log(`Stock for ${orderItem.name}:`, stock);\n          \n          // If item has no stock record or quantity is 0\n          if (!stock || stock.quantity === 0) {\n            console.log(`Item out of stock: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          // Check if stock is sufficient\n          if (stock.quantity < orderItem.quantity) {\n            console.log(`Not enough stock for ${orderItem.name}: required ${orderItem.quantity}, available ${stock.quantity}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          // Item is available, add to items to order\n          console.log(`Item available: ${orderItem.name}`);\n          this.itemsToOrder.push({\n            id: menuItem.id,\n            name: orderItem.name,\n            price: orderItem.price,\n            image: orderItem.image,\n            quantity: orderItem.quantity\n          });\n        }\n        \n        // Double-check against any matching names that might be unavailable \n        // in case our item lookup missed something\n        for (const item of this.items) {\n          // Check if this item already marked as unavailable\n          if (this.unavailableItems.includes(item.name)) {\n            continue;\n          }\n          \n          // Find exact match for Matcha Frappe and other items that might be problematic\n          const exactNameMatches = this.menuItems.filter(menuItem => \n            menuItem.name.toLowerCase().trim() === item.name.toLowerCase().trim()\n          );\n          \n          // If matches exist, check if they're all unavailable\n          if (exactNameMatches.length > 0) {\n            const allUnavailable = exactNameMatches.every(menuItem => {\n              const stock = this.stockMap[menuItem.id];\n              return !stock || stock.quantity === 0 || \n                    (Object.prototype.hasOwnProperty.call(menuItem, 'available') && menuItem.available === false);\n            });\n            \n            if (allUnavailable) {\n              console.log(`Found item exact match as unavailable: ${item.name}`);\n              this.unavailableItems.push(item.name);\n              // Remove from itemsToOrder if it was added\n              this.itemsToOrder = this.itemsToOrder.filter(i => i.name !== item.name);\n            }\n          }\n        }\n        \n        console.log(\"Unavailable items:\", this.unavailableItems);\n        console.log(\"Items to order:\", this.itemsToOrder);\n        \n        // If there are unavailable items, show the modal\n        if (this.unavailableItems.length > 0) {\n          // If all items are unavailable\n          if (this.unavailableItems.length === this.items.length) {\n            alert('All items in this order are currently unavailable.');\n            return;\n          }\n          \n          // Show modal with unavailable items\n          this.showUnavailableModal = true;\n        } else {\n          // If all items are available, add them to cart immediately\n          this.addItemsToCart();\n        }\n      } catch (error) {\n        console.error('Error checking item availability:', error);\n        alert('An error occurred while checking item availability. Please try again later.');\n      }\n    },\n    \n    // Helper function to find an item in the menu\n    findItemInMenu(itemName, items = null) {\n      const menuItems = items || this.menuItems;\n      if (!menuItems) return null;\n      \n      // Normalize the name for comparison (trim whitespace, lowercase)\n      const normalizedName = itemName.toLowerCase().trim();\n      \n      // Case insensitive search\n      return menuItems.find(item => \n        item.name.toLowerCase().trim() === normalizedName\n      );\n    }\n  },\n};\n</script>\n\n<style scoped>\n.order-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #1e1e2f, #3a3a52);\n  color: white;\n  padding: 20px;\n}\n\n.order-card {\n  background: rgba(255, 255, 255, 0.1);\n  padding: 30px;\n  border-radius: 15px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n  text-align: center;\n  width: 90%;\n  max-width: 800px;\n  backdrop-filter: blur(10px);\n  position: relative;\n}\n\nh1 {\n  font-size: 28px;\n  margin-bottom: 20px;\n  color: rgb(216, 144, 178);\n}\n\nh2 {\n  font-size: 22px;\n  margin-bottom: 15px;\n  color: rgb(216, 144, 178);\n  text-align: left;\n}\n\n.order-header {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 15px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 10px;\n}\n\n.order-header-item {\n  margin: 5px 10px;\n  text-align: left;\n}\n\n.label {\n  font-weight: bold;\n  color: #aaa;\n  margin-right: 5px;\n}\n\n.value {\n  color: rgb(236, 155, 225);\n  font-weight: bold;\n}\n\n.order-items-list {\n  margin-top: 20px;\n  text-align: left;\n}\n\n.items-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n  margin-bottom: 20px;\n}\n\n.items-table th,\n.items-table td {\n  padding: 12px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  text-align: left;\n  vertical-align: middle;\n}\n\n.items-table th {\n  background: rgba(216, 144, 178, 0.2);\n  color: rgb(236, 155, 225);\n}\n\n.item-image-cell {\n  width: 80px;\n  text-align: center;\n}\n\n.item-image {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 8px;\n}\n\n.total-label {\n  text-align: right;\n  font-weight: bold;\n  color: #fff;\n}\n\n.total-value {\n  font-weight: bold;\n  color: #ff9800;\n}\n\n.button-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.back-button, .order-again-button {\n  padding: 12px 25px;\n  font-size: 14px;\n  font-weight: bold;\n  background: transparent;\n  color: #fff;\n  border: 2px solid rgb(235, 172, 216);\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  transition: 0.3s;\n  width: 48%;\n}\n\n.back-button::before, .order-again-button::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, #ffeb3b, #ff9800, #ffeb3b);\n  transition: 0.3s;\n  z-index: -1;\n}\n\n.back-button:hover::before, .order-again-button:hover::before {\n  left: 0;\n}\n\n.back-button:hover, .order-again-button:hover {\n  background: rgba(255, 235, 59, 0.3);\n  border-color: #ff9800;\n}\n\n.order-again-button {\n  background-color: rgba(216, 144, 178, 0.2);\n  border-color: rgb(216, 144, 178);\n}\n\n.order-again-button::before {\n  background: linear-gradient(90deg, #ff9800, #ff5722, #ff9800);\n}\n\n.success-message {\n  position: absolute;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  background-color: rgba(76, 175, 80, 0.8);\n  color: white;\n  padding: 10px;\n  border-radius: 5px;\n  margin: 0 auto;\n  width: 80%;\n  animation: fadeIn 0.5s;\n}\n\n/* Modal styles */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  animation: fadeIn 0.3s;\n}\n\n.unavailable-modal {\n  background-color: #2a2a42;\n  border-radius: 15px;\n  padding: 25px;\n  width: 90%;\n  max-width: 600px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  text-align: center;\n}\n\n.unavailable-modal h2 {\n  color: #ff5252;\n  text-align: center;\n  margin-bottom: 15px;\n}\n\n.unavailable-modal p {\n  color: #ddd;\n  margin-bottom: 20px;\n}\n\n.unavailable-items-list {\n  max-height: 300px;\n  overflow-y: auto;\n  margin-bottom: 20px;\n}\n\n.unavailable-item {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.05);\n  margin-bottom: 10px;\n  border-radius: 8px;\n  position: relative;\n}\n\n.small-item-image {\n  width: 40px;\n  height: 40px;\n  border-radius: 6px;\n  margin-right: 12px;\n  object-fit: cover;\n}\n\n.item-name {\n  flex-grow: 1;\n  text-align: left;\n  margin-right: 10px;\n}\n\n.unavailable-badge {\n  background-color: #ff5252;\n  color: white;\n  font-size: 12px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.remove-item-btn {\n  background-color: transparent;\n  border: 1px solid #ff9800;\n  color: #ff9800;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.remove-item-btn:hover {\n  background-color: #ff9800;\n  color: #000;\n}\n\n.modal-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.cancel-btn, .proceed-btn {\n  padding: 12px 20px;\n  border-radius: 8px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.3s;\n  width: 48%;\n}\n\n.cancel-btn {\n  background-color: transparent;\n  border: 2px solid #aaa;\n  color: #ddd;\n}\n\n.cancel-btn:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.proceed-btn {\n  background-color: #8e24aa;\n  border: none;\n  color: white;\n}\n\n.proceed-btn:hover {\n  background-color: #6a1b9a;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .order-card {\n    padding: 20px;\n    width: 95%;\n  }\n  \n  .items-table th,\n  .items-table td {\n    padding: 8px;\n    font-size: 14px;\n  }\n  \n  .item-image {\n    width: 40px;\n    height: 40px;\n  }\n  \n  h1 {\n    font-size: 24px;\n  }\n  \n  h2 {\n    font-size: 20px;\n  }\n  \n  .button-container {\n    flex-direction: column;\n  }\n  \n  .back-button, .order-again-button {\n    width: 100%;\n    margin-bottom: 10px;\n  }\n  \n  .unavailable-modal {\n    width: 95%;\n    padding: 15px;\n  }\n  \n  .modal-actions {\n    flex-direction: column;\n  }\n  \n  .cancel-btn, .proceed-btn {\n    width: 100%;\n    margin-bottom: 10px;\n  }\n}\n\n@media (max-width: 480px) {\n  .items-table {\n    font-size: 12px;\n  }\n  \n  .items-table th,\n  .items-table td {\n    padding: 6px;\n  }\n  \n  .item-image {\n    width: 30px;\n    height: 30px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}