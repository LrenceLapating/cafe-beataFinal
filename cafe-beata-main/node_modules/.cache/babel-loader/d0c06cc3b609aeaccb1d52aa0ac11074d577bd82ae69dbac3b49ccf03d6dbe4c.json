{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"order-container\"\n};\nconst _hoisted_2 = {\n  class: \"order-card\"\n};\nconst _hoisted_3 = {\n  class: \"order-info\"\n};\nconst _hoisted_4 = {\n  class: \"order-header\"\n};\nconst _hoisted_5 = {\n  class: \"order-header-item\"\n};\nconst _hoisted_6 = {\n  class: \"value\"\n};\nconst _hoisted_7 = {\n  class: \"order-header-item\"\n};\nconst _hoisted_8 = {\n  class: \"value\"\n};\nconst _hoisted_9 = {\n  class: \"order-items-list\"\n};\nconst _hoisted_10 = {\n  class: \"items-table\"\n};\nconst _hoisted_11 = {\n  class: \"item-image-cell\"\n};\nconst _hoisted_12 = [\"src\", \"alt\"];\nconst _hoisted_13 = {\n  class: \"total-value\"\n};\nconst _hoisted_14 = {\n  class: \"button-container\"\n};\nconst _hoisted_15 = {\n  key: 0,\n  class: \"success-message\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"modal-overlay\"\n};\nconst _hoisted_17 = {\n  class: \"unavailable-modal\"\n};\nconst _hoisted_18 = {\n  class: \"unavailable-items-list\"\n};\nconst _hoisted_19 = [\"src\", \"alt\"];\nconst _hoisted_20 = {\n  class: \"item-name\"\n};\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = {\n  class: \"modal-actions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[10] || (_cache[10] = _createElementVNode(\"h1\", null, \"Order Details\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[4] || (_cache[4] = _createElementVNode(\"span\", {\n    class: \"label\"\n  }, \"Order ID:\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($data.orderId), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n    class: \"label\"\n  }, \"Customer:\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_8, _toDisplayString($data.customerName), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_9, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Items\", -1 /* HOISTED */)), _createElementVNode(\"table\", _hoisted_10, [_cache[7] || (_cache[7] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Image\"), _createElementVNode(\"th\", null, \"Item\"), _createElementVNode(\"th\", null, \"Quantity\"), _createElementVNode(\"th\", null, \"Price\"), _createElementVNode(\"th\", null, \"Subtotal\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", _hoisted_11, [_createElementVNode(\"img\", {\n      src: $options.getImagePath(item),\n      alt: item.name,\n      class: \"item-image\"\n    }, null, 8 /* PROPS */, _hoisted_12)]), _createElementVNode(\"td\", null, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.quantity), 1 /* TEXT */), _createElementVNode(\"td\", null, \"₱\" + _toDisplayString(item.price.toFixed(2)), 1 /* TEXT */), _createElementVNode(\"td\", null, \"₱\" + _toDisplayString((item.price * item.quantity).toFixed(2)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"tfoot\", null, [_createElementVNode(\"tr\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"td\", {\n    colspan: \"4\",\n    class: \"total-label\"\n  }, \"Total\", -1 /* HOISTED */)), _createElementVNode(\"td\", _hoisted_13, \"₱\" + _toDisplayString($options.calculateTotal()), 1 /* TEXT */)])])])])]), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goBackToHistory && $options.goBackToHistory(...args)),\n    class: \"back-button\"\n  }, \"Back to Order History\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.orderAgain && $options.orderAgain(...args)),\n    class: \"order-again-button\"\n  }, \"Order Again\")]), _createCommentVNode(\" Success Message \"), $data.showSuccessMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _cache[9] || (_cache[9] = [_createElementVNode(\"p\", null, \"Items added to cart successfully!\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Unavailable Items Modal \"), $data.showUnavailableModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_cache[12] || (_cache[12] = _createElementVNode(\"h2\", null, \"Some Items Are Unavailable\", -1 /* HOISTED */)), _cache[13] || (_cache[13] = _createElementVNode(\"p\", null, \"The following items from your order are currently unavailable:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_18, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.unavailableItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"unavailable-item\"\n    }, [_createElementVNode(\"img\", {\n      src: $options.getImagePath($options.getItemByName(item)),\n      alt: item,\n      class: \"small-item-image\"\n    }, null, 8 /* PROPS */, _hoisted_19), _createElementVNode(\"span\", _hoisted_20, _toDisplayString(item), 1 /* TEXT */), _cache[11] || (_cache[11] = _createElementVNode(\"span\", {\n      class: \"unavailable-badge\"\n    }, \"UNAVAILABLE\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n      onClick: $event => $options.removeFromOrder(item),\n      class: \"remove-item-btn\"\n    }, \"Remove\", 8 /* PROPS */, _hoisted_21)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.closeUnavailableModal && $options.closeUnavailableModal(...args)),\n    class: \"cancel-btn\"\n  }, \"Cancel\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.proceedWithAvailable && $options.proceedWithAvailable(...args)),\n    class: \"proceed-btn\"\n  }, \"Proceed with Available Items\")])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","$data","orderId","_hoisted_7","_hoisted_8","customerName","_hoisted_9","_hoisted_10","_Fragment","_renderList","items","item","index","_hoisted_11","src","$options","getImagePath","alt","name","_hoisted_12","quantity","price","toFixed","colspan","_hoisted_13","calculateTotal","_hoisted_14","onClick","_cache","args","goBackToHistory","orderAgain","_createCommentVNode","showSuccessMessage","_hoisted_15","showUnavailableModal","_hoisted_16","_hoisted_17","_hoisted_18","unavailableItems","getItemByName","_hoisted_19","_hoisted_20","$event","removeFromOrder","_hoisted_21","_hoisted_22","closeUnavailableModal","proceedWithAvailable"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\OrderDetails.vue"],"sourcesContent":["<template>\n  <div class=\"order-container\">\n    <div class=\"order-card\">\n      <h1>Order Details</h1>\n      \n      <div class=\"order-info\">\n        <div class=\"order-header\">\n          <div class=\"order-header-item\">\n            <span class=\"label\">Order ID:</span>\n            <span class=\"value\">{{ orderId }}</span>\n          </div>\n          <div class=\"order-header-item\">\n            <span class=\"label\">Customer:</span>\n            <span class=\"value\">{{ customerName }}</span>\n          </div>\n        </div>\n        \n        <div class=\"order-items-list\">\n          <h2>Items</h2>\n          <table class=\"items-table\">\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>Item</th>\n                <th>Quantity</th>\n                <th>Price</th>\n                <th>Subtotal</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in items\" :key=\"index\">\n                <td class=\"item-image-cell\">\n                  <img :src=\"getImagePath(item)\" :alt=\"item.name\" class=\"item-image\"/>\n                </td>\n                <td>{{ item.name }}</td>\n                <td>{{ item.quantity }}</td>\n                <td>₱{{ item.price.toFixed(2) }}</td>\n                <td>₱{{ (item.price * item.quantity).toFixed(2) }}</td>\n              </tr>\n            </tbody>\n            <tfoot>\n              <tr>\n                <td colspan=\"4\" class=\"total-label\">Total</td>\n                <td class=\"total-value\">₱{{ calculateTotal() }}</td>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </div>\n\n      <div class=\"button-container\">\n        <button @click=\"goBackToHistory\" class=\"back-button\">Back to Order History</button>\n        <button @click=\"orderAgain\" class=\"order-again-button\">Order Again</button>\n      </div>\n      \n      <!-- Success Message -->\n      <div v-if=\"showSuccessMessage\" class=\"success-message\">\n        <p>Items added to cart successfully!</p>\n      </div>\n    </div>\n\n    <!-- Unavailable Items Modal -->\n    <div v-if=\"showUnavailableModal\" class=\"modal-overlay\">\n      <div class=\"unavailable-modal\">\n        <h2>Some Items Are Unavailable</h2>\n        <p>The following items from your order are currently unavailable:</p>\n        \n        <div class=\"unavailable-items-list\">\n          <div v-for=\"(item, index) in unavailableItems\" :key=\"index\" class=\"unavailable-item\">\n            <img :src=\"getImagePath(getItemByName(item))\" :alt=\"item\" class=\"small-item-image\"/>\n            <span class=\"item-name\">{{ item }}</span>\n            <span class=\"unavailable-badge\">UNAVAILABLE</span>\n            <button @click=\"removeFromOrder(item)\" class=\"remove-item-btn\">Remove</button>\n          </div>\n        </div>\n        \n        <div class=\"modal-actions\">\n          <button @click=\"closeUnavailableModal\" class=\"cancel-btn\">Cancel</button>\n          <button @click=\"proceedWithAvailable\" class=\"proceed-btn\">Proceed with Available Items</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'OrderDetails',\n  data() {\n    return {\n      items: this.parseItems(this.$route.query.items),\n      orderId: this.$route.query.orderId,\n      customerName: this.$route.query.customerName,\n      showSuccessMessage: false,\n      unavailableItems: [], // Track unavailable items\n      showUnavailableModal: false, // Control modal visibility\n      itemsToOrder: [], // Items to add to cart after filtering\n      itemMap: {}, // Store item details keyed by name\n      stockMap: {}, // Store stock details keyed by item ID\n      menuItems: [] // Store the complete menu items for lookup\n    };\n  },\n  methods: {\n    parseItems(items) {\n      try {\n        return JSON.parse(items) || [];\n      } catch (error) {\n        console.error(\"Error parsing order items:\", error);\n        return [];\n      }\n    },\n    \n    goBackToHistory() {\n      this.$router.push({ name: \"OrderHistory\" });\n    },\n\n    calculateTotal() {\n      if (!Array.isArray(this.items)) return \"0\";\n      return this.items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n    },\n\n    getImagePath(item) {\n      try {\n        // If no item or no image path, return default image\n        if (!item || !item.image) {\n          return require('@/assets/default.png');\n        }\n\n        // If it's already a full URL (including inventory system on localhost:8001)\n        if (item.image.startsWith('http://') || item.image.startsWith('https://')) {\n          // Check if this is an inventory image that needs to be fixed\n          if (item.image.includes('localhost:8001')) {\n            // Check if the path needs to be fixed - it should point to /uploads/products/\n            if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n              // Extract the filename\n              const parts = item.image.split('/');\n              const filename = parts[parts.length - 1];\n              const fixedPath = `http://localhost:8001/uploads/products/${filename}`;\n              console.log('Fixed inventory image path:', fixedPath);\n              return fixedPath;\n            }\n          }\n          return item.image;\n        }\n        \n        // Handle inventory system images\n        if (item.image.includes('localhost:8001')) {\n          // Same fix as above if needed\n          if (item.image.includes('/uploads/') && !item.image.includes('/uploads/products/')) {\n            const parts = item.image.split('/');\n            const filename = parts[parts.length - 1];\n            return `http://localhost:8001/uploads/products/${filename}`;\n          }\n          return item.image;\n        }\n\n        // If it's a backend upload path\n        if (item.image.startsWith('/uploads/')) {\n          return `http://localhost:8000${item.image}`;\n        }\n\n        // If it's just a filename, try to load from assets\n        try {\n          return require(`@/assets/${item.image}`);\n        } catch (error) {\n          console.log('Failed to load image from assets, trying uploads folder');\n          // If not found in assets, try backend uploads\n          return `http://localhost:8000/uploads/avatars/${item.image}`;\n        }\n      } catch (error) {\n        console.error('Error in getImagePath:', error);\n        return require('@/assets/default.png');\n      }\n    },\n\n    // Get item object by name from the original items array\n    getItemByName(name) {\n      return this.items.find(item => item.name === name) || {};\n    },\n\n    // Remove an item from the unavailable items list and proceed\n    removeFromOrder(itemName) {\n      // Remove the item from the unavailable items array\n      this.unavailableItems = this.unavailableItems.filter(name => name !== itemName);\n      \n      // Find the corresponding original item to add to the order\n      const itemToAdd = this.items.find(item => item.name === itemName);\n      \n      if (itemToAdd) {\n        // Find the menu item to get its ID\n        const menuItem = this.findItemInMenu(itemToAdd.name);\n        \n        if (menuItem) {\n          // Get stock information\n          const stock = this.stockMap[menuItem.id];\n          \n          // Only add if there's actually some stock available\n          // (user might be removing from the modal but the item is still unavailable)\n          if (stock && stock.quantity > 0) {\n            // Use the available quantity if it's less than what was ordered\n            const quantityToAdd = Math.min(itemToAdd.quantity, stock.quantity);\n            \n            // Add it to the items to order\n            this.itemsToOrder.push({\n              id: menuItem.id,\n              name: itemToAdd.name,\n              price: itemToAdd.price,\n              image: itemToAdd.image,\n              quantity: quantityToAdd\n            });\n            \n            // If we couldn't add the full quantity, let the user know\n            if (quantityToAdd < itemToAdd.quantity) {\n              alert(`Only ${quantityToAdd} units of ${itemToAdd.name} are available.`);\n            }\n          } else {\n            // If still no stock, inform the user\n            alert(`${itemToAdd.name} is still unavailable.`);\n          }\n        }\n      }\n      \n      // If all unavailable items have been removed, close the modal and proceed\n      if (this.unavailableItems.length === 0) {\n        this.showUnavailableModal = false;\n        this.addItemsToCart();\n      }\n    },\n\n    // Close the unavailable items modal without proceeding\n    closeUnavailableModal() {\n      this.showUnavailableModal = false;\n    },\n\n    // Proceed with only available items\n    proceedWithAvailable() {\n      this.showUnavailableModal = false;\n      this.addItemsToCart();\n    },\n\n    // Add filtered items to cart and navigate to confirm order\n    addItemsToCart() {\n      const userName = localStorage.getItem('userName') || 'Guest';\n      const userCartKey = `cart_${userName}`;\n      \n      // Get existing cart from localStorage or initialize empty array\n      let cart = JSON.parse(localStorage.getItem(userCartKey) || '[]');\n      \n      // Add only available items to cart\n      let addedItems = 0;\n      \n      // Process each item to order\n      this.itemsToOrder.forEach(item => {\n        // Skip if the item is in the unavailable list (it shouldn't be, but double-check)\n        if (this.unavailableItems.includes(item.name)) {\n          console.log(`Skipping unavailable item: ${item.name}`);\n          return;\n        }\n        \n        // Check if item already exists in cart\n        const existingItemIndex = cart.findIndex(cartItem => \n          cartItem.name === item.name && \n          cartItem.price === item.price\n        );\n        \n        if (existingItemIndex !== -1) {\n          // If item exists, increase quantity\n          cart[existingItemIndex].quantity += item.quantity;\n          console.log(`Updated quantity for item: ${item.name}`);\n        } else {\n          // If item doesn't exist, add it to cart\n          cart.push(item);\n          console.log(`Added new item to cart: ${item.name}`);\n        }\n        \n        addedItems++;\n      });\n      \n      if (addedItems === 0) {\n        alert('No items could be added to cart.');\n        return;\n      }\n      \n      // Save updated cart to localStorage with user-specific key\n      localStorage.setItem(userCartKey, JSON.stringify(cart));\n      console.log(`Saved ${addedItems} items to cart`);\n      \n      // Show success message\n      this.showSuccessMessage = true;\n      \n      // Hide success message after 3 seconds\n      setTimeout(() => {\n        this.showSuccessMessage = false;\n        // Navigate to the ConfirmOrder page\n        this.$router.push({ name: 'ConfirmOrder' });\n      }, 1500);\n    },\n\n    async orderAgain() {\n      // First check if the items are available in stock\n      try {\n        // Fetch stock information from the backend\n        const response = await fetch('http://localhost:8000/api/stocks');\n        const stocksData = await response.json();\n        \n        if (!stocksData.success) {\n          console.error('Failed to fetch stock information');\n          alert('Unable to verify item availability. Please try again later.');\n          return;\n        }\n        \n        // Also need to fetch items to get their IDs\n        const itemsResponse = await fetch('http://localhost:8000/api/items');\n        const itemsData = await itemsResponse.json();\n        \n        if (!itemsData.items) {\n          console.error('Failed to fetch items');\n          alert('Unable to verify item availability. Please try again later.');\n          return;\n        }\n        \n        // Store the complete menu items for lookup\n        this.menuItems = itemsData.items;\n        \n        // Create lookup maps for easier access\n        this.stockMap = stocksData.items.reduce((map, stock) => {\n          map[stock.item_id] = stock;\n          return map;\n        }, {});\n        \n        // Clear previous data\n        this.unavailableItems = [];\n        this.itemsToOrder = [];\n        \n        console.log(\"Checking availability for items:\", this.items);\n        console.log(\"Available menu items:\", this.menuItems.map(i => i.name));\n        console.log(\"Stock data:\", stocksData.items);\n        \n        // Check each item's availability and prepare data\n        for (const orderItem of this.items) {\n          // Case-insensitive lookup\n          const menuItem = this.findItemInMenu(orderItem.name);\n          \n          console.log(`Checking item: ${orderItem.name}, found in menu:`, menuItem);\n          \n          // If item doesn't exist in the menu anymore\n          if (!menuItem) {\n            console.log(`Item not found in menu: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          // Check if item is disabled in the database (if available property exists)\n          if (Object.prototype.hasOwnProperty.call(menuItem, 'available') && menuItem.available === false) {\n            console.log(`Item is disabled in menu: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          const stock = this.stockMap[menuItem.id];\n          console.log(`Stock for ${orderItem.name}:`, stock);\n          \n          // If item has no stock record or quantity is 0\n          if (!stock || stock.quantity === 0) {\n            console.log(`Item out of stock: ${orderItem.name}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          // Check if stock is sufficient\n          if (stock.quantity < orderItem.quantity) {\n            console.log(`Not enough stock for ${orderItem.name}: required ${orderItem.quantity}, available ${stock.quantity}`);\n            this.unavailableItems.push(orderItem.name);\n            continue;\n          }\n          \n          // Item is available, add to items to order\n          console.log(`Item available: ${orderItem.name}`);\n          this.itemsToOrder.push({\n            id: menuItem.id,\n            name: orderItem.name,\n            price: orderItem.price,\n            image: orderItem.image,\n            quantity: orderItem.quantity\n          });\n        }\n        \n        // Double-check against any matching names that might be unavailable \n        // in case our item lookup missed something\n        for (const item of this.items) {\n          // Check if this item already marked as unavailable\n          if (this.unavailableItems.includes(item.name)) {\n            continue;\n          }\n          \n          // Find exact match for Matcha Frappe and other items that might be problematic\n          const exactNameMatches = this.menuItems.filter(menuItem => \n            menuItem.name.toLowerCase().trim() === item.name.toLowerCase().trim()\n          );\n          \n          // If matches exist, check if they're all unavailable\n          if (exactNameMatches.length > 0) {\n            const allUnavailable = exactNameMatches.every(menuItem => {\n              const stock = this.stockMap[menuItem.id];\n              return !stock || stock.quantity === 0 || \n                    (Object.prototype.hasOwnProperty.call(menuItem, 'available') && menuItem.available === false);\n            });\n            \n            if (allUnavailable) {\n              console.log(`Found item exact match as unavailable: ${item.name}`);\n              this.unavailableItems.push(item.name);\n              // Remove from itemsToOrder if it was added\n              this.itemsToOrder = this.itemsToOrder.filter(i => i.name !== item.name);\n            }\n          }\n        }\n        \n        console.log(\"Unavailable items:\", this.unavailableItems);\n        console.log(\"Items to order:\", this.itemsToOrder);\n        \n        // If there are unavailable items, show the modal\n        if (this.unavailableItems.length > 0) {\n          // If all items are unavailable\n          if (this.unavailableItems.length === this.items.length) {\n            alert('All items in this order are currently unavailable.');\n            return;\n          }\n          \n          // Show modal with unavailable items\n          this.showUnavailableModal = true;\n        } else {\n          // If all items are available, add them to cart immediately\n          this.addItemsToCart();\n        }\n      } catch (error) {\n        console.error('Error checking item availability:', error);\n        alert('An error occurred while checking item availability. Please try again later.');\n      }\n    },\n    \n    // Helper function to find an item in the menu\n    findItemInMenu(itemName, items = null) {\n      const menuItems = items || this.menuItems;\n      if (!menuItems) return null;\n      \n      // Normalize the name for comparison (trim whitespace, lowercase)\n      const normalizedName = itemName.toLowerCase().trim();\n      \n      // Case insensitive search\n      return menuItems.find(item => \n        item.name.toLowerCase().trim() === normalizedName\n      );\n    }\n  },\n};\n</script>\n\n<style scoped>\n.order-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #1e1e2f, #3a3a52);\n  color: white;\n  padding: 20px;\n}\n\n.order-card {\n  background: rgba(255, 255, 255, 0.1);\n  padding: 30px;\n  border-radius: 15px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n  text-align: center;\n  width: 90%;\n  max-width: 800px;\n  backdrop-filter: blur(10px);\n  position: relative;\n}\n\nh1 {\n  font-size: 28px;\n  margin-bottom: 20px;\n  color: rgb(216, 144, 178);\n}\n\nh2 {\n  font-size: 22px;\n  margin-bottom: 15px;\n  color: rgb(216, 144, 178);\n  text-align: left;\n}\n\n.order-header {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 15px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 10px;\n}\n\n.order-header-item {\n  margin: 5px 10px;\n  text-align: left;\n}\n\n.label {\n  font-weight: bold;\n  color: #aaa;\n  margin-right: 5px;\n}\n\n.value {\n  color: rgb(236, 155, 225);\n  font-weight: bold;\n}\n\n.order-items-list {\n  margin-top: 20px;\n  text-align: left;\n}\n\n.items-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n  margin-bottom: 20px;\n}\n\n.items-table th,\n.items-table td {\n  padding: 12px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  text-align: left;\n  vertical-align: middle;\n}\n\n.items-table th {\n  background: rgba(216, 144, 178, 0.2);\n  color: rgb(236, 155, 225);\n}\n\n.item-image-cell {\n  width: 80px;\n  text-align: center;\n}\n\n.item-image {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 8px;\n}\n\n.total-label {\n  text-align: right;\n  font-weight: bold;\n  color: #fff;\n}\n\n.total-value {\n  font-weight: bold;\n  color: #ff9800;\n}\n\n.button-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.back-button, .order-again-button {\n  padding: 12px 25px;\n  font-size: 14px;\n  font-weight: bold;\n  background: transparent;\n  color: #fff;\n  border: 2px solid rgb(235, 172, 216);\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  transition: 0.3s;\n  width: 48%;\n}\n\n.back-button::before, .order-again-button::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, #ffeb3b, #ff9800, #ffeb3b);\n  transition: 0.3s;\n  z-index: -1;\n}\n\n.back-button:hover::before, .order-again-button:hover::before {\n  left: 0;\n}\n\n.back-button:hover, .order-again-button:hover {\n  background: rgba(255, 235, 59, 0.3);\n  border-color: #ff9800;\n}\n\n.order-again-button {\n  background-color: rgba(216, 144, 178, 0.2);\n  border-color: rgb(216, 144, 178);\n}\n\n.order-again-button::before {\n  background: linear-gradient(90deg, #ff9800, #ff5722, #ff9800);\n}\n\n.success-message {\n  position: absolute;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  background-color: rgba(76, 175, 80, 0.8);\n  color: white;\n  padding: 10px;\n  border-radius: 5px;\n  margin: 0 auto;\n  width: 80%;\n  animation: fadeIn 0.5s;\n}\n\n/* Modal styles */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  animation: fadeIn 0.3s;\n}\n\n.unavailable-modal {\n  background-color: #2a2a42;\n  border-radius: 15px;\n  padding: 25px;\n  width: 90%;\n  max-width: 600px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  text-align: center;\n}\n\n.unavailable-modal h2 {\n  color: #ff5252;\n  text-align: center;\n  margin-bottom: 15px;\n}\n\n.unavailable-modal p {\n  color: #ddd;\n  margin-bottom: 20px;\n}\n\n.unavailable-items-list {\n  max-height: 300px;\n  overflow-y: auto;\n  margin-bottom: 20px;\n}\n\n.unavailable-item {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.05);\n  margin-bottom: 10px;\n  border-radius: 8px;\n  position: relative;\n}\n\n.small-item-image {\n  width: 40px;\n  height: 40px;\n  border-radius: 6px;\n  margin-right: 12px;\n  object-fit: cover;\n}\n\n.item-name {\n  flex-grow: 1;\n  text-align: left;\n  margin-right: 10px;\n}\n\n.unavailable-badge {\n  background-color: #ff5252;\n  color: white;\n  font-size: 12px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.remove-item-btn {\n  background-color: transparent;\n  border: 1px solid #ff9800;\n  color: #ff9800;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.remove-item-btn:hover {\n  background-color: #ff9800;\n  color: #000;\n}\n\n.modal-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.cancel-btn, .proceed-btn {\n  padding: 12px 20px;\n  border-radius: 8px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.3s;\n  width: 48%;\n}\n\n.cancel-btn {\n  background-color: transparent;\n  border: 2px solid #aaa;\n  color: #ddd;\n}\n\n.cancel-btn:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.proceed-btn {\n  background-color: #8e24aa;\n  border: none;\n  color: white;\n}\n\n.proceed-btn:hover {\n  background-color: #6a1b9a;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .order-card {\n    padding: 20px;\n    width: 95%;\n  }\n  \n  .items-table th,\n  .items-table td {\n    padding: 8px;\n    font-size: 14px;\n  }\n  \n  .item-image {\n    width: 40px;\n    height: 40px;\n  }\n  \n  h1 {\n    font-size: 24px;\n  }\n  \n  h2 {\n    font-size: 20px;\n  }\n  \n  .button-container {\n    flex-direction: column;\n  }\n  \n  .back-button, .order-again-button {\n    width: 100%;\n    margin-bottom: 10px;\n  }\n  \n  .unavailable-modal {\n    width: 95%;\n    padding: 15px;\n  }\n  \n  .modal-actions {\n    flex-direction: column;\n  }\n  \n  .cancel-btn, .proceed-btn {\n    width: 100%;\n    margin-bottom: 10px;\n  }\n}\n\n@media (max-width: 480px) {\n  .items-table {\n    font-size: 12px;\n  }\n  \n  .items-table th,\n  .items-table td {\n    padding: 6px;\n  }\n  \n  .item-image {\n    width: 30px;\n    height: 30px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}