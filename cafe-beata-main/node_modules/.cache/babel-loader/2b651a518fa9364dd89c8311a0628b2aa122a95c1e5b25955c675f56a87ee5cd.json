{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"order-confirmation-box\"\n};\nconst _hoisted_2 = {\n  class: \"order-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['order-id-page', {\n      'dark-mode': $data.isDarkMode\n    }])\n  }, [_createCommentVNode(\" Order Queue Notification \"), _cache[7] || (_cache[7] = _createElementVNode(\"h4\", null, \" Your order is in queue.. Please check your dashboard notifications regularly for updates. \", -1 /* HOISTED */)), _cache[8] || (_cache[8] = _createElementVNode(\"h4\", null, \" PLEASE SCREENSHOT OR SAVE THE ORDER ID NUMBER ALWAYS! \", -1 /* HOISTED */)), _createCommentVNode(\" Order Confirmation Box \"), _createElementVNode(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n    class: \"checkmark\"\n  }, [_createElementVNode(\"span\", null, \"✔️\"), _createCommentVNode(\" Checkmark icon \")], -1 /* HOISTED */)), _cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Order Confirmed :)\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, _toDisplayString($data.currentDate), 1 /* TEXT */), _createCommentVNode(\" Add horizontal line \"), _cache[6] || (_cache[6] = _createElementVNode(\"hr\", {\n    class: \"order-line\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Order Details \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Order No:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(parseInt($data.orderID)), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Customer:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.customerName), 1 /* TEXT */)]), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.orderItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(item.name) + \" - ₱\" + _toDisplayString(item.price * item.quantity) + \" x\" + _toDisplayString(item.quantity), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Total Payment:\", -1 /* HOISTED */)), _createTextVNode(\" ₱\" + _toDisplayString($data.total), 1 /* TEXT */)])]), _createCommentVNode(\" Back to Dashboard Button \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goBackToDashboard && $options.goBackToDashboard(...args)),\n    class: \"back-button\"\n  }, \"Back to Dashboard\")])], 2 /* CLASS */);\n}","map":{"version":3,"names":["class","_createElementBlock","_normalizeClass","$data","isDarkMode","_createCommentVNode","_createElementVNode","_hoisted_1","_toDisplayString","currentDate","_hoisted_2","_createTextVNode","parseInt","orderID","customerName","_Fragment","_renderList","orderItems","item","index","key","name","price","quantity","total","onClick","_cache","args","$options","goBackToDashboard"],"sources":["D:\\cafe-beata-Inventory-Preorder-main\\cafe-beata-main\\src\\components\\OrderIDPage.vue"],"sourcesContent":["<template>\n  <div :class=\"['order-id-page', { 'dark-mode': isDarkMode }]\">\n    \n    <!-- Order Queue Notification -->\n    <h4>\n      Your order is in queue.. Please check your dashboard notifications regularly for updates.\n    </h4>\n\n    <h4>\n      PLEASE SCREENSHOT OR SAVE THE ORDER ID NUMBER ALWAYS!\n    </h4>\n\n    <!-- Order Confirmation Box -->\n    <div class=\"order-confirmation-box\">\n      <div class=\"checkmark\">\n        <span>✔️</span> <!-- Checkmark icon -->\n      </div>\n      <h2>Order Confirmed :)</h2>\n      <p>{{ currentDate }}</p>\n\n      <!-- Add horizontal line -->\n      <hr class=\"order-line\"/>\n\n      <!-- Order Details -->\n      <div class=\"order-details\">\n        <p><strong>Order No:</strong> {{ parseInt(orderID) }}</p>\n        <p><strong>Customer:</strong> {{ customerName }}</p>\n        <ul>\n          <li v-for=\"(item, index) in orderItems\" :key=\"index\">\n            {{ item.name }} - ₱{{ item.price * item.quantity }} x{{ item.quantity }}\n          </li>\n        </ul>\n        <p><strong>Total Payment:</strong> ₱{{ total }}</p>\n      </div>\n\n      <!-- Back to Dashboard Button -->\n      <button @click=\"goBackToDashboard\" class=\"back-button\">Back to Dashboard</button>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nexport default {\n  data() {\n    return {\n      orderID: this.$route.query.orderID || \"Unknown\",\n      orderItems: [],\n      customerName: this.$route.query.customerName || localStorage.getItem('userName') || \"Guest\", // Ensure it's from localStorage\n      orderCompletedMessage: \"\", // Store the order completion message\n      isDarkMode: localStorage.getItem(\"darkMode\") === \"true\",\n      orderCompleted: false, // Add a flag to track if the order is completed\n      currentDate: new Date().toLocaleDateString(),  // Current date for order confirmation\n      total: 0 // Total amount for the order\n    };\n  },\n  created() {\n    this.loadOrderItems();\n    \n    // Notification feature is disabled\n    // const userName = localStorage.getItem(\"userName\");\n    // const userNotificationsKey = `user_notifications_${userName}`;\n    // const existingNotifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n    // const hasExistingNotification = existingNotifications.some(n => n.orderId === this.orderID);\n    // if (!hasExistingNotification) {\n    //   this.sendEstimatedTimeNotification();\n    // }\n  },\n  methods: {\n    loadOrderItems() {\n      try {\n        this.orderItems = JSON.parse(this.$route.query.items || \"[]\");\n        this.total = this.orderItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n      } catch (error) {\n        console.error(\"Error parsing order items:\", error);\n        this.orderItems = [];\n      }\n    },\n\n    // New method to send estimated preparation time notification\n    sendEstimatedTimeNotification() {\n      // Calculate if the order has drinks only, food, or both\n      const hasDrinks = this.orderItems.some(item => \n        item.category && \n        (item.category.toLowerCase().includes('drink') || \n         item.category === 'Juice Drinks' || \n         item.category === 'Chocolate Drinks' ||\n         item.category === 'Coffee')\n      );\n      \n      const hasFood = this.orderItems.some(item => \n        item.category && \n        !item.category.toLowerCase().includes('drink') && \n        item.category !== 'Juice Drinks' && \n        item.category !== 'Chocolate Drinks' &&\n        item.category !== 'Coffee'\n      );\n      \n      // Determine estimated time based on order content\n      let estimatedTime;\n      if (hasDrinks && !hasFood) {\n        estimatedTime = \"10-12 minutes\";\n      } else if (hasFood || (hasDrinks && hasFood)) {\n        estimatedTime = \"12-15 minutes\";\n      } else {\n        estimatedTime = \"10-15 minutes\";\n      }\n      \n      // Create the notification message\n      const orderDetails = this.orderItems.map(item => `${item.name} x${item.quantity}`).join(\", \");\n      \n      const message = `Your order #${this.orderID} has been received! Estimated preparation time: ${estimatedTime}. <span class=\"highlighted-order-details\">Order details: ${orderDetails}. Total: ₱${this.total}</span>`;\n      \n      // Create the notification object\n      const notification = {\n        orderId: this.orderID,\n        customerName: this.customerName,\n        message: message,\n        timestamp: new Date().toISOString(),\n      };\n      \n      // Add the notification to localStorage\n      this.addNotificationToUserNotifications(notification);\n    },\n\n    // This method sends the notification to a specific user\n    markOrderAsDone() {\n      if (!this.orderCompleted) {\n        this.orderCompleted = true;  // Set order to completed\n        this.orderCompletedMessage = \"Your Order Has Completed Ready To Pickup!\";\n        \n        const orderDetails = this.orderItems.map(item => `${item.name} x${item.quantity}`).join(\", \");\n        const total = this.orderItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);\n        \n        // Constructing the notification message with highlighted details\n        const message = `Your order is ready! Proceed to the cashier for payment and pickup. <span class=\"highlighted-order-details\">Order details: ${orderDetails}. Total: ₱${total}</span>`;\n        \n        const notification = {\n          orderId: this.orderID,\n          customerName: this.customerName, // Attach the customer name\n          message: message, // Highlighted message\n          timestamp: new Date().toISOString(),\n        };\n\n        // Add the notification to localStorage under the specific user's notifications\n        this.addNotificationToUserNotifications(notification);\n      }\n    },\n\n    // Add the notification to localStorage, ensuring it's saved per user\n    addNotificationToUserNotifications(notification) {\n      const userNotificationsKey = `user_notifications_${this.customerName}`; // Use the customerName\n      let notifications = JSON.parse(localStorage.getItem(userNotificationsKey)) || [];\n      \n      // Check if a notification for this order ID with the same message already exists\n      const existingNotificationIndex = notifications.findIndex(\n        n => n.orderId === notification.orderId && n.message === notification.message\n      );\n      \n      // Only add the notification if it doesn't already exist\n      if (existingNotificationIndex === -1) {\n        notifications.push(notification);\n        localStorage.setItem(userNotificationsKey, JSON.stringify(notifications));\n      }\n    },\n\n    goBackToDashboard() {\n      this.$router.push({ name: \"Dashboard\" });\n    },\n\n    clearNotification() {\n      this.orderCompletedMessage = \"\"; // Clear the message\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n\n/* Styling for the horizontal line between date and order ID */\n/* Styling for the horizontal broken line between date and order ID */\n.order-line {\n  width: 100%;\n  border: none;\n  border-top: 2px dashed #000000; /* Dashed green line */\n  margin: 20px 0;\n}\n/* 🌙 Dark Mode - Order Confirmation Box */\n.dark-mode .order-confirmation-box {\n  background-color: #f0f0f0 !important; /* Light background for dark mode */\n  color: black !important; /* Ensure text is dark */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important; /* Add shadow for better visibility */\n}\n\n/* Order Confirmation Box (Default Light Mode) */\n.order-confirmation-box {\n  background-color: white; /* Changed to white background */\n  color: black; /* Ensure text is dark */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Light shadow */\n  border: 1px solid #E54F70; /* Added pink border */\n}\n\n\n\n/* Order Completion Notification */\n.order-notification {\n  position: fixed;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #4CAF50;\n  color: white;\n  padding: 15px 20px;\n  border-radius: 5px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  font-weight: bold;\n  z-index: 1000;\n}\n\n.order-notification button {\n  margin-left: 10px;\n  background-color: white;\n  color: #4CAF50;\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  border-radius: 3px;\n}\n\n.order-notification button:hover {\n  background-color: #f8f8f8;\n}\n\n/* 🌙 Dark Mode - Dark Outer Background */\n.dark-mode .order-id-page {\n  background-color: #222 !important;\n  color: white !important;\n}\n\n/* 🌙 Dark Mode - Keep Order ID Box Light */\n.dark-mode .order-id {\n  background-color:rgb(197, 197, 197) !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n\n/* 🌙 Dark Mode - Keep Order Details Box Light */\n.dark-mode .order-details li {\n background-color:rgb(197, 197, 197) !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n\n.dark-mode h1,\n.dark-mode h3,\n.dark-mode h4,\n.dark-mode .order-details h3,\n.dark-mode .order-id-page h1,\n.dark-mode .order-id-page h3,\n.dark-mode .order-id-page h4 {\n  color: white !important;\n}\n\n/* 🌙 Dark Mode - Buttons */\n.dark-mode .back-button {\n  background-color: #444 !important;\n  color: white !important;\n  border: 1px solid #666 !important;\n}\n\n.dark-mode .back-button:hover {\n  background-color: #666 !important;\n}\n\n/* 🌙 Dark Mode - Ensure Text Inside Boxes is Dark */\n.dark-mode .order-id h2,\n.dark-mode .order-details h3,\n.dark-mode .order-details span {\n  color: black !important;\n}\n\n/* Order Confirmation Box */\n.order-confirmation-box {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #fce6e6;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  width: 80%;\n  max-width: 500px;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.checkmark {\n  font-size: 40px;\n  color: #4CAF50;\n}\n\nh2 {\n  margin: 10px 0;\n  font-size: 24px;\n}\n\n.order-details {\n  font-size: 18px;\n  margin: 20px 0;\n  text-align: left;\n}\n\n.order-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.order-details li {\n  margin: 10px 0;\n}\n\n.back-button {\n  padding: 12px 25px;\n  font-size: 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n  text-transform: uppercase;\n  margin-top: 20px;\n}\n\n.back-button:hover {\n  background-color: #45a049;\n}\n\n/* Order ID Page */\n.order-id-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n  max-height: 100vh;\n  overflow-y: auto;\n  text-align: center;\n  padding: 30px;\n  background-color: white; /* Changed to white background */\n  border-radius: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 700px;\n  margin: 0 auto;\n  box-sizing: border-box;\n}\n\n/* Order ID Display */\n.order-id {\n  font-size: 28px;\n  font-weight: bold;\n  margin: 20px 0;\n  background: rgba(229, 79, 112, 0.05); /* Lighter pink background */\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  border: 1px solid #E54F70; /* Added pink border */\n}\n\n.order-details {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.order-details ul {\n  list-style-type: none;\n  padding: 0;\n  font-size: 18px;\n}\n\n.order-details li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  padding: 15px;\n  background: rgba(229, 79, 112, 0.05); /* Lighter pink background */\n  border-radius: 10px;\n  font-size: 18px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(229, 79, 112, 0.3); /* Added soft pink border */\n}\n\n/* New message */\n.message {\n  font-size: 20px;\n  font-weight: bold;\n  background: rgba(229, 79, 112, 0.1); /* Light pink background */\n  padding: 12px;\n  border-radius: 10px;\n  margin-bottom: 30px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  border: 1px solid #E54F70; /* Added pink border */\n}\n\n/* Glowing effect for the \"Back to Dashboard\" button */\n.back-button {\n  padding: 12px 25px;\n  font-size: 16px;\n  background-color: transparent;\n  color: #FFF;\n  border: none;\n  cursor: pointer;\n  position: relative;\n  z-index: 0;\n  border-radius: 20px;\n  text-transform: uppercase;\n}\n\n.back-button::after {\n  content: \"\";\n  z-index: -1;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-color: #E54F70; /* Changed to pink background */\n  left: 0;\n  top: 0;\n  border-radius: 20px;\n}\n\n.back-button::before {\n  content: \"\";\n  background: linear-gradient(\n    45deg,\n    #FF0000, #FF7300, #FFFB00, #48FF00,\n    #00FFD5, #002BFF, #FF00C8, #FF0000\n  );\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  background-size: 600%;\n  z-index: -1;\n  width: calc(100% + 4px);\n  height: calc(100% + 4px);\n  filter: blur(8px);\n  animation: glowing 20s linear infinite;\n  transition: opacity .3s ease-in-out;\n  border-radius: 20px;\n  opacity: 0;\n}\n\n.back-button:hover::before {\n  opacity: 1;\n}\n\n.back-button:active:after {\n  background: transparent;\n}\n\n.back-button:active {\n  color: #000;\n  font-weight: bold;\n  background-color: #E54F70;\n  border-color: #E54F70;\n}\n\n/* Glow Animation */\n@keyframes glowing {\n  0% {background-position: 0 0;}\n  50% {background-position: 400% 0;}\n  100% {background-position: 0 0;}\n}\n\n/* 📱 Mobile Responsive Adjustments */\n@media (max-width: 768px) {\n  .order-id {\n    font-size: 22px;\n    padding: 10px;\n  }\n\n  .order-details li {\n    flex-direction: column;\n    font-size: 16px;\n    padding: 14px;\n    text-align: center;\n  }\n\n  .message {\n    font-size: 18px;\n    padding: 10px;\n  }\n\n  button {\n    font-size: 14px;\n    padding: 12px;\n  }\n}\n\n/* Extra Small Screens (iPhone SE, very small phones) */\n@media (max-width: 480px) {\n  .order-id {\n    font-size: 20px;\n    padding: 8px;\n  }\n\n  .order-details li {\n    font-size: 14px;\n    padding: 10px;\n  }\n\n  .message {\n    font-size: 16px;\n  }\n\n  button {\n    font-size: 13px;\n    padding: 10px;\n    width: 100%;\n  }\n}\n</style>\n"],"mappings":";;EAaSA,KAAK,EAAC;AAAwB;;EAW5BA,KAAK,EAAC;AAAe;;uBAvB9BC,mBAAA,CAqCM;IArCAD,KAAK,EADbE,eAAA;MAAA,aACgDC,KAAA,CAAAC;IAAU;MAEtDC,mBAAA,8BAAiC,E,0BACjCC,mBAAA,CAEK,YAFD,6FAEJ,sB,0BAEAA,mBAAA,CAEK,YAFD,yDAEJ,sBAEAD,mBAAA,4BAA+B,EAC/BC,mBAAA,CAwBM,OAxBNC,UAwBM,G,0BAvBJD,mBAAA,CAEM;IAFDN,KAAK,EAAC;EAAW,IACpBM,mBAAA,CAAe,cAAT,IAAE,GAAQD,mBAAA,oBAAuB,C,gDAEzCC,mBAAA,CAA2B,YAAvB,oBAAkB,sBACtBA,mBAAA,CAAwB,WAAAE,gBAAA,CAAlBL,KAAA,CAAAM,WAAW,kBAEjBJ,mBAAA,yBAA4B,E,0BAC5BC,mBAAA,CAAwB;IAApBN,KAAK,EAAC;EAAY,6BAEtBK,mBAAA,mBAAsB,EACtBC,mBAAA,CASM,OATNI,UASM,GARJJ,mBAAA,CAAyD,Y,0BAAtDA,mBAAA,CAA0B,gBAAlB,WAAS,sBAzB5BK,gBAAA,CAyBqC,GAAC,GAAAH,gBAAA,CAAGI,QAAQ,CAACT,KAAA,CAAAU,OAAO,kB,GACjDP,mBAAA,CAAoD,Y,0BAAjDA,mBAAA,CAA0B,gBAAlB,WAAS,sBA1B5BK,gBAAA,CA0BqC,GAAC,GAAAH,gBAAA,CAAGL,KAAA,CAAAW,YAAY,iB,GAC7CR,mBAAA,CAIK,c,kBAHHL,mBAAA,CAEKc,SAAA,QA9BfC,WAAA,CA4BsCb,KAAA,CAAAc,UAAU,EA5BhD,CA4BsBC,IAAI,EAAEC,KAAK;yBAAvBlB,mBAAA,CAEK;MAFoCmB,GAAG,EAAED;IAAK,GAAAX,gBAAA,CAC9CU,IAAI,CAACG,IAAI,IAAG,MAAI,GAAAb,gBAAA,CAAGU,IAAI,CAACI,KAAK,GAAGJ,IAAI,CAACK,QAAQ,IAAG,IAAE,GAAAf,gBAAA,CAAGU,IAAI,CAACK,QAAQ;oCAGzEjB,mBAAA,CAAmD,Y,0BAAhDA,mBAAA,CAA+B,gBAAvB,gBAAc,sBAhCjCK,gBAAA,CAgC0C,IAAE,GAAAH,gBAAA,CAAGL,KAAA,CAAAqB,KAAK,iB,KAG9CnB,mBAAA,8BAAiC,EACjCC,mBAAA,CAAiF;IAAxEmB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;IAAE3B,KAAK,EAAC;KAAc,mBAAiB,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}